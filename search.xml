<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实现24小时无人直播流-一看就会</title>
    <url>/looking/3766f053.html</url>
    <content><![CDATA[<h1 id="24小时无人直播流"><a href="#24小时无人直播流" class="headerlink" title="24小时无人直播流"></a>24小时无人直播流</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>获取直播平台的服务器地址和串流密钥（如B站）</li>
<li>一台服务器</li>
<li>会点linux命令</li>
</ul>
<h2 id="获取直播平台的服务器地址和串流密钥：如下图"><a href="#获取直播平台的服务器地址和串流密钥：如下图" class="headerlink" title="获取直播平台的服务器地址和串流密钥：如下图"></a>获取直播平台的服务器地址和串流密钥：如下图</h2><p><img src="/img/local/25.png" alt="Bilibili"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>安装窗口管理工具<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install screen</span><br></pre></td></tr></tbody></table></figure></li>
<li>创建ffmpeg目录<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/lighhouse/ffmpeg</span><br></pre></td></tr></tbody></table></figure></li>
<li>去到目录下<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/lighhouse</span><br></pre></td></tr></tbody></table></figure></li>
<li>开个新窗口<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">screen -S stream	<span class="comment">#窗口名为stream</span></span><br></pre></td></tr></tbody></table></figure>
5、编辑脚本：<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim stream.sh</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>#脚本内容如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="comment">#=================================================================#</span></span><br><span class="line"><span class="comment">#   System Required: CentOS7 X86_64                               #</span></span><br><span class="line"><span class="comment">#   Description: FFmpeg Stream Media Server                       #</span></span><br><span class="line"><span class="comment">#   Author: LALA                                    #</span></span><br><span class="line"><span class="comment">#   Website: https://www.lala.im                                  #</span></span><br><span class="line"><span class="comment">#=================================================================#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色选择</span></span><br><span class="line">red=<span class="string">'\033[0;31m'</span></span><br><span class="line">green=<span class="string">'\033[0;32m'</span></span><br><span class="line">yellow=<span class="string">'\033[0;33m'</span></span><br><span class="line">font=<span class="string">"\033[0m"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ffmpeg_install</span></span>(){</span><br><span class="line"><span class="comment"># 安装FFMPEG</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"你的机器内是否已经安装过FFmpeg4.x?安装FFmpeg才能正常推流,是否现在安装FFmpeg?(yes/no):"</span> Choose</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Choose</span> = <span class="string">"yes"</span> ];<span class="keyword">then</span></span><br><span class="line">    yum -y install wget</span><br><span class="line">    wget --no-check-certificate https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-4.0.3-64bit-static.tar.xz</span><br><span class="line">    tar -xJf ffmpeg-4.0.3-64bit-static.tar.xz</span><br><span class="line">    <span class="built_in">cd</span> ffmpeg-4.0.3-64bit-static</span><br><span class="line">    <span class="built_in">mv</span> ffmpeg /usr/bin &amp;&amp; <span class="built_in">mv</span> ffprobe /usr/bin &amp;&amp; <span class="built_in">mv</span> qt-faststart /usr/bin &amp;&amp; <span class="built_in">mv</span> ffmpeg-10bit /usr/bin</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Choose</span> = <span class="string">"no"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${yellow}</span> 你选择不安装FFmpeg,请确定你的机器内已经自行安装过FFmpeg,否则程序无法正常工作! <span class="variable">${font}</span>"</span></span><br><span class="line">    <span class="built_in">sleep</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stream_start</span></span>(){</span><br><span class="line"><span class="comment"># 定义推流地址和推流码</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入你的推流地址和推流码(rtmp协议):"</span> rtmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断用户输入的地址是否合法</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$rtmp</span> =~ <span class="string">"rtmp://"</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${green}</span> 推流地址输入正确,程序将进行下一步操作. <span class="variable">${font}</span>"</span></span><br><span class="line">  	<span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">  	<span class="built_in">echo</span> -e <span class="string">"<span class="variable">${red}</span> 你输入的地址不合法,请重新运行程序并输入! <span class="variable">${font}</span>"</span></span><br><span class="line">  	<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义视频存放目录</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入你的视频存放目录 (格式仅支持mp4,并且要绝对路径,例如/opt/video):"</span> folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否需要添加水印</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"是否需要为视频添加水印?水印位置默认在右上方,需要较好CPU支持(yes/no):"</span> watermark</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$watermark</span> = <span class="string">"yes"</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">"输入你的水印图片存放绝对路径,例如/opt/image/watermark.jpg (格式支持jpg/png/bmp):"</span> image</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${yellow}</span> 添加水印完成,程序将开始推流. <span class="variable">${font}</span>"</span></span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$folder</span></span><br><span class="line">        <span class="keyword">for</span> video <span class="keyword">in</span> $(<span class="built_in">ls</span> *.mp4)	<span class="comment">#视频类型</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#192k</span></span><br><span class="line">        ffmpeg -re -i <span class="string">"<span class="variable">$video</span>"</span> -i <span class="string">"<span class="variable">$image</span>"</span> -filter_complex overlay=W-w-5:5 -c:v libx264 -c:a aac -b:a 192k -strict -2 -f flv <span class="variable">${rtmp}</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$watermark</span> = <span class="string">"no"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${yellow}</span> 你选择不添加水印,程序将开始推流. <span class="variable">${font}</span>"</span></span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$folder</span></span><br><span class="line">        <span class="comment">#for video in $(ls *.mp4)</span></span><br><span class="line">        <span class="comment">#do</span></span><br><span class="line">        <span class="comment">#ffmpeg -re -i "$video" -c:v copy -c:a aac -b:a 192k -strict -2 -f flv ${rtmp}</span></span><br><span class="line">        <span class="comment">#done</span></span><br><span class="line">        video=$(find ./ -<span class="built_in">type</span> f | <span class="built_in">shuf</span> -n 1)</span><br><span class="line">        <span class="comment">#-preset这是指定编码速度和质量的预设。ultrafast 是速度最快的预设，但编码质量可能会稍微降低。</span></span><br><span class="line">        <span class="comment">#-g 60：设置关键帧间隔为 60 帧。关键帧是视频帧的一个特殊类型，用于保持视频的完整性，通常设置关键帧间隔可以影响视频的压缩效率和质量。</span></span><br><span class="line">        <span class="comment">#-vcodec：编码器 - libx264：264的编码器</span></span><br><span class="line">        <span class="comment">#-b:v 1500k：设置视频比特率为 1500 kbps，即视频的码率。</span></span><br><span class="line">        ffmpeg -re -i <span class="string">"<span class="variable">$video</span>"</span> -preset ultrafast -vcodec libx264 -g 60 -b:v 1500k -c:a aac -b:a 128k -strict -2 -f flv <span class="variable">${rtmp}</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止推流</span></span><br><span class="line"><span class="function"><span class="title">stream_stop</span></span>(){</span><br><span class="line">    screen -S stream -X quit</span><br><span class="line">    killall ffmpeg</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始菜单设置</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">${yellow}</span> CentOS7 X86_64 FFmpeg无人值守循环推流 For LALA.IM <span class="variable">${font}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">${red}</span> 请确定此脚本目前是在screen窗口内运行的! <span class="variable">${font}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">${green}</span> 1.安装FFmpeg (机器要安装FFmpeg才能正常推流) <span class="variable">${font}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">${green}</span> 2.开始无人值守循环推流 <span class="variable">${font}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">${green}</span> 3.停止推流 <span class="variable">${font}</span>"</span></span><br><span class="line"><span class="function"><span class="title">start_menu</span></span>(){</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">"请输入数字(1-3),选择你要进行的操作:"</span> num</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$num</span>"</span> <span class="keyword">in</span></span><br><span class="line">        1)</span><br><span class="line">        ffmpeg_install</span><br><span class="line">        ;;</span><br><span class="line">        2)</span><br><span class="line">        stream_start</span><br><span class="line">        ;;</span><br><span class="line">        3)</span><br><span class="line">        stream_stop</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"<span class="variable">${red}</span> 请输入正确的数字 (1-3) <span class="variable">${font}</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行开始菜单</span></span><br><span class="line">start_menu</span><br></pre></td></tr></tbody></table></figure>

<p>6、运行脚本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x stream.sh      <span class="comment"># 给脚本执行权限</span></span><br><span class="line">./stream.sh             <span class="comment"># 运行脚本</span></span><br></pre></td></tr></tbody></table></figure>
<p>7、使用说明</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#执行脚本后弹出菜单，选择对应操作即可：</span><br><span class="line">1) 先选择1 安装ffmpeg </span><br><span class="line">2) 安装ffmpeg后脚本会退出、再新建video目录存放需要播放的视频：</span><br><span class="line"></span><br><span class="line">&gt; mkdir /root/lighhouse/video</span><br><span class="line"></span><br><span class="line">3) 再运行脚本后选择2 输入对应的配置：</span><br><span class="line">   -- 提示 输入要直播平台的url地址和串流码：如B站：https://zxxx/串流码</span><br><span class="line">   -- 输入视频存放的目录：/root/lighhouse/video</span><br><span class="line">   -- 是否加水印：no</span><br></pre></td></tr></tbody></table></figure>

<ol start="8">
<li>这些都做完后既可以在B站看到自己的直播了：在另一个终端打开命令行执行<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-- screen -<span class="built_in">ls</span>	<span class="comment">#查看有几个进程和进程号</span></span><br><span class="line">-- screen -d 进程号.stream	<span class="comment">#将进程脱离终端执行</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>9.注意视频文件要以mp4格式结尾、且要放在/root/lighhouse/video 该路径下</p>
<ol start="10">
<li>退出直播可以执行：<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">screen -X -S 进程号.stream</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>24小时直播</tag>
      </tags>
  </entry>
  <entry>
    <title>联想小新Air14</title>
    <url>/looking/5c120c19.html</url>
    <content><![CDATA[<h1 id="设备概述"><a href="#设备概述" class="headerlink" title="设备概述"></a>设备概述</h1><p><strong>型号:</strong> 联想小新Air 14 2020 锐龙版<br><strong>内存:</strong> 双通道16GB DDR4 3200内存<br><strong>存储:</strong> 512GB M.2 SSD<br><strong>颜色:</strong> 深空灰<br><strong>重量:</strong> 1.38kg<br><strong>厚度:</strong> 16.9mm  </p>
<p><em>轻薄便携，适合高效工作</em><br>联想小新Air 14 2020 锐龙版的设计以轻薄便携为特点，完美融合了出色的性能和时尚的外观，是我在工作和日常使用中的理想选择。</p>
<h2 id="设计与外观"><a href="#设计与外观" class="headerlink" title="设计与外观"></a>设计与外观</h2><p>这款笔记本以深空灰为主题色，不仅外观时尚，还显得低调沉稳。轻至1.38kg的重量和只有16.9mm的厚度使得它在携带和操作时非常方便，无论是放在背包里还是在会议室中移动，都显得得心应手。</p>
<h2 id="性能与响应"><a href="#性能与响应" class="headerlink" title="性能与响应"></a>性能与响应</h2><p>搭载双通道16GB DDR4 3200内存和快速的512GB M.2 SSD，小新Air 14 提供了强大的性能支持。我可以流畅地处理多个任务和大型文件，从轻量级办公应用到复杂的数据分析，都能够迅速响应，让工作效率大大提升。</p>
<h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><p>小新Air 14 在日常工作中表现得尤为出色。键盘手感舒适，打字没有任何延迟感；触控板灵敏度高，手势操作流畅自如。屏幕色彩鲜明，分辨率高，即使长时间工作也不易疲劳。同时，电池续航也十分可靠，一次充电可以支持我整个工作日的使用，减少了频繁充电的困扰。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>综上所述，联想小新Air 14 2020 锐龙版凭借其轻便的设计、优秀的性能和出色的用户体验，完美满足了我对一款高效办公笔记本的所有期待。它不仅令我在工作中更加高效，还凭借其时尚的外观为我赢得了不少眼球。如果您也在寻找一款适合移动办公的笔记本，小新Air 14 无疑是一个强烈推荐的选择。</p>
]]></content>
      <categories>
        <category>科技</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>N1盒子-私人影院搭建</title>
    <url>/looking/93af6d44.html</url>
    <content><![CDATA[<p class="p center logo large">N1盒子原系统刷机istoreOS</p>
<p><code>如果你是N1盒子可以参考下这个教程</code></p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/littlecc/p/18302009">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">N1盒子玩法-原系统刷istoreOS系统</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/littlecc/p/18300431">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">N1盒子玩法-挂载阿里云盘-Alist工具</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>



<p class="p center logo large">私人影院搭建</p>
<div class="note info flat"><p>N1盒子+Alist+阿里云盘+小雅-搭建家庭影院</p>
</div>
<h2 id="🚀前景摘要"><a href="#🚀前景摘要" class="headerlink" title="==🚀前景摘要=="></a>==🚀前景摘要==</h2><p>💬 本文是基于N1盒子软路由写的,当然有服务器更好<br>💯 已安装docker,有一丢丢基础即可<br>👽 确定你已经拥有了云盘(如阿里云盘)<br>🤖 已安装Alist并已挂载云盘<br>👻 开始搭建个人影院吧</p>
<h2 id="🧭-准备"><a href="#🧭-准备" class="headerlink" title="🧭 准备"></a>🧭 准备</h2><ol>
<li>准备好N1，刷好自带Docker的istoreOS(或个人服务器)，这个简单，一略而过。</li>
<li>准备参数：</li>
</ol>
<ul>
<li>阿里云盘token：<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html#%E5%88%B7%E6%96%B0%E4%BB%A4%E7%89%8C">获取阿里云盘的token文档教程</a></li>
<li>阿里云盘Open token: <a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html#%E5%88%B7%E6%96%B0%E4%BB%A4%E7%89%8C">阿里云盘Open token文档教程-看刷新令牌那里</a></li>
<li>阿里云盘转存<code>文件夹(xiaoya)ID</code>：<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html#%E6%A0%B9%E6%96%87%E4%BB%B6%E5%A4%B9id">参考文档-看根文件夹ID那里</a></li>
</ul>
<div class="note warning simple"><p>🚨特别注意：<br><strong>云盘中已新建的<code>文件夹（xiaoya）</code>不要删除。如果误删，即便是新建一个相同名称的文件夹，ID也会改变，需要自己手动更新才能正常访问小雅</strong></p>
</div>

<hr>
<hr>
<h2 id="🎮-小雅安装"><a href="#🎮-小雅安装" class="headerlink" title="🎮 小雅安装"></a>🎮 小雅安装</h2><h3 id="1-先ssh登录到ISO软路由（或服务器）"><a href="#1-先ssh登录到ISO软路由（或服务器）" class="headerlink" title="1. 先ssh登录到ISO软路由（或服务器）"></a>1. 先ssh登录到ISO软路由（或服务器）</h3><h3 id="2-再安装小雅"><a href="#2-再安装小雅" class="headerlink" title="2. 再安装小雅"></a>2. 再安装小雅</h3><p><code>可执行一键默认安装：</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">bash -c <span class="string">"<span class="subst">$(curl http://docker.xiaoya.pro/update_new.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note warning simple"><p>🚨<em><strong>注意</strong></em>：<br>安装过程中按照提示依次粘贴<code>阿里云盘token</code>、<code>阿里云盘OpenToken</code>、<code>转存文件夹ID</code>，等待安装完成</p>
</div>

<p><code>安装小雅的sh脚本</code></p>
<blockquote>
<p>如果上面不想一键安装，可以手动执行<br>基于docker安装<br>注意更改脚本中的挂载路径的变量(V_data)</p>
</blockquote>
<details>
<summary>点击查看代码</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#小雅docker数据挂载安装目录</span></span><br><span class="line">V_data=<span class="string">"/mnt/mydisk/etc/xiaoya"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$V_data</span>/mytoken.txt ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">rm</span> -rf <span class="variable">$V_data</span>/mytoken.txt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$V_data</span>/data</span><br><span class="line"><span class="built_in">touch</span> <span class="variable">$V_data</span>/mytoken.txt</span><br><span class="line"><span class="built_in">touch</span> <span class="variable">$V_data</span>/myopentoken.txt</span><br><span class="line"><span class="built_in">touch</span> <span class="variable">$V_data</span>/temp_transfer_folder_id.txt</span><br><span class="line"></span><br><span class="line">mytokenfilesize=$(<span class="built_in">cat</span> <span class="variable">$V_data</span>/mytoken.txt)</span><br><span class="line">mytokenstringsize=<span class="variable">${#mytokenfilesize}</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$mytokenstringsize</span> -le 31 ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[32m"</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">"输入你的阿里云盘 Token（32位长）: "</span> token</span><br><span class="line">	token_len=<span class="variable">${#token}</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$token_len</span> -ne 32 ]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"长度不对,阿里云盘 Token是32位长"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"安装停止，请参考指南配置文件\nhttps://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f \n"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">	<span class="keyword">else</span>	</span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$token</span> &gt; <span class="variable">$V_data</span>/mytoken.txt</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line"></span><br><span class="line">myopentokenfilesize=$(<span class="built_in">cat</span> <span class="variable">$V_data</span>/myopentoken.txt)</span><br><span class="line">myopentokenstringsize=<span class="variable">${#myopentokenfilesize}</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$myopentokenstringsize</span> -le 279 ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[33m"</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">"输入你的阿里云盘 Open Token（335位长）: "</span> opentoken</span><br><span class="line">	opentoken_len=<span class="variable">${#opentoken}</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$opentoken_len</span> -le 334 ]]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"长度不对,阿里云盘 Open Token是335位"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"安装停止，请参考指南配置文件\nhttps://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f \n"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line">                <span class="built_in">exit</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	<span class="built_in">echo</span> <span class="variable">$opentoken</span> &gt; <span class="variable">$V_data</span>/myopentoken.txt</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">folderidfilesize=$(<span class="built_in">cat</span> <span class="variable">$V_data</span>/temp_transfer_folder_id.txt)</span><br><span class="line">folderidstringsize=<span class="variable">${#folderidfilesize}</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$folderidstringsize</span> -le 39 ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[36m"</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">"输入你的阿里云盘转存目录folder id: "</span> folderid</span><br><span class="line">	folder_id_len=<span class="variable">${#folderid}</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$folder_id_len</span> -ne 40 ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"长度不对,阿里云盘 folder id是40位长"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"安装停止，请参考指南配置文件\nhttps://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f \n"</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line">                <span class="built_in">exit</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	<span class="built_in">echo</span> <span class="variable">$folderid</span> &gt; <span class="variable">$V_data</span>/temp_transfer_folder_id.txt</span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo "new" &gt; /etc/xiaoya/show_my_ali.txt</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v ifconfig &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">        localip=$(ifconfig -a|grep inet|grep -v 172.17 | grep -v 127.0.0.1|grep -v inet6|awk <span class="string">'{print $2}'</span>|<span class="built_in">tr</span> -d <span class="string">"addr:"</span>|<span class="built_in">head</span> -n1)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        localip=$(ip address|grep inet|grep -v 172.17 | grep -v 127.0.0.1|grep -v inet6|awk <span class="string">'{print $2}'</span>|<span class="built_in">tr</span> -d <span class="string">"addr:"</span>|<span class="built_in">head</span> -n1|<span class="built_in">cut</span> -f1 -d<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">'host'</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">if</span> [ ! -s <span class="variable">$V_data</span>/docker_address.txt ]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"http://<span class="variable">$localip</span>:5678"</span> &gt; <span class="variable">$V_data</span>/docker_address.txt</span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line">	docker stop xiaoya 2&gt;/dev/null</span><br><span class="line">	docker <span class="built_in">rm</span> xiaoya 2&gt;/dev/null</span><br><span class="line">	docker stop xiaoya-hostmode 2&gt;/dev/null</span><br><span class="line">	docker <span class="built_in">rm</span> xiaoya-hostmode 2&gt;/dev/null</span><br><span class="line">	docker rmi xiaoyaliu/alist:hostmode</span><br><span class="line">	docker pull xiaoyaliu/alist:hostmode</span><br><span class="line">	<span class="keyword">if</span> [[ -f <span class="variable">$V_data</span>/proxy.txt ]] &amp;&amp; [[ -s <span class="variable">$V_data</span>/proxy.txt ]]; <span class="keyword">then</span></span><br><span class="line">        	proxy_url=$(<span class="built_in">head</span> -n1 <span class="variable">$V_data</span>/proxy.txt)</span><br><span class="line">		docker create  --<span class="built_in">env</span> HTTP_PROXY=<span class="string">"<span class="variable">$proxy_url</span>"</span> --<span class="built_in">env</span> HTTPS_PROXY=<span class="string">"<span class="variable">$proxy_url</span>"</span> --<span class="built_in">env</span> no_proxy=<span class="string">"*.aliyundrive.com,*.alipan.com"</span> --network=host -v <span class="variable">$V_data</span>:/data -v <span class="variable">$V_data</span>/data:/www/data --restart=always --name=xiaoya xiaoyaliu/alist:hostmode</span><br><span class="line">	<span class="keyword">else</span>	</span><br><span class="line">		docker create  --network=host -v <span class="variable">$V_data</span>:/data -v <span class="variable">$V_data</span>/data:/www/data --restart=always --name=xiaoya xiaoyaliu/alist:hostmode</span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line">	docker start xiaoya</span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -s <span class="variable">$V_data</span>/docker_address.txt ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"http://<span class="variable">$localip</span>:5678"</span> &gt; <span class="variable">$V_data</span>/docker_address.txt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">docker stop xiaoya 2&gt;/dev/null</span><br><span class="line">docker <span class="built_in">rm</span> xiaoya 2&gt;/dev/null</span><br><span class="line">docker rmi xiaoyaliu/alist:latest </span><br><span class="line">docker pull xiaoyaliu/alist:latest</span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="variable">$V_data</span>/proxy.txt ]] &amp;&amp; [[ -s <span class="variable">$V_data</span>/proxy.txt ]]; <span class="keyword">then</span></span><br><span class="line">	proxy_url=$(<span class="built_in">head</span> -n1 <span class="variable">$V_data</span>/proxy.txt)</span><br><span class="line">       	docker create  -p 5678:80 -p 2345:2345 -p 2346:2346 --<span class="built_in">env</span> HTTP_PROXY=<span class="string">"<span class="variable">$proxy_url</span>"</span> --<span class="built_in">env</span> HTTPS_PROXY=<span class="string">"<span class="variable">$proxy_url</span>"</span> --<span class="built_in">env</span> no_proxy=<span class="string">"*.aliyundrive.com,*.alipan.com"</span> -v <span class="variable">$V_data</span>:/data -v <span class="variable">$V_data</span>/data:/www/data --restart=always --name=xiaoya xiaoyaliu/alist:latest</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	docker create  -p 5678:80 -p 2345:2345 -p 2346:2346 -v <span class="variable">$V_data</span>:/data -v <span class="variable">$V_data</span>/data:/www/data --restart=always --name=xiaoya xiaoyaliu/alist:latest</span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line"></span><br><span class="line"><span class="comment">#bash -c "$(curl --ipv4 -sSL http://docker.xiaoya.pro/update_data.sh)" -s --no-upgrade</span></span><br><span class="line">docker start xiaoya</span><br></pre></td></tr></tbody></table></figure>
</details>

<h3 id="3-验证小雅是否挂载成功"><a href="#3-验证小雅是否挂载成功" class="headerlink" title="3. 验证小雅是否挂载成功"></a>3. 验证小雅是否挂载成功</h3><ul>
<li>浏览器访问<code>ip:5678</code><div class="note info flat"><p>第一次启动需要加载，3-5分钟后才能成功<br>也可以通过日志打印信息看有无错误提示<br>或在终端执行：docker logs -f xiaoya 来查看</p>
</div></li>
</ul>
<hr>
<hr>
<h2 id="🎰-安装小雅看护-自动清理缓存"><a href="#🎰-安装小雅看护-自动清理缓存" class="headerlink" title="🎰 安装小雅看护(自动清理缓存)"></a>🎰 安装小雅看护(自动清理缓存)</h2><blockquote>
<p>为了防止缓存过多而导致云盘的空间不足才使用xiaoyakeeper容器来定时清理缓存、只要产生了播放缓存一分钟后立即清理<br>使用小雅时，会先将视频缓存在自己的阿里云盘资源盘的<code>xiaoya</code>文件夹中(这个xiaoya文件夹是在云盘中新建的)。<br>小雅看护xiaoyakeeper自动删除缓存，只要产生了播放缓存一分钟后立即清理。</p>
</blockquote>
<h3 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1. 安装命令"></a>1. 安装命令</h3><blockquote>
<p>里面的参数可以不修改默认即可<br>“如果网络问题，下载脚本失败，请多尝试几次、搭建魔法安装或下载TG群文件中的aliyun_clear.sh离线安装：<br>执行：bash ./aliyun_clear.sh 5，其中参数“5”是指模式5，可以改为其它模式”</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">bash -c <span class="string">"<span class="subst">$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)</span>"</span> -s 5 -tg</span><br><span class="line"></span><br><span class="line"><span class="comment">#该脚本有5种模式 `-s 5` 是第5种模式：</span></span><br><span class="line"><span class="comment">#建议使用第3种或第5种模式</span></span><br><span class="line"><span class="comment">#模式 5 是删除一分钟前的缓存</span></span><br><span class="line"><span class="comment">#模式3或4 是永不删除缓存</span></span><br><span class="line"><span class="comment">#模式2已不可用</span></span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label default">详细脚本如下</mark> 
<details>
<summary>点击查看代码</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ver=<span class="string">"202404270924"</span></span><br><span class="line"></span><br><span class="line">upgrade_url=<span class="string">"http://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh"</span></span><br><span class="line">upgrade_url_backup=<span class="string">"https://xiaoyahelper.ddsrem.com/aliyun_clear.sh"</span></span><br><span class="line">tg_push_api_url=<span class="string">"https://xiaoyapush.ddsrem.com"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hash_function</span></span>() {</span><br><span class="line">    str=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="built_in">hash</span>=0</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DJB2 hash algorithm</span></span><br><span class="line">    i=0</span><br><span class="line">    <span class="keyword">while</span> [ <span class="string">"<span class="variable">$i</span>"</span> -lt <span class="string">"<span class="variable">${#str}</span>"</span> ]; <span class="keyword">do</span></span><br><span class="line">        char=$(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">"<span class="variable">$str</span>"</span> | <span class="built_in">cut</span> -c <span class="string">"<span class="subst">$((i + 1)</span>)"</span>)</span><br><span class="line">        char_value=$(<span class="built_in">printf</span> <span class="string">"%d"</span> <span class="string">"'<span class="variable">$char</span>"</span>)</span><br><span class="line">        <span class="built_in">hash</span>=$(((hash * <span class="number">33</span>) ^ char_value))</span><br><span class="line">        <span class="built_in">hash</span>=$((hash &amp; <span class="number">0</span>xFFFFFF))</span><br><span class="line">        i=$((i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">hash</span>=$((hash &amp; <span class="number">0</span>xFFFFFF)) <span class="comment"># 4-byte integer (32-bit)</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$hash</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to convert a 4-byte integer to IP address</span></span><br><span class="line"><span class="function"><span class="title">int_to_ip</span></span>() {</span><br><span class="line">    ip=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3; <span class="keyword">do</span></span><br><span class="line">        octet=$(((<span class="variable">$1</span> &gt;&gt; (<span class="number">8</span> * (<span class="number">3</span> - i))) &amp; 0xFF))</span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$ip</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            ip=<span class="string">"<span class="variable">$octet</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ip=<span class="string">"<span class="variable">$ip</span>.<span class="variable">$octet</span>"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$ip</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to hash a string and convert it to IP address</span></span><br><span class="line"><span class="function"><span class="title">hash_to_ip</span></span>() {</span><br><span class="line">    input_string=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    hashed_value=$(hash_function <span class="string">"<span class="variable">$input_string</span>"</span>)</span><br><span class="line">    hashed_ip=$(int_to_ip <span class="string">"<span class="variable">$hashed_value</span>"</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$hashed_ip</span>"</span> | sed <span class="string">'s/^0\./1\./g'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fast_triger_update</span></span>() {</span><br><span class="line">    <span class="keyword">if</span> [ ! -f /docker-entrypoint.sh ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! $(($(date +%-M) % <span class="number">5</span>)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$sche</span>"</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        local_ip_ver=<span class="string">"<span class="subst">$(hash_to_ip <span class="string">"<span class="variable">$ver</span>"</span>)</span>"</span></span><br><span class="line">        remote_ip_ver=<span class="string">"<span class="subst">$(ping -c 1 -W 1 xiaoyakeeper.u.1996999.xyz 2&gt;&amp;1 | grep -Eo <span class="string">"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"</span> | head -n1 | grep <span class="string">"^1\."</span>)</span>"</span></span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$remote_ip_ver</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> 0</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$local_ip_ver</span>"</span>x = <span class="string">"<span class="variable">$remote_ip_ver</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> 0</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    newsh=$(curl --connect-timeout 5 -m 5 -k -s <span class="string">"<span class="variable">$upgrade_url</span>"</span> 2&gt;/dev/null)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$newsh</span>"</span> | grep <span class="string">"^#!/bin/bash"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        newsh=$(curl --connect-timeout 5 -m 5 -k -s <span class="string">"<span class="variable">$upgrade_url_backup</span>"</span> 2&gt;/dev/null)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    latest_ver=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$newsh</span>"</span> | grep <span class="string">"^ver="</span> | <span class="built_in">tr</span> -d <span class="string">'"ver='</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$latest_ver</span>"</span>x = x ] || [ <span class="string">"<span class="variable">$ver</span>"</span>x = <span class="string">"<span class="variable">$latest_ver</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    myecho <span class="string">"检测到新版本<span class="variable">$latest_ver</span>，即将自动重启容器升级，重启前会补做一次签到和清理"</span></span><br><span class="line"></span><br><span class="line">    clear_aliyun_all_docker_pre_update</span><br><span class="line">    <span class="built_in">sleep</span> 60</span><br><span class="line">    <span class="comment">#docker restart xiaoyakeeper</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">g_p=<span class="variable">$@</span></span><br><span class="line"><span class="function"><span class="title">para</span></span>() {</span><br><span class="line">    i=$(<span class="built_in">echo</span> ~<span class="variable">$1</span> | <span class="built_in">tr</span> -d <span class="string">'~'</span> | <span class="built_in">tr</span> <span class="string">'-'</span> <span class="string">'~'</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="subst">$(echo ~$g_p | tr -d '~' | tr '-' '~' | grep -Eo <span class="string">"<span class="variable">$i</span>"</span>)</span>"</span>x = x ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">retry_command</span></span>() {</span><br><span class="line">    <span class="comment"># 重试次数和最大重试次数</span></span><br><span class="line">    retries=0</span><br><span class="line">    max_retries=10</span><br><span class="line">    <span class="built_in">local</span> cmd=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="built_in">local</span> success=<span class="literal">false</span></span><br><span class="line">    <span class="built_in">local</span> output=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ! <span class="variable">$success</span> &amp;&amp; [ <span class="variable">$retries</span> -lt <span class="variable">$max_retries</span> ]; <span class="keyword">do</span></span><br><span class="line">        output=$(<span class="built_in">eval</span> <span class="string">"<span class="variable">$cmd</span>"</span> 2&gt;&amp;1)</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">            success=<span class="literal">true</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            retries=$((<span class="variable">$retries</span> + <span class="number">1</span>))</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"#Failed to execute command \"<span class="subst">$(echo <span class="string">"<span class="variable">$cmd</span>"</span> | awk '{print $1}')</span>\", retrying in 1 seconds (retry <span class="variable">$retries</span> of <span class="variable">$max_retries</span>)..."</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$success</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$output</span>"</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"#Failed to execute command after <span class="variable">$max_retries</span> retries: <span class="variable">$cmd</span>"</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"#Command output: <span class="variable">$output</span>"</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查脚本更新</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> curl &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    newsh=$(retry_command <span class="string">"curl --connect-timeout 5 -m 5 -k -s \"<span class="variable">$upgrade_url</span>\" 2&gt;/dev/null"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$newsh</span>"</span> | grep <span class="string">"^#!/bin/bash"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        newsh=$(retry_command <span class="string">"curl --connect-timeout 5 -m 5 -k -s \"<span class="variable">$upgrade_url_backup</span>\" 2&gt;/dev/null"</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">latest_ver=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$newsh</span>"</span> | grep <span class="string">"^ver="</span> | <span class="built_in">tr</span> -d <span class="string">'"ver='</span>)</span><br><span class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$latest_ver</span>"</span>x = x ] &amp;&amp; [ ! <span class="string">"<span class="variable">$ver</span>"</span>x = <span class="string">"<span class="variable">$latest_ver</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">    filename=<span class="variable">${0}</span></span><br><span class="line">    <span class="built_in">dir</span>=$(<span class="built_in">dirname</span> <span class="string">"<span class="variable">$filename</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$dir</span>"</span>x = x ]; <span class="keyword">then</span></span><br><span class="line">        filename=<span class="string">"./<span class="variable">$filename</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$dir</span>"</span> | awk -F/ '{print $1}')</span>"</span>x = x ]; <span class="keyword">then</span></span><br><span class="line">        filename=<span class="string">"./<span class="variable">$filename</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    shell_cmd=<span class="string">"sh"</span></span><br><span class="line">    <span class="built_in">which</span> <span class="string">"bash"</span> &gt;/dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        shell_cmd=<span class="string">"bash"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="subst">$(cat <span class="string">"<span class="variable">$filename</span>"</span> | head -n 1 | grep <span class="string">"^#!/bin/bash"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$newsh</span>"</span> &gt;<span class="string">"<span class="variable">$filename</span>"</span></span><br><span class="line">        <span class="built_in">chmod</span> +x <span class="string">"<span class="variable">$filename</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"脚本已自动更新到最新版本<span class="variable">$latest_ver</span>"</span></span><br><span class="line">        <span class="variable">$shell_cmd</span> <span class="variable">$filename</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_Header</span></span>() {</span><br><span class="line">    response=$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">        -d <span class="string">'{"grant_type":"refresh_token", "refresh_token":"'</span><span class="variable">$refresh_token</span><span class="string">'"}'</span> \</span><br><span class="line">        https://api.aliyundrive.com/v2/account/token)</span><br><span class="line"></span><br><span class="line">    access_token=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$response</span>"</span> | sed -n <span class="string">'s/.*"access_token":"\([^"]*\).*/\1/p'</span>)</span><br><span class="line"></span><br><span class="line">    HEADER=<span class="string">"Authorization: Bearer <span class="variable">$access_token</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$HEADER</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"获取access token失败"</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    response=<span class="string">"<span class="subst">$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"<span class="variable">$HEADER</span>"</span> -H <span class="string">"Content-Type: application/json"</span> -X POST -d '{}' <span class="string">"https://user.aliyundrive.com/v2/user/get"</span>)</span>"</span></span><br><span class="line"></span><br><span class="line">    lagacy_drive_id=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$response</span>"</span> | sed -n <span class="string">'s/.*"default_drive_id":"\([^"]*\).*/\1/p'</span>)</span><br><span class="line"></span><br><span class="line">    drive_id=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$response</span>"</span> | sed -n <span class="string">'s/.*"resource_drive_id":"\([^"]*\).*/\1/p'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$drive_id</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        drive_id=<span class="variable">$lagacy_drive_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$folder_type</span>"</span>x = <span class="string">"b"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        drive_id=<span class="variable">$lagacy_drive_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$drive_id</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"获取drive_id失败"</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"HEADER=\"<span class="variable">$HEADER</span>\""</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"drive_id=\"<span class="variable">$drive_id</span>\""</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_rawList</span></span>() {</span><br><span class="line">    waittime=10</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        waittime=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    _res=$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"<span class="variable">$HEADER</span>"</span> -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'{"drive_id": "'</span><span class="variable">$drive_id</span><span class="string">'","parent_file_id": "'</span><span class="variable">$file_id</span><span class="string">'"}'</span> <span class="string">"https://api.aliyundrive.com/adrive/v2/file/list"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ ! $? -eq 0 ] || [ -z <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$_res</span>"</span> | grep <span class="string">"items"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"获取文件列表失败：folder_id=<span class="variable">$file_id</span>,drive_id=<span class="variable">$drive_id</span>"</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$_res</span>"</span></span><br><span class="line">    <span class="comment">#简单规避小雅转存后还没来得及获取直链就被删除的问题，降低发生概率</span></span><br><span class="line">    <span class="built_in">sleep</span> <span class="string">"<span class="variable">$waittime</span>"</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_List</span></span>() {</span><br><span class="line">    _res=<span class="variable">$raw_list</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#echo "$_res" | tr '{' '\n' | grep -v "folder" | grep -o "\"file_id\":\"[^\"]*\"" | cut -d':' -f2- | tr -d '"'</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$_res</span>"</span> | <span class="built_in">tr</span> <span class="string">'{'</span> <span class="string">'\n'</span> | grep -o <span class="string">"\"file_id\":\"[^\"]*\""</span> | <span class="built_in">cut</span> -d<span class="string">':'</span> -f2- | <span class="built_in">tr</span> -d <span class="string">'"'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_Path</span></span>() {</span><br><span class="line">    _path=<span class="string">"<span class="subst">$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"<span class="variable">$HEADER</span>"</span> -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">"{\"drive_id\": \"<span class="variable">$drive_id</span>\", \"file_id\": \"<span class="variable">$file_id</span>\"}"</span> <span class="string">"https://api.aliyundrive.com/adrive/v1/file/get_path"</span> | grep -o <span class="string">"\"name\":\"[^\"]*\""</span> | cut -d':' -f2- | tr -d '<span class="string">"' | tr '\n' '/' | awk -F'/' '{for(i=NF-1;i&gt;0;i--){printf("</span>/%s<span class="string">",<span class="variable">$i</span>)}; printf("</span>%s\n<span class="string">",<span class="variable">$NF</span>)}')"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    if [ -z <span class="string">"<span class="variable">$_path</span>"</span> ]; then</span></span></span><br><span class="line"><span class="subst"><span class="string">        return 1</span></span></span><br><span class="line"><span class="subst"><span class="string">    fi</span></span></span><br><span class="line"><span class="subst"><span class="string">    echo <span class="string">"<span class="variable">$_path</span>"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    return 0</span></span></span><br><span class="line"><span class="subst"><span class="string">}</span></span></span><br><span class="line"><span class="subst"><span class="string"></span></span></span><br><span class="line"><span class="subst"><span class="string">delete_File()</span> {</span></span><br><span class="line"><span class="string">    _file_id=<span class="variable">$1</span></span></span><br><span class="line"><span class="string">    _name="</span>$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$raw_list</span>"</span> | grep -o <span class="string">"\"name\":\"[^\"]*\""</span> | <span class="built_in">cut</span> -d<span class="string">':'</span> -f2- | <span class="built_in">tr</span> -d <span class="string">'"'</span> | grep -n . | grep <span class="string">"^<span class="subst">$(echo <span class="string">"<span class="variable">$raw_list</span>"</span> | grep -o <span class="string">"\"file_id\":\"[^\"]*\""</span> | cut -d':' -f2- | tr -d '<span class="string">"' | grep -n . | grep "</span>$_file_id<span class="string">" | awk -F: '{print <span class="variable">$1</span>}'):"</span> | awk -F: '{print $2}')</span>"</span></span><br><span class="line"></span><br><span class="line">    _res=$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"<span class="variable">$HEADER</span>"</span> -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'{</span></span><br><span class="line"><span class="string">  "requests": [</span></span><br><span class="line"><span class="string">    {</span></span><br><span class="line"><span class="string">      "body": {</span></span><br><span class="line"><span class="string">        "drive_id": "'</span><span class="variable">$drive_id</span><span class="string">'",</span></span><br><span class="line"><span class="string">        "file_id": "'</span><span class="variable">$_file_id</span><span class="string">'"</span></span><br><span class="line"><span class="string">      },</span></span><br><span class="line"><span class="string">      "headers": {</span></span><br><span class="line"><span class="string">        "Content-Type": "application/json"</span></span><br><span class="line"><span class="string">      },</span></span><br><span class="line"><span class="string">      "id": "'</span><span class="variable">$_file_id</span><span class="string">'",</span></span><br><span class="line"><span class="string">      "method": "POST",</span></span><br><span class="line"><span class="string">      "url": "/file/delete"</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "resource": "file"</span></span><br><span class="line"><span class="string">}'</span> <span class="string">"https://api.aliyundrive.com/v3/batch"</span> | grep <span class="string">"\"status\":204"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$_res</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    drive_root=<span class="string">"资源盘"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$folder_type</span>"</span>x = <span class="string">"b"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        drive_root=<span class="string">"备份盘"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    myecho <span class="string">"彻底删除文件：/$drive_root<span class="variable">$path</span>/<span class="variable">$_name</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_docker_info</span></span>() {</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span>x != x ]; <span class="keyword">then</span></span><br><span class="line">        get_docker_info | awk <span class="string">'"'</span><span class="variable">$1</span><span class="string">'"==$1'</span></span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    images=$(docker images --no-trunc)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> $(docker ps | <span class="built_in">tail</span> -n +2 | grep -v <span class="string">"xiaoyakeeper"</span> | awk <span class="string">'{print $NF}'</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">id</span>=$(docker inspect --format=<span class="string">'{{.Image}}'</span> <span class="variable">$line</span> | awk -F: <span class="string">'{print $2}'</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span> <span class="subst">$(echo <span class="string">"<span class="variable">$images</span>"</span> | grep $id | head -n 1)</span>"</span> | <span class="built_in">tr</span> <span class="string">':'</span> <span class="string">' '</span> | awk <span class="string">'{printf("%s %s %s\n",$1,$2,$5)}'</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_Xiaoya</span></span>() {</span><br><span class="line">    get_docker_info | grep <span class="string">"xiaoyaliu/alist\|haroldli/xiaoya-tvbox\|ailg/alist"</span> | awk <span class="string">'{print $1}'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签到是抄小雅的</span></span><br><span class="line"><span class="function"><span class="title">get_json_value</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> json=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> key=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$3</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">local</span> num=1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">local</span> num=<span class="variable">$3</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> value=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">${json}</span>"</span> | awk -F<span class="string">"[,:}]"</span> <span class="string">'{for(i=1;i&lt;=NF;i++){if($i~/'</span><span class="variable">${key}</span><span class="string">'\042/){print $(i+1)}}}'</span> | <span class="built_in">tr</span> -d <span class="string">'"'</span> | sed -n <span class="variable">${num}</span>p)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">${value}</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_Reward</span></span>() {</span><br><span class="line">    _res=$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"<span class="variable">$HEADER</span>"</span> -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'{"signInDay": '</span><span class="variable">$day</span><span class="string">'}'</span> <span class="string">"https://member.aliyundrive.com/v1/activity/sign_in_reward?_rx-s=mobile"</span> | grep <span class="string">"success"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$_res</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        reurn 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    _name=$(get_json_value <span class="string">"<span class="variable">$_res</span>"</span> <span class="string">"name"</span>)</span><br><span class="line">    _dsc=$(get_json_value <span class="string">"<span class="variable">$_res</span>"</span> <span class="string">"description"</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$_name</span>-<span class="variable">$_dsc</span>"</span> | <span class="built_in">tr</span> -d <span class="string">' '</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">checkin</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> _refresh_token=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> _token=$(curl --connect-timeout 5 -m 5 -s -X POST -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'{"grant_type": "refresh_token", "refresh_token":                 "'</span><span class="string">"<span class="variable">$_refresh_token</span>"</span><span class="string">'"}'</span> https://auth.aliyundrive.com/v2/account/token)</span><br><span class="line">    <span class="built_in">local</span> _access_token=$(get_json_value <span class="variable">$_token</span> <span class="string">"access_token"</span>)</span><br><span class="line"></span><br><span class="line">    nick_name=$(get_json_value <span class="variable">$_token</span> <span class="string">"nick_name"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$nick_name</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        nick_name=<span class="string">"阿里云盘"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    _output=<span class="string">"\n[<span class="subst">$(date '+%Y/%m/%d %H:%M:%S')</span>][<span class="variable">$nick_name</span>]的签到信息"</span></span><br><span class="line"></span><br><span class="line">    HEADER=<span class="string">"Authorization:Bearer <span class="variable">$_access_token</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> _sign=$(curl --connect-timeout 5 -m 5 -s -X POST -H <span class="string">"Content-Type: application/json"</span> -H <span class="string">"<span class="variable">$HEADER</span>"</span> -d <span class="string">'{"grant_type":           "refresh_token", "refresh_token": "'</span><span class="string">"<span class="variable">$_refresh_token</span>"</span><span class="string">'"}'</span> https://member.aliyundrive.com/v1/activity/sign_in_list)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> _fmt_sign=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$_sign</span>"</span> | <span class="built_in">tr</span> -d <span class="string">'\n'</span> | sed <span class="string">'s/{"day"/\n{"day"/g'</span> | <span class="built_in">tr</span> -d <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> _days=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$_fmt_sign</span>"</span> | grep <span class="string">'"status":"normal"'</span> | grep <span class="string">'"isReward":false'</span> | grep -Eo <span class="string">'"day":[0-9]{1,2}'</span> | awk -F: <span class="string">'{print $2}'</span> | sed <span class="string">'/^$/d'</span>)</span><br><span class="line"></span><br><span class="line">    _today_cards=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> <span class="variable">$_days</span>; <span class="keyword">do</span></span><br><span class="line">        _today_cards=<span class="string">"<span class="variable">$_today_cards</span>\n<span class="subst">$(retry_command <span class="string">"get_Reward"</span> | grep <span class="string">"-"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    raw_cards=$(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$_today_cards</span>"</span> | <span class="built_in">tr</span> -d <span class="string">' '</span>)</span><br><span class="line">    _card=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> $(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$raw_cards</span>"</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> | grep -v null); <span class="keyword">do</span></span><br><span class="line">        _card=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$_card</span>\n--<span class="variable">$card</span>：<span class="subst">$(echo -e <span class="string">"<span class="variable">$raw_cards</span>"</span> | grep <span class="string">"<span class="variable">$card</span>"</span> | wc -l)</span>张"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="subst">$(echo -e <span class="string">"<span class="variable">$_today_cards</span>"</span> | tr -d ' ' | sed '/^$/d')</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        _output=<span class="string">"<span class="variable">$_output</span>\n<span class="subst">$(echo -e <span class="string">"今日获得奖励：\n<span class="variable">$_card</span>"</span> | sed '/^$/d')</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    _cards=<span class="variable">$_today_cards</span></span><br><span class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$_fmt_sign</span>"</span> | grep -v <span class="string">'"status":"miss"'</span> | grep -Eo <span class="string">'"day":[0-9]{1,2}'</span>); <span class="keyword">do</span></span><br><span class="line">        day_sign=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$_fmt_sign</span>"</span> | grep <span class="string">"<span class="variable">$day</span>"</span>)</span><br><span class="line">        _cards=<span class="string">"<span class="variable">$_cards</span>\n"</span><span class="string">"<span class="subst">$(get_json_value <span class="string">"<span class="variable">$day_sign</span>"</span> <span class="string">"name"</span>)</span>"</span>-<span class="string">"<span class="subst">$(get_json_value <span class="string">"<span class="variable">$day_sign</span>"</span> <span class="string">"description"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    raw_cards=$(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$_cards</span>"</span> | <span class="built_in">tr</span> -d <span class="string">' '</span>)</span><br><span class="line">    _card=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> $(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$raw_cards</span>"</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> | grep -v null); <span class="keyword">do</span></span><br><span class="line">        _card=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$_card</span>\n--<span class="variable">$card</span>：<span class="subst">$(echo -e <span class="string">"<span class="variable">$raw_cards</span>"</span> | grep <span class="string">"<span class="variable">$card</span>"</span> | wc -l)</span>张"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> _signInCount=$(get_json_value <span class="string">"<span class="variable">$_sign</span>"</span> <span class="string">"signInCount"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> _success=$(<span class="built_in">echo</span> <span class="variable">$_sign</span> | <span class="built_in">cut</span> -f1 -d, | <span class="built_in">cut</span> -f2 -d:)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$_success</span>"</span>x = <span class="string">"true"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        _output=<span class="string">"<span class="variable">$_output</span>\n<span class="subst">$(echo -e <span class="string">"本月累计签到<span class="variable">$_signInCount</span>天，获得奖励：\n<span class="variable">$_card</span>"</span> | sed '/^$/d')</span>"</span></span><br><span class="line">        myecho -e <span class="string">"<span class="variable">$_output</span>"</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"阿里签到失败"</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">aliyun_update_checkin_single</span></span>() {</span><br><span class="line">    tokens=<span class="string">"<span class="subst">$(retry_command <span class="string">"read_File <span class="variable">$1</span>"</span>)</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$tokens</span>"</span> | sed <span class="string">'/^$/d'</span> | <span class="keyword">while</span> <span class="built_in">read</span> token; <span class="keyword">do</span></span><br><span class="line">        retry_command <span class="string">"checkin <span class="variable">$token</span>"</span></span><br><span class="line">        response=$(curl --connect-timeout 5 -m 5 -s -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">            -d <span class="string">'{"grant_type":"refresh_token", "refresh_token":"'</span><span class="variable">$token</span><span class="string">'"}'</span> \</span><br><span class="line">            https://api.aliyundrive.com/v2/account/token)</span><br><span class="line">        new_refresh_token=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$response</span>"</span> | sed -n <span class="string">'s/.*"refresh_token":"\([^"]*\).*/\1/p'</span>)</span><br><span class="line">        <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$new_refresh_token</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            docker <span class="built_in">exec</span> <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> sed -i <span class="string">'s/'</span><span class="string">"<span class="variable">$token</span>"</span><span class="string">'/'</span><span class="string">"<span class="variable">$new_refresh_token</span>"</span><span class="string">'/g'</span> <span class="string">"/data/<span class="variable">$1</span>"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">aliyun_update_checkin</span></span>() {</span><br><span class="line">    aliyun_update_checkin_single <span class="string">"mycheckintoken.txt"</span></span><br><span class="line">    aliyun_update_checkin_single <span class="string">"mytoken.txt"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_clear_aliyun</span></span>() {</span><br><span class="line">    <span class="comment">#eval "$(retry_command "get_Header")"</span></span><br><span class="line">    raw_list=$(retry_command <span class="string">"get_rawList"</span>)</span><br><span class="line">    path=$(retry_command <span class="string">"get_Path"</span>)</span><br><span class="line">    _list=<span class="string">"<span class="subst">$(get_List)</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$_list</span>"</span> | sed <span class="string">'/^$/d'</span> | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">        retry_command <span class="string">"delete_File \"<span class="variable">$line</span>\""</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">return</span> <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$_list</span>"</span> | sed '/^$/d' | wc -l)</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear_aliyun</span></span>() {</span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"<span class="subst">$(retry_command <span class="string">"get_Header"</span>)</span>"</span></span><br><span class="line">    raw_list=$(retry_command <span class="string">"get_rawList 0"</span>)</span><br><span class="line">    _list=<span class="string">"<span class="subst">$(get_List)</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$_list</span>"</span> | sed '/^$/d')</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    myecho -e <span class="string">"\n[<span class="subst">$(date '+%Y/%m/%d %H:%M:%S')</span>]开始清理小雅<span class="variable">$XIAOYA_NAME</span>转存"</span></span><br><span class="line"></span><br><span class="line">    _res=1</span><br><span class="line">    _filenum=0</span><br><span class="line">    <span class="keyword">while</span> [ ! <span class="variable">$_res</span> -eq 0 ]; <span class="keyword">do</span></span><br><span class="line">        _clear_aliyun</span><br><span class="line">        _res=$?</span><br><span class="line">        _filenum=$((<span class="variable">$_filenum</span> + <span class="variable">$_res</span>))</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    myecho <span class="string">"本次共清理小雅<span class="variable">$XIAOYA_NAME</span>转存文件<span class="variable">$_filenum</span>个"</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_PostCmd</span></span>() {</span><br><span class="line">    pos=$(read_File mycmd.txt | grep -n <span class="string">"#xiaoyakeeper-<span class="variable">$XIAOYA_NAME</span>-begin\|#xiaoyakeeper-<span class="variable">$XIAOYA_NAME</span>-end"</span> | awk -F: <span class="string">'{print $1}'</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$pos</span>"</span> | wc -l)</span>"</span> -lt 2 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    pos=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$pos</span>"</span> | tr '\n' ':')</span>"</span></span><br><span class="line">    begin=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$pos</span>"</span> | awk -F: '{print $1}')</span>"</span></span><br><span class="line">    end=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$pos</span>"</span> | awk -F: '{print $2}')</span>"</span></span><br><span class="line">    read_File mycmd.txt | <span class="built_in">head</span> -n <span class="string">"<span class="variable">$end</span>"</span> | <span class="built_in">tail</span> -n +<span class="string">"<span class="variable">$begin</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init_para</span></span>() {</span><br><span class="line">    XIAOYA_NAME=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    refresh_token=<span class="string">"<span class="subst">$(retry_command <span class="string">"read_File mytoken.txt"</span> | head -n1)</span>"</span></span><br><span class="line"></span><br><span class="line">    post_cmd=<span class="string">"<span class="subst">$(get_PostCmd)</span>"</span></span><br><span class="line">    <span class="comment">#if [ -z "$post_cmd" ];then</span></span><br><span class="line">    <span class="comment">#post_cmd='docker restart "'$XIAOYA_NAME'" &gt;/dev/null 2&gt;&amp;1'</span></span><br><span class="line">    <span class="comment">#fi</span></span><br><span class="line"></span><br><span class="line">    file_id=$(retry_command <span class="string">"read_File temp_transfer_folder_id.txt"</span>)</span><br><span class="line"></span><br><span class="line">    folder_type=$(read_File <span class="string">"folder_type.txt"</span>)</span><br><span class="line"></span><br><span class="line">    _file_time=<span class="string">"<span class="subst">$(retry_command <span class="string">"read_File myruntime.txt"</span> | grep -Eo <span class="string">"[0-9]{2}:[0-9]{2}"</span> | tr '\n' ' ')</span>"</span></span><br><span class="line"></span><br><span class="line">    chat_id=<span class="string">"<span class="subst">$(retry_command <span class="string">"read_File mychatid.txt"</span>)</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  chat_id:<span class="variable">$chat_id</span>  "</span> &gt;&amp;6</span><br><span class="line"></span><br><span class="line">    run_time=<span class="string">"<span class="variable">$script_run_time</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$_file_time</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        run_time=<span class="string">"<span class="variable">$_file_time</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear_aliyun_realtime</span></span>() {</span><br><span class="line">    xiaoya_name=<span class="string">"<span class="subst">$(echo <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> | tr '-' '_')</span>"</span></span><br><span class="line">    <span class="comment">#eval "_file_count_new_$xiaoya_name=$(docker logs $XIAOYA_NAME 2&gt;&amp;1 | grep https | grep security-token | wc -l)"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"_file_count_new_<span class="variable">$xiaoya_name</span>=<span class="subst">$(docker logs $XIAOYA_NAME 2&gt;&amp;1 | wc -l)</span>"</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"_file_count_new=\"\$_file_count_new_<span class="variable">$xiaoya_name</span>\""</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"_file_count_old=\"\$_file_count_old_<span class="variable">$xiaoya_name</span>\""</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$_file_count_new</span>"</span>x != <span class="string">"<span class="variable">$_file_count_old</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        clear_aliyun</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"_file_count_old_<span class="variable">$xiaoya_name</span>=\"\$_file_count_new_<span class="variable">$xiaoya_name</span>\""</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear_aliyun_single_docker</span></span>() {</span><br><span class="line">    init_para <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    copy_tvbox_files</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$run_mode</span>"</span> <span class="keyword">in</span></span><br><span class="line">    0)</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$run_time</span>"</span> | <span class="built_in">tr</span> <span class="string">','</span> <span class="string">' '</span>); <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$current_time</span>"</span> = <span class="string">"<span class="variable">$time</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                clear_aliyun</span><br><span class="line">                aliyun_update_checkin</span><br><span class="line">                <span class="built_in">eval</span> <span class="string">"<span class="variable">$post_cmd</span>"</span></span><br><span class="line">                sche=1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        ;;</span><br><span class="line">    55)</span><br><span class="line">        clear_aliyun_realtime</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="string">"<span class="variable">$run_time</span>"</span> | <span class="built_in">tr</span> <span class="string">','</span> <span class="string">' '</span>); <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$current_time</span>"</span> = <span class="string">"<span class="variable">$time</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                clear_aliyun</span><br><span class="line">                aliyun_update_checkin</span><br><span class="line">                <span class="built_in">eval</span> <span class="string">"<span class="variable">$post_cmd</span>"</span></span><br><span class="line">                sche=1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        ;;</span><br><span class="line">    1)</span><br><span class="line">        clear_aliyun</span><br><span class="line">        aliyun_update_checkin</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear_aliyun_all_docker_pre_update</span></span>() {</span><br><span class="line">    org_run_mode=<span class="variable">$run_mode</span></span><br><span class="line">    run_mode=1</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> $(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed <span class="string">'/^$/d'</span>); <span class="keyword">do</span></span><br><span class="line">        clear_aliyun_single_docker <span class="string">"<span class="variable">$line</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    run_mode=<span class="variable">$org_run_mode</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear_aliyun_all_docker</span></span>() {</span><br><span class="line">    dockers=<span class="string">"<span class="subst">$(get_Xiaoya)</span>"</span></span><br><span class="line">    current_time=<span class="string">"<span class="subst">$(date +%H:%M)</span>"</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> $(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed <span class="string">'/^$/d'</span>); <span class="keyword">do</span></span><br><span class="line">        clear_aliyun_single_docker <span class="string">"<span class="variable">$line</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy_tvbox_files</span></span>() {</span><br><span class="line">    docker <span class="built_in">exec</span> <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> bash -c <span class="string">'copy_tvbox_files() {</span></span><br><span class="line"><span class="string">    source_dir="/data"</span></span><br><span class="line"><span class="string">    target_dir1="/www/tvbox"</span></span><br><span class="line"><span class="string">    target_dir2="/www/tvbox/json"</span></span><br><span class="line"><span class="string">    target_dir3="/www/tvbox/libs"</span></span><br><span class="line"><span class="string">    target_dir4="/www/tvbox/cat"</span></span><br><span class="line"><span class="string">    target_dir5="/www/tvbox/cat/libs"</span></span><br><span class="line"><span class="string">    target_dir6="/www/tvbox/cat/lib"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir1"</span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir2"</span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir3"</span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir4"</span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir5"</span></span><br><span class="line"><span class="string">    mkdir -p "$target_dir6"</span></span><br><span class="line"><span class="string">    ali_tiken="$(cat /data/mytoken.txt)"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    copy_files_by_extension() {</span></span><br><span class="line"><span class="string">        local ext=$1</span></span><br><span class="line"><span class="string">        local target_dir=$2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        shopt -s nullglob</span></span><br><span class="line"><span class="string">        local files=("$source_dir"/*."$ext")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for file in "${files[@]}"; do</span></span><br><span class="line"><span class="string">            file_name=$(basename "$file")</span></span><br><span class="line"><span class="string">            target_file="$target_dir/$file_name"</span></span><br><span class="line"><span class="string">            src_content="$(cat "$file" | sed "s/ALI_SHORT_TOKEN/$ali_tiken/g")"</span></span><br><span class="line"><span class="string">            if [ -f "$target_file" ]; then</span></span><br><span class="line"><span class="string">                dst_content="$(cat "$target_file")"</span></span><br><span class="line"><span class="string">                if [ "$src_content"x != "$dst_content"x ]; then</span></span><br><span class="line"><span class="string">                    echo "$src_content" &gt; "$target_file"</span></span><br><span class="line"><span class="string">                else</span></span><br><span class="line"><span class="string">                    :</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo "$src_content" &gt; "$target_file"</span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">        done</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    recursive_copy() {</span></span><br><span class="line"><span class="string">    local source="$1"</span></span><br><span class="line"><span class="string">    local destination="$2"</span></span><br><span class="line"><span class="string">    mkdir -p "$destination"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for item in "$source"/*; do</span></span><br><span class="line"><span class="string">        local filename=$(basename "$item")</span></span><br><span class="line"><span class="string">        local dest_path="$destination/$filename"</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if [ -d "$item" ]; then</span></span><br><span class="line"><span class="string">            if [ ! -d "$dest_path" ]; then</span></span><br><span class="line"><span class="string">                mkdir "$dest_path"</span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">            recursive_copy "$item" "$dest_path"</span></span><br><span class="line"><span class="string">        elif [ -f "$item" ]; then</span></span><br><span class="line"><span class="string">            src_content="$(cat "$item" | sed "s/ALI_SHORT_TOKEN/$ali_tiken/g")"</span></span><br><span class="line"><span class="string">            if [ -f "$dest_path" ]; then</span></span><br><span class="line"><span class="string">                dst_content="$(cat "$dest_path")"</span></span><br><span class="line"><span class="string">                if [ "$src_content"x != "$dst_content"x ]; then</span></span><br><span class="line"><span class="string">                    echo "$src_content" &gt; "$dest_path"</span></span><br><span class="line"><span class="string">                else</span></span><br><span class="line"><span class="string">                    :</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                echo "$src_content" &gt; "$dest_path"</span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    recursive_copy "/data/tvbox" "/www/tvbox"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "json" "$target_dir1"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "json" "$target_dir2"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "js" "$target_dir3"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "json" "$target_dir4"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "js" "$target_dir4"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "js" "$target_dir5"</span></span><br><span class="line"><span class="string">    copy_files_by_extension "js" "$target_dir6"</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">copy_tvbox_files'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">update_xiaoya</span></span>() {</span><br><span class="line">    <span class="built_in">sleep</span> 60</span><br><span class="line">    para_v=<span class="string">"<span class="subst">$(docker inspect --format='{{range $v,$conf := .Mounts}}-v {{$conf.Source}}:{{$conf.Destination}} {{$conf.Type}}~{{end}}' $XIAOYA_NAME | tr '~' '\n' | grep bind | sed 's/bind//g' | grep -Eo <span class="string">"\-v .*:.*"</span> | tr '\n' ' ')</span>"</span></span><br><span class="line">    para_n=<span class="string">"<span class="subst">$(docker inspect --format='{{range $m, $conf := .NetworkSettings.Networks}}--network={{$m}}{{end}}' $XIAOYA_NAME | grep -Eo <span class="string">"\-\-network=host"</span>)</span>"</span></span><br><span class="line">    tag=<span class="string">"latest"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="subst">$(get_docker_info $XIAOYA_NAME | grep <span class="string">"ailg/alist"</span>)</span>"</span>x != x ]; <span class="keyword">then</span></span><br><span class="line">        tag=<span class="string">"test"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$para_n</span>"</span>x != x ]; <span class="keyword">then</span></span><br><span class="line">        tag=<span class="string">"hostmode"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    para_p=<span class="string">"<span class="subst">$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}~{{$p}}{{$conf}} {{end}}' $XIAOYA_NAME | tr '~' '\n' | tr '/' ' ' | tr -d '[]{}' | awk '{printf(<span class="string">"-p %s:%s\n"</span>,$3,$1)</span>}' | grep -Eo "</span>\-p [0-9]{1,10}:[0-9]{1,10}<span class="string">" | tr '\n' ' ')"</span></span><br><span class="line">    para_i=<span class="string">"<span class="subst">$(get_docker_info $XIAOYA_NAME | awk '{print $2}')</span>:<span class="variable">$tag</span>"</span></span><br><span class="line">    para_e=<span class="string">"<span class="subst">$(docker inspect --format='{{range $p, $conf := .Config.Env}}~{{$conf}}{{end}}' $XIAOYA_NAME 2&gt;/dev/null | sed '/^$/d' | tr '~' '\n' | sed '/^$/d' | awk '{printf(<span class="string">"-e \"%s\"\n"</span>,$0)</span>}' | tr '\n' ' ')"</span></span><br><span class="line">    docker pull <span class="string">"<span class="variable">$para_i</span>"</span> 2&gt;&amp;1</span><br><span class="line">    cur_image=$(get_docker_info <span class="variable">$XIAOYA_NAME</span> | awk <span class="string">'{print $3}'</span>)</span><br><span class="line">    latest_image=$(docker images --no-trunc | <span class="built_in">tail</span> -n +2 | <span class="built_in">tr</span> <span class="string">':'</span> <span class="string">' '</span> | awk <span class="string">'{printf("%s:%s %s\n",$1,$2,$4)}'</span> | grep <span class="string">"<span class="variable">$para_i</span>"</span> | awk <span class="string">'{print $2}'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$cur_image</span>"</span>x != <span class="string">"<span class="variable">$latest_image</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">        docker stop <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span></span><br><span class="line">        docker <span class="built_in">rm</span> -v <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span></span><br><span class="line">        <span class="built_in">eval</span> <span class="string">"<span class="subst">$(echo docker run -d <span class="string">"<span class="variable">$para_n</span>"</span> <span class="string">"<span class="variable">$para_v</span>"</span> <span class="string">"<span class="variable">$para_p</span>"</span> <span class="string">"<span class="variable">$para_e</span>"</span> --restart=always --name=<span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> <span class="string">"<span class="variable">$para_i</span>"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        docker restart <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    docker rmi -f $(docker images | grep <span class="string">"<span class="subst">$(echo $para_i | awk -F: '{print $1}')</span>"</span> | grep none | grep -Eo <span class="string">"[0-9a-f]{6,128}"</span>) &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">session=<span class="string">"<span class="subst">$((RANDOM % 90000000 + 10000000)</span>)"</span></span><br><span class="line"><span class="function"><span class="title">gen_post_cmd_single</span></span>() {</span><br><span class="line">    init_para <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$cmd_delay</span>"</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        cmd=<span class="string">'#tag:'</span><span class="variable">$session</span><span class="string">'，命令只能写在以下begin和end之间，否则不会被执行</span></span><br><span class="line"><span class="string">#xiaoyakeeper-'</span><span class="variable">$XIAOYA_NAME</span><span class="string">'-begin</span></span><br><span class="line"><span class="string">#update_xiaoya是一个内置命令，如果小雅镜像有更新则更新小雅容器，否则重启小雅容器。可以替换成你自己的命令，如果不懂则不建议修改。</span></span><br><span class="line"><span class="string">update_xiaoya</span></span><br><span class="line"><span class="string">#xiaoyakeeper-'</span><span class="variable">$XIAOYA_NAME</span><span class="string">'-end</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cmd=<span class="string">'#tag:'</span><span class="variable">$session</span><span class="string">'，命令只能写在以下begin和end之间，否则不会被执行</span></span><br><span class="line"><span class="string">#xiaoyakeeper-'</span><span class="variable">$XIAOYA_NAME</span><span class="string">'-begin</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">sleep '</span><span class="variable">$cmd_delay</span><span class="string">'</span></span><br><span class="line"><span class="string">#update_xiaoya是一个内置命令，如果小雅镜像有更新则更新小雅容器，否则重启小雅容器。可以替换成你自己的命令，如果不懂则不建议修改。</span></span><br><span class="line"><span class="string">update_xiaoya</span></span><br><span class="line"><span class="string">}&amp;</span></span><br><span class="line"><span class="string">#xiaoyakeeper-'</span><span class="variable">$XIAOYA_NAME</span><span class="string">'-end</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    write_File_ClearIfNoTag mycmd.txt <span class="string">"<span class="variable">$cmd</span>"</span> <span class="string">"#tag:<span class="variable">$session</span>"</span></span><br><span class="line">    <span class="comment">#write_File mycmd.txt "$cmd"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gen_post_cmd_all</span></span>() {</span><br><span class="line">    <span class="keyword">if</span> [ -f /docker-entrypoint.sh ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    dockers=<span class="string">"<span class="subst">$(get_Xiaoya)</span>"</span></span><br><span class="line">    cmd_delay=0</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> $(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed <span class="string">'/^$/d'</span>); <span class="keyword">do</span></span><br><span class="line">        gen_post_cmd_single <span class="string">"<span class="variable">$line</span>"</span></span><br><span class="line">        cmd_delay=$((cmd_delay + <span class="number">600</span>))</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_env</span></span>() {</span><br><span class="line">    <span class="keyword">if</span> [ ! -f /docker-entrypoint.sh ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#http://mirrors.ustc.edu.cn/alpine/v3.18/main</span></span><br><span class="line">    <span class="comment">#http://mirrors.ustc.edu.cn/alpine/v3.18/community</span></span><br><span class="line">    <span class="comment">#echo 'https://mirrors.nju.edu.cn/alpine/v3.18/main</span></span><br><span class="line">    <span class="comment">#https://mirrors.nju.edu.cn/alpine/v3.18/community' &gt; /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ! docker --<span class="built_in">help</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        apk add docker-cli</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ! docker --<span class="built_in">help</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"安装docker工具失败"</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ! curl --<span class="built_in">help</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        apk add curl</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ! curl --<span class="built_in">help</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"安装curl工具失败"</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(date | grep <span class="string">"CST"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        apk add tzdata</span><br><span class="line">        <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt;/etc/timezone</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_keeper</span></span>() {</span><br><span class="line">    <span class="comment">#docker image prune -af</span></span><br><span class="line">    <span class="comment">#docker volume prune -f</span></span><br><span class="line">    <span class="comment">#docker volume prune -af 2&gt;/dev/null</span></span><br><span class="line">    dockers=<span class="string">"<span class="subst">$(get_Xiaoya)</span>"</span></span><br><span class="line">    XIAOYA_NAME=<span class="string">"<span class="subst">$(echo -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed '/^$/d' | head -n1)</span>"</span></span><br><span class="line">    <span class="comment">#XIAOYA_ROOT="$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' "$XIAOYA_NAME" | tr '~' '\n' | grep bind | sed 's/bind//g' | grep ":/data" | awk -F: '{print $1}')"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#小雅文件夹有可能没权限，换一个目录作为临时目录</span></span><br><span class="line">    <span class="comment">#XIAOYA_ROOT="/var/run"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$newsh</span>"</span> ] &amp;&amp; [ -n <span class="string">"<span class="subst">$(cat <span class="string">"<span class="variable">$0</span>"</span> | head -n 1 | grep <span class="string">"^#!/bin/bash"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        newsh=<span class="string">"<span class="subst">$(cat <span class="string">"<span class="variable">$0</span>"</span>)</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$newsh</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"网络问题，下载脚本失败，请多尝试几次、搭建魔法安装或下载TG群文件中的aliyun_clear.sh离线安装：bash ./aliyun_clear.sh 5，其中参数“5”是指模式5，可以改为其它模式"</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#echo "$newsh" &gt; "$XIAOYA_ROOT/aliyun_clear.sh"</span></span><br><span class="line">    docker <span class="built_in">rm</span> -f -v xiaoyakeeper &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    network=<span class="string">"--network=host"</span></span><br><span class="line">    <span class="keyword">if</span> para -b; <span class="keyword">then</span></span><br><span class="line">        network=<span class="string">""</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    docker run --name xiaoyakeeper --restart=always <span class="variable">$network</span> --privileged -v /var/run/docker.sock:/var/run/docker.sock -e TZ=<span class="string">"Asia/Shanghai"</span> -d alpine:3.18.2 sh -c <span class="string">"if [ -f /etc/xiaoya/aliyun_clear.sh ];then sh /etc/xiaoya/aliyun_clear.sh <span class="variable">$1</span>;else sleep 60;fi"</span> &amp;&gt;/dev/null</span><br><span class="line">    docker run --name xiaoyakeeper --restart=always <span class="variable">$network</span> --privileged -v /var/run/docker.sock:/var/run/docker.sock -e TZ=<span class="string">"Asia/Shanghai"</span> -d dockerproxy.com/library/alpine:3.18.2 sh -c <span class="string">"if [ -f /etc/xiaoya/aliyun_clear.sh ];then sh /etc/xiaoya/aliyun_clear.sh <span class="variable">$1</span>;else sleep 60;fi"</span> &amp;&gt;/dev/null</span><br><span class="line">    docker <span class="built_in">exec</span> xiaoyakeeper <span class="built_in">touch</span> /docker-entrypoint.sh</span><br><span class="line">    docker <span class="built_in">exec</span> xiaoyakeeper <span class="built_in">mkdir</span> /etc/xiaoya</span><br><span class="line">    <span class="comment">#docker cp $XIAOYA_ROOT/aliyun_clear.sh xiaoyakeeper:/etc/xiaoya/aliyun_clear.sh</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$newsh</span>"</span> | docker <span class="built_in">exec</span> -i xiaoyakeeper sh -c <span class="string">'cp /dev/stdin /etc/xiaoya/aliyun_clear.sh'</span></span><br><span class="line"></span><br><span class="line">    docker <span class="built_in">exec</span> xiaoyakeeper <span class="built_in">chmod</span> +x <span class="string">"/etc/xiaoya/aliyun_clear.sh"</span></span><br><span class="line">    <span class="comment">#rm -f "$XIAOYA_ROOT/aliyun_clear.sh"</span></span><br><span class="line">    docker restart xiaoyakeeper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(docker ps | grep xiaoyakeeper)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"启动失败，请把命令报错信息以及以下信息反馈给作者修改"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"系统信息：<span class="subst">$(uname -a)</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"docker路径：<span class="subst">$(which docker)</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"docker状态：<span class="subst">$(docker ps | grep xiaoyakeeper)</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"docker运行日志："</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="subst">$(docker logs --tail 10 xiaoyakeeper)</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"小雅看护docker(xiaoyakeeper)已启动"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">read_File</span></span>() {</span><br><span class="line">    _r=0</span><br><span class="line">    _res=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> docker <span class="built_in">exec</span> <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> [ -f <span class="string">"/data/<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        _res=<span class="string">"<span class="subst">$(docker exec <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> cat <span class="string">"/data/<span class="variable">$1</span>"</span>)</span>"</span></span><br><span class="line">        _r=$?</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$_res</span>"</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$_r</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">write_File</span></span>() {</span><br><span class="line">    docker <span class="built_in">exec</span> <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> bash -c <span class="string">"echo -e \"<span class="variable">$2</span>\" &gt; \"/data/<span class="variable">$1</span>\""</span></span><br><span class="line">    <span class="built_in">return</span> $?</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">apend_File</span></span>() {</span><br><span class="line">    docker <span class="built_in">exec</span> <span class="string">"<span class="variable">$XIAOYA_NAME</span>"</span> bash -c <span class="string">"echo -e \"<span class="variable">$2</span>\" &gt;&gt; \"/data/<span class="variable">$1</span>\""</span></span><br><span class="line">    <span class="built_in">return</span> $?</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">write_File_ClearIfNoTag</span></span>() {</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(read_File <span class="string">"<span class="variable">$1</span>"</span> | grep <span class="string">"<span class="variable">$3</span>"</span>)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        write_File <span class="string">"<span class="variable">$1</span>"</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    apend_File <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! install_env; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"小雅守护初始化失败，即将重试10次"</span></span><br><span class="line">    retry_command <span class="string">"install_env"</span></span><br><span class="line">    <span class="keyword">if</span> ! install_env; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"重试10次后初始化失败，可能遇到了网络问题，1小时后将重启容器继续重试"</span></span><br><span class="line">        <span class="built_in">sleep</span> 3600</span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">run_mode=0</span><br><span class="line">next_min=$(($(date +%s) + <span class="number">60</span>))</span><br><span class="line">script_run_time=<span class="string">"<span class="subst">$(date -d <span class="string">"@<span class="variable">$next_min</span>"</span> +'%H:%M')</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    run_mode=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f /docker-entrypoint.sh ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">touch</span> /var/run/xiaoyakeeper.pid</span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="string">"<span class="subst">$(cat /var/run/xiaoyakeeper.pid)</span>"</span> &amp;&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> $$ &gt;/var/run/xiaoyakeeper.pid</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">dockers=<span class="string">"<span class="subst">$(get_Xiaoya)</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="subst">$(echo -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed '/^$/d' | head -n1)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你还没有安装小雅docker，请先安装！"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_ChatId</span></span>() {</span><br><span class="line">    code=<span class="string">"<span class="subst">$((RANDOM % 90000000 + 10000000)</span>)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"请先发送验证码<span class="variable">$code</span>给机器人@xiaoyahelper_bot，发送成功后请敲回车键继续，不发验证码直接敲回车表示用上次验证的账号推送，如果从来没有验证过则不推送。请2分钟内完成，超时自动跳过。"</span></span><br><span class="line">    <span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="built_in">read</span> -t 120 line</span><br><span class="line">    chat_id=<span class="string">"<span class="subst">$(curl --connect-timeout 5 -m 5 -H <span class="string">"User-Agent: xiaoyapush"</span> $tg_push_api_url/getUpdates -d <span class="string">"<span class="variable">$code</span>"</span> 2&gt;/dev/null | sed 's/{<span class="string">"message_id"</span>/\n{<span class="string">"message_id"</span>/g' | grep <span class="string">"<span class="variable">$code</span>"</span> | grep -Eo '<span class="string">"id"</span>:[0-9]{1,20}' | tail -n 1 | tr -d '<span class="string">"' | awk -F: '{print <span class="variable">$2</span>}')"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    if [ -z <span class="string">"<span class="variable">$chat_id</span>"</span> ]; then</span></span></span><br><span class="line"><span class="subst"><span class="string">        return 0</span></span></span><br><span class="line"><span class="subst"><span class="string">    fi</span></span></span><br><span class="line"><span class="subst"><span class="string"></span></span></span><br><span class="line"><span class="subst"><span class="string">    dockers=<span class="string">"<span class="subst">$(get_Xiaoya)</span>"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    echo -e <span class="string">"<span class="variable">$dockers</span>"</span> | sed '/^$/d' | while read line; do</span></span></span><br><span class="line"><span class="subst"><span class="string">        org_chat_id=$chat_id</span></span></span><br><span class="line"><span class="subst"><span class="string">        init_para <span class="string">"<span class="variable">$line</span>"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">        chat_id=$org_chat_id</span></span></span><br><span class="line"><span class="subst"><span class="string">        write_File <span class="string">"mychatid.txt"</span> <span class="string">"<span class="variable">$org_chat_id</span>"</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    done</span></span></span><br><span class="line"><span class="subst"><span class="string">}</span></span></span><br><span class="line"><span class="subst"><span class="string"></span></span></span><br><span class="line"><span class="subst"><span class="string">myecho()</span> {</span></span><br><span class="line"><span class="string">    echo "</span><span class="variable">$@</span><span class="string">"</span></span><br><span class="line"><span class="string">    echo "</span><span class="variable">$@</span><span class="string">" &gt;&amp;6</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push_msg() {</span></span><br><span class="line"><span class="string">    _chat_id="</span>$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span> | grep -Eo <span class="string">"chat_id:[0-9]{1,20}"</span> | awk -F: <span class="string">'{print $2}'</span> | <span class="built_in">tail</span> -n 1)<span class="string">"</span></span><br><span class="line"><span class="string">    if [ -n "</span><span class="variable">$_chat_id</span><span class="string">" ]; then</span></span><br><span class="line"><span class="string">        chat_id=<span class="variable">$_chat_id</span></span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    text="</span>$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span> | grep -v <span class="string">'chat_id:'</span>)<span class="string">"</span></span><br><span class="line"><span class="string">    if [ -n "</span><span class="variable">$chat_id</span><span class="string">" ] &amp;&amp; [ -n "</span><span class="variable">$text</span><span class="string">" ]; then</span></span><br><span class="line"><span class="string">        curl --connect-timeout 5 -m 5 -s -X POST -H "</span>User-Agent: xiaoyapush;ver=<span class="variable">$ver</span><span class="string">" -H 'Content-Type: application/json' -d '{"</span>chat_id<span class="string">": '<span class="variable">$chat_id</span>',"</span>text<span class="string">": "</span><span class="string">'"$text"'</span><span class="string">"}' "</span><span class="variable">$tg_push_api_url</span>/sendMessage<span class="string">" &amp;&gt;/dev/null</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tmp_fifofile="</span>./$$.fifo<span class="string">"</span></span><br><span class="line"><span class="string">mkfifo <span class="variable">$tmp_fifofile</span> &amp;&gt;/dev/null</span></span><br><span class="line"><span class="string">if [ ! $? -eq 0 ]; then</span></span><br><span class="line"><span class="string">    mknod <span class="variable">$tmp_fifofile</span> p</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">exec 6&lt;&gt;<span class="variable">$tmp_fifofile</span></span></span><br><span class="line"><span class="string">rm -f <span class="variable">$tmp_fifofile</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if para -tg; then</span></span><br><span class="line"><span class="string">    get_ChatId</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start_push_proc() {</span></span><br><span class="line"><span class="string">    {</span></span><br><span class="line"><span class="string">        msg="</span><span class="string">"</span></span><br><span class="line"><span class="string">        while [ -n "</span>$(ps | sed <span class="string">"s/^/ /"</span> | grep <span class="string">" $$ "</span> | grep -v grep)<span class="string">" ]; do</span></span><br><span class="line"><span class="string">            if read -t 20 -u 6 line; then</span></span><br><span class="line"><span class="string">                msg="</span><span class="variable">$msg</span>\n<span class="variable">$line</span><span class="string">"</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                if [ -n "</span>$(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$msg</span>"</span> | <span class="built_in">tail</span> -n +2)<span class="string">" ]; then</span></span><br><span class="line"><span class="string">                    push_msg "</span>$(<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$msg</span>"</span> | <span class="built_in">tail</span> -n +2)<span class="string">"</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">                msg="</span><span class="string">"</span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string">            sleep 1</span></span><br><span class="line"><span class="string">        done</span></span><br><span class="line"><span class="string">    } &amp;</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#运行主函数</span></span><br><span class="line"><span class="string">push_proc_keeper() {</span></span><br><span class="line"><span class="string">    if ! which pgrep &amp;&gt;/dev/null; then</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    count=<span class="subst">$(pgrep -P $$ -l | grep -v sleep | grep -v grep | wc -l)</span></span></span><br><span class="line"><span class="string">    if [ <span class="variable">$count</span> -gt 1 ]; then</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    start_push_proc</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ ! -f /docker-entrypoint.sh ]; then</span></span><br><span class="line"><span class="string">    if [ "</span><span class="variable">$run_mode</span><span class="string">" -eq 0 ] || [ "</span><span class="variable">$run_mode</span><span class="string">" -eq 1 ]; then</span></span><br><span class="line"><span class="string">        echo "</span>你正在使用不推荐的模式<span class="variable">$run_mode</span>，建议使用模式3或模式5<span class="string">"</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start_push_proc</span></span><br><span class="line"><span class="string">case "</span><span class="variable">$run_mode</span><span class="string">" in</span></span><br><span class="line"><span class="string">0 | 55)</span></span><br><span class="line"><span class="string">    myecho -e "</span>\n[$(<span class="built_in">date</span> <span class="string">'+%Y/%m/%d %H:%M:%S'</span>)]小雅缓存清理(ver=<span class="variable">$ver</span>)运行中<span class="string">"</span></span><br><span class="line"><span class="string">    while :; do</span></span><br><span class="line"><span class="string">        sche=0</span></span><br><span class="line"><span class="string">        push_proc_keeper</span></span><br><span class="line"><span class="string">        clear_aliyun_all_docker</span></span><br><span class="line"><span class="string">        fast_triger_update</span></span><br><span class="line"><span class="string">        sleep <span class="subst">$((60 - $(date +%s)</span> % 60))</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">1)</span></span><br><span class="line"><span class="string">    clear_aliyun_all_docker</span></span><br><span class="line"><span class="string">    if [ -n "</span><span class="variable">$chat_id</span><span class="string">" ]; then</span></span><br><span class="line"><span class="string">        echo "</span>等待完成消息推送中，马上结束运行<span class="string">"</span></span><br><span class="line"><span class="string">        sleep 30</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">2)</span></span><br><span class="line"><span class="string">    echo "</span>本模式已不再支持，建议使用模式3或模式4<span class="string">"</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">3 | 4)</span></span><br><span class="line"><span class="string">    gen_post_cmd_all</span></span><br><span class="line"><span class="string">    install_keeper 0		# 0 表示永不清除</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">5)</span></span><br><span class="line"><span class="string">    gen_post_cmd_all</span></span><br><span class="line"><span class="string">    install_keeper 55		#55 </span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">*)</span></span><br><span class="line"><span class="string">    echo "</span>不支持的模式<span class="string">"</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exec 6&gt;&amp;- &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure>
</details>
<mark class="hl-label default">也可以参考该博主的</mark> 
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/xyztank/articles/17944085">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">小雅Alist定时清理缓存</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<h3 id="2-Alist刷新令牌"><a href="#2-Alist刷新令牌" class="headerlink" title="2.Alist刷新令牌"></a>2.Alist刷新令牌</h3><blockquote>
<p>复制以下命令粘贴到SSH终端</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i xiaoya sqlite3 data/data.db &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">select value from x_setting_items where key = "token";</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note warning flat"><p>得到Alist刷新令牌，复制粘贴备用(整个复制下来)</p>
</div>

<hr>
<hr>
<h2 id="🌈-Alist添加小雅"><a href="#🌈-Alist添加小雅" class="headerlink" title="🌈 Alist添加小雅"></a>🌈 Alist添加小雅</h2><h3 id="1-登录到Alist"><a href="#1-登录到Alist" class="headerlink" title="1. 登录到Alist"></a>1. 登录到Alist</h3><blockquote>
<p>电脑Chrome浏览器输入<a href="http://IP:5244→用户名admin密码admin登录→管理→Alist管理界面">http://IP:5244→用户名admin密码admin登录→管理→Alist管理界面</a></p>
</blockquote>
<h3 id="2-挂载小雅"><a href="#2-挂载小雅" class="headerlink" title="2. 挂载小雅"></a>2. 挂载小雅</h3><blockquote>
<p>Alist管理界面→存储→添加→Alist V3→挂载路径填<code>小雅超集</code>→链接填:<a href="http://IP:5678→用户名空→密码空→令牌填:Alist挂载令牌→其他部默认→确定">http://IP:5678→用户名空→密码空→令牌填:Alist挂载令牌→其他部默认→确定</a><br><img src="https://github.com/xiaoxin-top/picx-images-hosting/raw/master/blog/n1.5fkh4u4lz8.webp" alt="n1"><br><img src="https://github.com/xiaoxin-top/picx-images-hosting/raw/master/blog/n1-1.2a4z5wa72y.webp" alt="n1-1"></p>
</blockquote>
<h3 id="3-回到存储页面"><a href="#3-回到存储页面" class="headerlink" title="3. 回到存储页面"></a>3. 回到存储页面</h3><blockquote>
<p>看到存储里有一条小雅超集，状态work，OK！<br>回到首页多出的一个挂载目录,电影资源就放在这个<code>小雅超集</code>目录下了<br><img src="https://github.com/xiaoxin-top/picx-images-hosting/raw/master/blog/n1-2.syu458vpq.webp" alt="n1-2"><br><img src="https://github.com/xiaoxin-top/picx-images-hosting/raw/master/blog/n1-3.2h871bz5xc.webp" alt="n1-3"></p>
</blockquote>
<h3 id="4-登录小雅-ip-5678"><a href="#4-登录小雅-ip-5678" class="headerlink" title="4. 登录小雅:ip:5678"></a>4. 登录小雅:ip:5678</h3><p><img src="https://github.com/xiaoxin-top/picx-images-hosting/raw/master/blog/n1-4.231ragsadw.webp" alt="n1-4"></p>
<hr>
<hr>
<h2 id="🤏-几点说明"><a href="#🤏-几点说明" class="headerlink" title="🤏 几点说明"></a>🤏 几点说明</h2><blockquote>
<p>1、软路由正常工作功率3W，最好7*24小时供电，不要停电、断网，以保持其工作稳定性，阿里token每48小时会自动更新。<br>2、如果偶尔出现停电，恢复供电软路由的阿里云盘open会自动挂载成功，小雅挂载大概率挂载不成功，需要手动到Alist管理界面，点开小雅超集，修改，然后确定。<br>如果还是不成功，按照上面的<code>Alist刷新令牌</code>重新获取Alist刷新令牌进行更换。<br>3、长时间不使用小雅，也有可能挂载不上，同样按照上面的<code>Alist刷新令牌 </code>重新获取Alist刷新令牌修改Alist小雅超集修改即可恢复正常。</p>
</blockquote>
<h2 id="🕹-玩机技巧"><a href="#🕹-玩机技巧" class="headerlink" title="🕹 玩机技巧"></a>🕹 玩机技巧</h2><blockquote>
<p>小雅超集资源众多，不要快速频繁地选择更换文件夹，以免缓存读取慢造成卡，特别是CoreELEC系统。<br>可以用电脑、平板或者手机，浏览器输入<a href="http://IP:5678，先行浏览小雅超集，找到想要看的电影及海报剧情，记住文件夹路径，然后到电视盒子里选择观看。">http://IP:5678，先行浏览小雅超集，找到想要看的电影及海报剧情，记住文件夹路径，然后到电视盒子里选择观看。</a></p>
</blockquote>
<h2 id="🎥-如何播放小雅资源"><a href="#🎥-如何播放小雅资源" class="headerlink" title="🎥 如何播放小雅资源"></a>🎥 如何播放小雅资源</h2><blockquote>
<p>使用CoreELEC播放<br>主界面-电影-添加视频-浏览-添加网络位置<br>协议选WebDAV服务器（HTTP)<br>服务器地址IP<br>远程路径/dav<br>端口5244<br>用户名admin<br>密码admin<br>确定-再确定<br>可以看到有一条dav的记录，选中，确定<br>为此媒体源命名为Alist，确定<br>设置内容暂时选取消<br>可以看到Alist的媒体源。<br>选中后确定<br>出现阿里云盘和小雅超集</p>
</blockquote>
<blockquote>
<p>使用安卓TVbox播放<br>将小雅Alist作为一个订阅源<br>TVBox主界面→设置→配置源<br><a href="http://ip:5678/tvbox/my.json">http://IP:5678/tvbox/my.json</a><br>确定后返回<br>开始加载小雅，出现丫仙女，成功！<br>愉快地玩耍吧，祝观影愉快！</p>
</blockquote>
<h2 id="🦾后续再做内网穿透就可以公网访问、敬请期待……-🌐"><a href="#🦾后续再做内网穿透就可以公网访问、敬请期待……-🌐" class="headerlink" title="🦾后续再做内网穿透就可以公网访问、敬请期待……..🌐"></a>🦾后续再做内网穿透就可以公网访问、敬请期待……..🌐</h2><h2 id="💖感谢"><a href="#💖感谢" class="headerlink" title="💖感谢"></a>💖感谢</h2><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://xiaoxin-top.github.io/looking/1b6b5cf0.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">内网穿透：内部文章</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>干货,技术</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置代理</title>
    <url>/looking/c8e05f01.html</url>
    <content><![CDATA[<h2 id="docker配置代理"><a href="#docker配置代理" class="headerlink" title="docker配置代理"></a>docker配置代理</h2><h3 id="老方法配置-proxy-conf-（亲测有效-需要魔法）"><a href="#老方法配置-proxy-conf-（亲测有效-需要魔法）" class="headerlink" title="老方法配置 proxy.conf （亲测有效-需要魔法）"></a>老方法配置 proxy.conf （亲测有效-需要魔法）</h3><ol>
<li>创建配置文件目录<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></tbody></table></figure></li>
<li>创建配置文件</li>
</ol>
<ul>
<li><strong>注意：</strong>HTTP_PROXY和HTTPS_PROXY 是你的梯子所在的主机的ip和端口<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/docker.service.d/proxy.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Environment="HTTP_PROXY=http://192.168.1.111:7890/" </span></span><br><span class="line"><span class="string">Environment="HTTPS_PROXY=http://192.168.1.111:7890/"</span></span><br><span class="line"><span class="string">Environment="NO_PROXY=localhost,127.0.0.1,hub.docker.com,registry.aliyuncs.com"</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ol start="3">
<li><p>如果是clash的需要打开 <strong>Allow LAN</strong></p>
</li>
<li><p>重启docker</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line">systemctl show --property=Environment docker    <span class="comment"># 查看配置</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h3><p>对config.json 文件进行修改</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.docker</span><br><span class="line"><span class="built_in">cat</span> &gt; ~/.docker/config.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string"> "proxies":</span></span><br><span class="line"><span class="string"> {</span></span><br><span class="line"><span class="string">   "default":</span></span><br><span class="line"><span class="string">   {</span></span><br><span class="line"><span class="string">     "httpProxy": "http://192.168.3.3:8889",</span></span><br><span class="line"><span class="string">     "httpsProxy": "http://192.168.3.3:8889",</span></span><br><span class="line"><span class="string">     "noProxy": "127.0.0.1,docker.io,hub.docker.com,hub-mirror.c.163.com,pvjhx571.mirror.aliyuncs.com"</span></span><br><span class="line"><span class="string">   }</span></span><br><span class="line"><span class="string"> }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<p>#将 “httpProxy” 和 “httpsProxy” 的值替换为你的代理服务器地址和端口。<br>#注意：”noProxy”: 指定不需要使用代理的地址列表，通常包括本地地址。</p>
<h2 id="使用国外的docker镜像源"><a href="#使用国外的docker镜像源" class="headerlink" title="使用国外的docker镜像源"></a>使用国外的docker镜像源</h2><p><strong>注意需要魔法</strong><br>#如果需要将 Docker 镜像下载代理到国外 Docker 官网或其他国外镜像源，可以使用以下方法：<br>在 daemon.json 中配置如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://your-registry-mirror-url"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ingress与ingress-controller小结</title>
    <url>/looking/3d4be8d8.html</url>
    <content><![CDATA[<h1 id="k8s之ingress"><a href="#k8s之ingress" class="headerlink" title="k8s之ingress"></a>k8s之ingress</h1><p>service的作用：体现在两个方面</p>
<ol>
<li>对于集群内部，他不断跟踪pod的变化，更新endpoint中对应pod的对象、提供了ip不断变化的pod的服务发现的机制</li>
<li>对于集群外部，他类似负载均衡器，可以在集群内外部对pod进行访问<br>ingress的作用：用于暴露集群内的service在网络节点上</li>
</ol>
<h2 id="kubernetes提供了下面的几种方式来访问集群内部的service："><a href="#kubernetes提供了下面的几种方式来访问集群内部的service：" class="headerlink" title="kubernetes提供了下面的几种方式来访问集群内部的service："></a>kubernetes提供了下面的几种方式来访问集群内部的service：</h2><ol>
<li><p>NodePort：</p>
<ul>
<li>将Service暴露在节点网络上</li>
<li>NodePort背后就是Kube-Proxy，Kube-Proxy是沟通Service网络、Pod网络和节点的桥梁</li>
<li>一个NodePort端口只能对应一个服务、所以在几十上百的服务在集群中运行时、对NodePort端口管理就是一个灾难、所以在生产环境下一般不用NodePort（可使用的端口范围：30000-32767）</li>
</ul>
</li>
<li><p>LoadBalancer：</p>
<ul>
<li>只能用在云平台中</li>
<li>通过设置LoadBalancer映射到云服务商提供的LoadBalancer地址</li>
<li>在Service提交后，kubernetes会调用CloudProvider在公有云上为创建一个负载均衡服务，并且把被代理的Pod的ip地址配置给负载均衡服务给后端</li>
</ul>
</li>
<li><p>externallIPs：</p>
<ul>
<li>Service允许为其分配外部ip，如果外部ip路由到集群中一个或多个Node上，Service会被暴露给这些externallIPs</li>
<li>通过外部ip进入到集群的流量，将会被路由到Service的EndPoint上</li>
</ul>
</li>
<li><p>Ingress：</p>
<ul>
<li>只需一个或者少量的公网ip和LB，就可以同时将多个HTTP服务暴露到外网、七层反向代理</li>
<li>可以简单理解为Service的Service，实际就是一组域名和URL路径，把用户的请求按照规则转发到一个或多个service</li>
</ul>
</li>
</ol>
<h2 id="Ingress-组件"><a href="#Ingress-组件" class="headerlink" title="Ingress 组件"></a>Ingress 组件</h2><h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><blockquote>
<p>ingress是一个API对象，通过对yaml文件来配置，ingress对象的作用是定义请求如何转发到service的规则、可以理解为配置模板<br>ingress通过http或https暴露集群内部的Service，给Service提供外部访问的URL、负载均衡、SSL/TLS能力以及基于域名的反向代理<br>ingress要依靠ingress-controller来集体事项以上的功能</p>
</blockquote>
<h3 id="ingress-controller-Ingress控制器-如ingress-nginx"><a href="#ingress-controller-Ingress控制器-如ingress-nginx" class="headerlink" title="ingress-controller (Ingress控制器-如ingress-nginx)"></a>ingress-controller (Ingress控制器-如ingress-nginx)</h3><blockquote>
<p>ingress-controller 是具体实现反向代理济负载均衡的程序、对ingress定义的yaml规则进行解析、根据ingress配置的yaml规则来进行请求的转发<br>ingress-controller 并不是k8s自带的组件、实际ingress-controller只是一个统称、用户可以选择不同的ingress-controller实现、目前由k8s维护的ingress-controller只有：</p>
<blockquote>
<ul>
<li><strong>google云的GCE</strong></li>
<li><strong>ingress-nginx</strong><br>一般来说，ingress-controller的形式都是一个pod，里面跑着daemon程序和反向代理的程序<br>daemon 负责不断监控集群的变化、根据ingress对象生成配置并应用新配置到反向代理，比如ingress-nginx就是动态生成nginx配置、动态更新upstream，并在需要的时候reload程序应用新配置</li>
</ul>
</blockquote>
</blockquote>
<p><a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx 的github地址</a><br><a href="https://kubernetes.github.io/ingress-nginx/">ingress-nginx 的官网</a></p>
<p><strong>小结</strong>:ingress-controller才是负责具体转发的组件、通过各种方式将它暴露在集群的入口、外部对集群的请求流量会先到ingress-controller，而ingress对象是用来告诉ingress-controller该如何转发这些请求、比如哪些域名、哪些URL要转发到哪些Service等等</p>
<hr>
<hr>
<h2 id="Ingress-工作原理"><a href="#Ingress-工作原理" class="headerlink" title="Ingress 工作原理"></a>Ingress 工作原理</h2><ol>
<li>ingress-controller通过和kubernetes的API-server交互、动态的去感知集群中ingress规则的变化</li>
<li>然后去读取ingress规则，按照yaml文件中自定义的规则，规则就是写明了哪个域名对应哪个Service或者哪个路由，生成一段nginx的配置</li>
<li>将生产的nginx配置写到ingress-controller的pod里面，这个ingress-controller的pod里运行一个<strong>Nginx服务</strong>，控制器会把生成的nginx配置写入Nginx服务中的 <strong>/etc/nginx.conf</strong> 文件中</li>
<li>最后自动reload一下是配置生效、以此达到域名区分配置和动态更新的作用</li>
</ol>
<h2 id="Ingress-暴露Service的方式"><a href="#Ingress-暴露Service的方式" class="headerlink" title="Ingress 暴露Service的方式"></a>Ingress 暴露Service的方式</h2><ol>
<li><p>Deployment + LoadBalancer：</p>
<blockquote>
<p>如果要把ingress部署在公有云中，那用这种方式比较适合<br>用Deployment部署ingress-controller ，创建一个type: LoadBalancer 的Service关联这组pod<br>大部分公有云，都会为LoadBalancer的Service自动创建一个负载均衡器，通常还绑定了公网的地址、只要把域名解析指向该地址，就实现了集群服务的对外暴露<br>缺点：不适用于高并发、大集群</p>
</blockquote>
</li>
<li><p>DaemonSet + HostNetwork + nodeSelector</p>
<blockquote>
<p>用DaemonSet结合nodeselector来部署ingress-controller 到特定的node上，然后使用HostNetwork直接把该pod与宿主机node的网络打通，直接使用宿主机的80/443端口就能访问服务<br>这时，ingress-controller所在的node机器就很类似传统架构的边缘节点、比如机房入口的nginx服务器<br>该方式整个请求链路是最简单的，性能相对NodePort模式更好<br>缺点：由于直接利用宿主机节点的网络和端口、导致一个node只能部署一个ingreess-controller pod<br>比较适合大并发的生产环境使用</p>
</blockquote>
</li>
<li><p>Deployment + NodePort：</p>
<blockquote>
<p>用deployment模式部署ingress-controller，并创建对应的service，但是type：NodePort<br>这样ingress就会暴露在集群节点ip的特定端口上<br>由于nodeport暴露的端口是随机端口、一般会在前面再搭建一套负载均衡器来转发请求<br>该方式适用于宿主机是相对固定的ip地址不变的情况下<br>NodePort方式暴露ingress 虽然简单方便、但是NodePort多了一层NAT，在请求量极大时对性能有一定的影响<br>缺点：对后期的维护难度加大、对流量转发压力也会变大、且对高并发支持不是很友好</p>
</blockquote>
</li>
</ol>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><blockquote>
<p>客户端–&gt;ingress-controller–&gt;ingress(根据配置的路由规则)–&gt;Service(找到对应的服务)–&gt;pod(集群内通过service去访问pod或容器内的程序)</p>
</blockquote>
<p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/">参考：https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/</a></p>
<hr>
<hr>
<h2 id="Ingress-配置部署"><a href="#Ingress-配置部署" class="headerlink" title="Ingress 配置部署"></a>Ingress 配置部署</h2><ol>
<li>创建ingress-controller的Deployment：</li>
</ol>
<ul>
<li>ingress-nginx-controller.yaml<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">automountServiceAccountToken:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">coordination.k8s.io</span></span><br><span class="line">  <span class="attr">resourceNames:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingress-nginx-leader</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">leases</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">coordination.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">leases</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">discovery.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpointslices</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">coordination.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">leases</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">discovery.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpointslices</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">validatingwebhookconfigurations</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">allow-snippet-annotations:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="attr">compute-full-forwarded-for:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="attr">forwarded-for-header:</span> <span class="string">X-Forwarded-For</span></span><br><span class="line">  <span class="attr">use-forwarded-headers:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">service.cloud.tencent.com/local-svc-weighted-balance:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">service.kubernetes.io/local-svc-only-bind-node-with-pod:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">service.kubernetes.io/tke-existed-lbid:</span> <span class="string">lb-jw7q1g74</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Local</span></span><br><span class="line">  <span class="attr">ipFamilies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IPv4</span></span><br><span class="line">  <span class="attr">ipFamilyPolicy:</span> <span class="string">SingleStack</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">appProtocol:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">appProtocol:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">appProtocol:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https-webhook</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">webhook</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--election-id=ingress-nginx-leader</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--controller-class=k8s.io/ingress-nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ingress-class=nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--validating-webhook=:8443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--validating-webhook-certificate=/usr/local/certificates/cert</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--validating-webhook-key=/usr/local/certificates/key</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LD_PRELOAD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">/usr/local/lib/libmimalloc.so</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.gpdc.cloud.cn/library-images/nginx-ingress-controller:v1.8.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">lifecycle:</span></span><br><span class="line">          <span class="attr">preStop:</span></span><br><span class="line">            <span class="attr">exec:</span></span><br><span class="line">              <span class="attr">command:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="attr">drop:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/usr/local/certificates/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.gpdc.cloud.cn/library-images/kube-webhook-certgen:v20230407</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">create</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-secret</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--webhook-name=ingress-nginx-admission</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--patch-mutating=false</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--patch-failure-policy=Fail</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.gpdc.cloud.cn/library-images/kube-webhook-certgen:v20230407</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">controller:</span> <span class="string">k8s.io/ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">1.8</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">admissionReviewVersions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">clientConfig:</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/networking/v1/ingresses</span></span><br><span class="line">  <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br><span class="line">  <span class="attr">matchPolicy:</span> <span class="string">Equivalent</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">validate.nginx.ingress.kubernetes.io</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">    <span class="attr">apiVersions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">operations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">sideEffects:</span> <span class="string">None</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">安装：kubectl apply -f ingress-nginx.yaml</span><br><span class="line">查看：kubectl get pod -n ingress-nginx</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ol start="2">
<li>创建 Ingress 资源：<br>ingress.yaml<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-rule</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops-system</span></span><br><span class="line">  <span class="attr">annotations:</span> </span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span> </span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class="string">"30"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/send-timeout:</span> <span class="string">"600"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/enable-cors:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-methods:</span> <span class="string">"*"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/cors-allow-origin:</span> <span class="string">"*"</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">"1024m"</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> {<span class="string">IP_OR_DOMAIN</span>}    <span class="comment"># 修改如果不写域名可以去掉、默认就是接受所有ip进来的流量</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">ops-tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span> </span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/images'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/static'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/models'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/fonts'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/iconfont'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-webui-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/diffhtml/css_js'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-static-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/data/key_cfg_compare/export'</span> </span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ops-static-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/api'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">iam-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8888</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/asset'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">kong-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/ops-manage/ws'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">kong-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/ops-manage'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">kong-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/ops-elink'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">kong-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'/ops-metrics'</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">kong-svc</span></span><br><span class="line">                <span class="attr">port:</span> </span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">创建：kubectl apply -f ingress.yaml</span><br><span class="line">查看：kubectl get ingress -n ops-system</span><br><span class="line">kubectl describe ingress-nginx -n ops-system</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>ingress</tag>
        <tag>ingress-controller</tag>
      </tags>
  </entry>
  <entry>
    <title>hello</title>
    <url>/looking/3610a686.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群二进制安装</title>
    <url>/looking/688fa470.html</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/littlecc/p/18226484">查看我的博客园有更详细的安装步骤:https://www.cnblogs.com/littlecc/p/18226484</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s集群二进制安装</tag>
      </tags>
  </entry>
  <entry>
    <title>N1盒子玩法-内网穿透公网访问</title>
    <url>/looking/1b6b5cf0.html</url>
    <content><![CDATA[<p class="p center logo large">内网穿透</p>

<h2 id="🤬什么是内网穿透"><a href="#🤬什么是内网穿透" class="headerlink" title="🤬什么是内网穿透"></a>🤬什么是内网穿透</h2><blockquote>
<p>在开始之前先了解什么是内网穿透吧！<br>内网穿透就是将内网(可以看作是家庭网络)通过<code>nat</code>建立一条与公网之间的隧道、将内网的流量通过这条隧道发布到公网</p>
</blockquote>
<p><a href="https://www.cnblogs.com/littlecc/p/18299012">参考一下内部文章：NAT网络与内网穿透原理</a></p>
<h2 id="🛠-内网穿透工具"><a href="#🛠-内网穿透工具" class="headerlink" title="🛠 内网穿透工具"></a>🛠 内网穿透工具</h2><h3 id="个人尝试过的工具："><a href="#个人尝试过的工具：" class="headerlink" title="个人尝试过的工具："></a>个人尝试过的工具：</h3><p><a href="https://www.cpolar.com/">cpolar</a>  <code>此工具只需要安装客户端即可且有免费的域名可用、但是免费的域名24小时就会更新、收费的不会</code><br><a href="https://github.com/fatedier/frp">frp</a> <code>此工具需要有一台公网的服务器、需要安装服务端和客户端、灵活度高、可自定义域名</code><br><a href="https://hpproxy.cn/#/client/server">HP-PRO</a> <code>此工具只需安装客户端且只需在web端配置即可、有免费的域名、但是这是一个公用的所以很多端口已经被占用了</code></p>
<ul>
<li>其它众多的工具可以参考:<a href="https://github.com/SexyBeast233/SecBooks/blob/main/%E3%80%90%E5%86%85%E7%BD%91%E7%B3%BB%E5%88%97%E3%80%91intranet/%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86.md">github:SexyBeast233/SecBooks</a></li>
</ul>
<h3 id="frp工具的使用"><a href="#frp工具的使用" class="headerlink" title="frp工具的使用"></a>frp工具的使用</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><ol>
<li>先下载服务端和客户端(<a href="https://github.com/fatedier/frp/releases/tag/v0.59.0">https://github.com/fatedier/frp/releases/tag/v0.59.0</a>)</li>
<li>解压后：<br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-1.6t70i0km2b.webp" alt="xiaoxin-1"></li>
<li>服务端只需要留下<code>frps</code>,<code>frps.toml</code>两个文件即可</li>
</ol>
<ul>
<li>且<code>frps.toml</code>配置：<ul>
<li>bindPort = 7000 #指服务端与客户端连接的端口</li>
<li>vhostHTTPPort = 8080 #可不配、这里我用了域名访问就需要配置这个</li>
</ul>
</li>
<li>启动：<ul>
<li>./frps -c frps.toml  #前台启动</li>
<li>nohup ./frps -c frps.toml &amp; #后台启动  （推荐）</li>
</ul>
</li>
</ul>
<h4 id="客户端-内网本地"><a href="#客户端-内网本地" class="headerlink" title="客户端(内网本地)"></a>客户端(内网本地)</h4><ol>
<li>先下载服务端和客户端(<a href="https://github.com/fatedier/frp/releases/tag/v0.59.0">https://github.com/fatedier/frp/releases/tag/v0.59.0</a>)</li>
<li>解压后：保留<code>frpc</code>,<code>frpc.toml</code></li>
<li>配置<code>frpc.toml</code>文件：<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">serverAddr = <span class="string">"x.x.x.x"</span>  <span class="comment">#公网ip，服务端的ip</span></span><br><span class="line">serverPort = 7000       <span class="comment">#连接服务端的端口</span></span><br><span class="line"></span><br><span class="line">[[proxies]]             <span class="comment">#代理配置</span></span><br><span class="line">name = <span class="string">"ssh"</span>            <span class="comment">#代理名，随意</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">"tcp"</span>            <span class="comment">#代理类型有：tcp、udp、http等</span></span><br><span class="line">localIP = <span class="string">"127.0.0.1"</span>   <span class="comment">#客户端本机ip</span></span><br><span class="line">localPort = 22          <span class="comment">#代理本机的哪个端口</span></span><br><span class="line">remotePort = 6000       <span class="comment">#将本机端口映射到服务器的哪个端口、当访问服务端的6000端口时相当于访问本机的22端口</span></span><br><span class="line"></span><br><span class="line">[[ proxies ]]</span><br><span class="line"><span class="comment">#如果有多个可以写多个、但是name必须不同</span></span><br><span class="line">.....</span><br></pre></td></tr></tbody></table></figure>
==注意：可以将每个配置分开写、可以一个服务写一个文件、如nginx.toml、mysql.toml等==<br>==如多个配置文件时、启动：==<blockquote>
<p>./frpc -c nginx.toml<br>./frpc -c mysql.toml<br>每个都起一个服务即可</p>
</blockquote>
</li>
</ol>
<p><code>这里再扩展一下自定义域名的配置：</code></p>
<blockquote>
<p>如果使用域名访问需要在服务端的配置文件中加：vhostHTTPPort = 8080 此8080端口是统一使用域名访问的端口<br>这里方便我就将两个服务写在一个配置文件中了（你可以分开）：</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">serverAddr = <span class="string">"47.120.22.246"</span></span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = <span class="string">"N1-web"</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">"http"</span></span><br><span class="line">localPort = 80</span><br><span class="line">customDomains = [<span class="string">"nginx.xiaoxintops.top"</span>]    <span class="comment">#使用nginx.xiaoxintops.top:8080 访问即可访问内网的80带你看的nginx</span></span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = <span class="string">"N1-web"</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">"http"</span></span><br><span class="line">localPort = 3306</span><br><span class="line">customDomains = [<span class="string">"mysql.xiaoxintops.top"</span>]  <span class="comment">#使用mysql.xiaoxintops.top:8080 访问即可访问内网的3306带你看的mysql</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-2.1aow1vcdz9.webp" alt="xiaoxin-2"></p>
<p><code>我这里由于域名没有备案、服务器又是阿里的，所以域名访问一次后就不可用了：</code><br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-3.86tjm1vo3q.webp" alt="xiaoxin-3"></p>
<p>==注意：上面所有映射的端口都需要在公网的服务器中放开这个端口的访问权限==</p>
<p><code>更多的配置如下：</code><br><a href="https://gofrp.org/zh-cn/docs/examples/ssh/">frp官网</a></p>
<h3 id="HP-PRO-使用"><a href="#HP-PRO-使用" class="headerlink" title="HP PRO 使用"></a>HP PRO 使用</h3><p><a href="https://hpproxy.cn/hp-doc/#/doc/doc1">参考官网文档</a></p>
<ul>
<li><p>先登录web官网网页注册一下拿到<code>配置的设备ID</code>:<a href="https://hpproxy.cn/#/home/login">https://hpproxy.cn/#/home/login</a></p>
<blockquote>
<p>注册登陆后：点击<br>映射服务(选择相应的服务器使用) -&gt; 到映射设备(添加设备-刷新有个<code>设备ID</code>) -&gt; 记下这个<code>设备ID</code>下面安装的时候使用</p>
</blockquote>
</li>
<li><p>这里我是使用<code>docker</code>安装的：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 docker run 运行容器 ARM</span></span><br><span class="line">docker run --restart=always -d -e deviceId=配置的设备ID registry.cn-shenzhen.aliyuncs.com/hserver/hp-pro:latest-arm64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 docker run 运行容器 - x86或amd</span></span><br><span class="line">docker run --restart=always -d -e deviceId=配置的设备ID registry.cn-shenzhen.aliyuncs.com/hserver/hp-pro:latest</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>配置穿透</p>
</li>
</ul>
<ol>
<li><p>安装完后到web登录界面的<code>映射设备</code>查看客户端是否正常在线<br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-4.5mnp9evphk.webp" alt="xiaoxin-4"></p>
</li>
<li><p>配置端口映射</p>
<blockquote>
<p>先配置映射的端口 - 就是服务端的端口(在公网访问的端口-不是本机内网服务的端口)<br>再域名配置、这里配置的时候可不需要填写<code>自定义域名</code>、直接使用他提供的二级域名(测试过自定义域名：配置了CNAME：back1.hpnu.cn 也没生效)<br>最后再配置：<code>配置映射</code> - 如下图二<br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-5.4xufpe86h5.webp" alt="xiaoxin-5"><br><code>图二：配置映射</code><br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-6.45kt9nhe2.webp" alt="xiaoxin-6"></p>
</blockquote>
</li>
</ol>
<p>==提醒：如果在域名配置这里配置错了删掉后、同一个域名可能无法立马使用、得等解析被释放后才行==</p>
<h2 id="🔗-扩展：使用ipv6"><a href="#🔗-扩展：使用ipv6" class="headerlink" title="🔗 扩展：使用ipv6"></a>🔗 扩展：使用ipv6</h2><ul>
<li>前提是光猫开启<code>ipv6</code></li>
<li>且需要访问的客户端也需要支持<code>ipv6</code>才行</li>
</ul>
<ol>
<li>获取本机的<code>ipv6</code>地址、如：<code>2408:xxx:684:fc7e:aedd:97ff:xx47:xxx</code></li>
<li>到<a href="https://dash.cloudflare.com/">cloudflare</a>做DNS解析绑定域名<br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-7.45kt9nhe3.webp" alt="xiaoxin-7"></li>
<li>接下来就需要做代理、使用nginx做代理：如<code>nginx-proxy-manage</code></li>
</ol>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=npm-nginx \</span><br><span class="line">  -p 8880:80 \</span><br><span class="line">  -p 81:81 \		</span><br><span class="line">  -p 18443:443 \</span><br><span class="line">  -v /mnt/mydisk/nginx-proxy-manage/data:/data \</span><br><span class="line">  -v /mnt/mydisk/nginx-proxy-manage/letsencrypt:/etc/letsencrypt \</span><br><span class="line">  --restart=always \</span><br><span class="line">  chishin/nginx-proxy-manager-zh:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#英文镜像 – jc21/nginx-proxy-manager</span></span><br><span class="line"><span class="comment">#中文镜像 – chishin/nginx-proxy-manager-zh</span></span><br><span class="line"><span class="comment">#80是nginx的http端口</span></span><br><span class="line"><span class="comment">#81是web界面端口</span></span><br><span class="line"><span class="comment">#443是https端口</span></span><br><span class="line"><span class="comment">#/data 是一些nginx的配置文件、如日志、上传的证书、数据库（默认使用sqlite）、等</span></span><br><span class="line"><span class="comment">#/etc/letsencrypt 是let's Encrypt证书、等一些配置文件</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>访问：ip:81<br>登录用户名：<a href="mailto:admin@example.com">admin@example.com</a><br>登录密码：changeme</p>
</blockquote>
</li>
<li><p>配置代理：<br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-8.7p3hxguaj1.webp" alt="xiaoxin-8"><br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-9.7ego4bf2dq.webp" alt="xiaoxin-9"></p>
<blockquote>
<p>证书内容可更换为：<br>提交后等待提交即可（会有点久）</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># Cloudflare API credentials used by Certbot</span><br><span class="line">dns_cloudflare_email = cloudflare@example.com		#cloudflare的登录邮箱</span><br><span class="line">dns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234 </span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-10.9dcuunkkpc.webp" alt="xiaoxin-10"><br><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-11.syudab0eq.webp" alt="xiaoxin-11"></p>
</li>
</ul>
<p><img src="https://xiaoxin-top.github.io/picx-images-hosting/img/xiaoxin-12.8ad5jroqtw.webp" alt="xiaoxin-12"></p>
<ul>
<li>这里还要结合DDNS-GO 动态ip绑定域名（因为ipv6是会变化的）</li>
</ul>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>N1盒子,istoreOS,内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo源码托管到github🤏</title>
    <url>/looking/d67f438b.html</url>
    <content><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建github仓库</li>
<li>将创建好的仓库clone到本地</li>
<li>将源码文件拷贝到clone到本地的目录</li>
<li>push源码到github</li>
</ol>
<h2 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1.创建github仓库"></a>1.创建github仓库</h2><p><img src="https://pic.imgdb.cn/item/667d9907d9c307b7e9482722.png" alt="create repo"></p>
<h2 id="2-将创建好的仓库clone到本地"><a href="#2-将创建好的仓库clone到本地" class="headerlink" title="2.将创建好的仓库clone到本地"></a>2.将创建好的仓库clone到本地</h2><ol>
<li><strong>在本地的一个目录下右键打开 <em>Open Git Bash here</em></strong><br><img src="https://pic.imgdb.cn/item/667d9b4bd9c307b7e94c3396.png" alt="Open Git Bash here"></li>
<li><strong>下载的文件夹里仅留下.git 文件夹，其他的文件都删除</strong></li>
<li><strong>找见我们源码的位置，将源码内的所以文件和目录（除.deploy_git 以外）都复制到clone下来的文件夹中（xxxx.github.io）</strong><br><strong>如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除。因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong><br><em><strong>注意：现在clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：</strong></em><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">.DS<span class="emphasis">_Store</span></span><br><span class="line"><span class="emphasis">Thumbs.db</span></span><br><span class="line"><span class="emphasis">db.json</span></span><br><span class="line"><span class="emphasis">*.log</span></span><br><span class="line"><span class="emphasis">node_</span>modules/</span><br><span class="line">public/</span><br><span class="line">.deploy<span class="emphasis">*/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><strong>大概目录如下</strong><br><img src="https://pic.imgdb.cn/item/667d9ca6d9c307b7e94e633a.png" alt="dir"></li>
</ol>
<h2 id="3-将源码push到github"><a href="#3-将源码push到github" class="headerlink" title="3.将源码push到github"></a>3.将源码push到github</h2><ol>
<li><strong>在clone下来的文件夹内(xxxx.github.io)打开 <em>Open Git Bash here</em></strong></li>
<li><strong>依次输入命令：</strong><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add .   <span class="comment">#添加所有文件</span></span><br><span class="line">git commit -m <span class="string">"first commit"</span>    <span class="comment">#备注</span></span><br><span class="line">git push <span class="comment">#推送到github</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>__此时已经成功将整个网站推送到了远程库__✅<br><img src="https://pic.imgdb.cn/item/667d9e4bd9c307b7e951197a.png" alt="push"></li>
<li>__如果要更新，只需要将本地的代码更新到本地，然后push到远程库即可__🤙</li>
</ol>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>github托管,个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s常用命令</title>
    <url>/looking/c0b83bc9.html</url>
    <content><![CDATA[<h1 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h1><p><code>1. 查看集群节点状态:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get nodes</span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看集群资源使用情况:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> top nodes</span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 查看集群信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> cluster-info</span><br></pre></td></tr></tbody></table></figure>
<p><code>4. 获取节点详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe node &lt;node-name&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>5. 给节点打标签:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> label nodes &lt;node-name&gt; key=value</span><br></pre></td></tr></tbody></table></figure>
<p><code>6. 取消节点标签:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> label nodes &lt;node-name&gt; key-</span><br></pre></td></tr></tbody></table></figure>
<p><code>7. 查看所有命名空间</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get ns</span><br></pre></td></tr></tbody></table></figure>
<p><code>8. 查看命名空间信息：</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe namespace &lt;namespace-name&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Pod管理"><a href="#Pod管理" class="headerlink" title="Pod管理"></a>Pod管理</h1><blockquote>
<p>k8s中最小的可部署的计算单元，用来封装一个或多个紧密相关的容器应用，共享存储和网络。</p>
</blockquote>
<p><code>1. 列出所有Pod:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get pods      <span class="comment">#无命名空间情况下</span></span><br><span class="line"><span class="variable">$kubectl</span> get pods -n &lt;namespace&gt;   <span class="comment">#有命名空间情况下</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看特定Pod的日志:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> logs &lt;pod-name&gt; -n &lt;namespace&gt;    <span class="comment">#打印当前日志</span></span><br><span class="line"><span class="variable">$kubectl</span> logs -f &lt;pod-name&gt; -n &lt;namespace&gt;  <span class="comment">#持续打印日志</span></span><br><span class="line"><span class="variable">$kubectl</span> logs -f --<span class="built_in">tail</span> 200 &lt;pod-name&gt; -n &lt;namespace&gt;  <span class="comment">#持续打印日志且打印200行 </span></span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 运行一个临时的Pod:</code><br> </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> run my-pod --image=nginx</span><br></pre></td></tr></tbody></table></figure><br><code>4. 进入正在运行的Pod:</code><p></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> <span class="built_in">exec</span> -it &lt;pod-name&gt; -n &lt;namespace&gt; -- /bin/bash</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it &lt;pod-name&gt; -n &lt;namespace&gt; -- <span class="built_in">ls</span> /etc/  <span class="comment">#不进入pod，直接执行pod中的命令</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>5. 查看特定Pod的详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe pod &lt;pod-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>6. 删除Pod:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> delete pod &lt;pod-name&gt; -n &lt;namespace&gt;</span><br><span class="line"><span class="variable">$kubectl</span> delete pod &lt;pod-name&gt; -n &lt;namespace&gt; --force --grace-period=0  <span class="comment">#强制删除</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>7. 查看Pod事件:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe pod &lt;pod-name&gt; -n &lt;namespace&gt; | grep -i events</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Deployment管理"><a href="#Deployment管理" class="headerlink" title="Deployment管理"></a>Deployment管理</h1><blockquote>
<p>用于管理Pod的声明式更新，自动处理Pod的创建、升级、回滚等，保证预期状态。</p>
</blockquote>
<p><code>1. 列出所有Deployments:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get deployments  </span><br><span class="line"><span class="variable">$kubectl</span> get deployments -n &lt;namaspace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看特定Deployment的详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe deployment &lt;deployment-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 创建Deployment:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> create deployment &lt;deployment-name&gt; --image=&lt;container-image&gt;</span><br><span class="line"><span class="variable">$kubectl</span> create deployment my-deployment --image=nginx</span><br></pre></td></tr></tbody></table></figure>
<p><code>4. 更新Deployment中的容器镜像:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> <span class="built_in">set</span> image deployment/&lt;deployment-name&gt; &lt;container-name&gt;=&lt;new-container-image&gt; -n &lt;namespace&gt;</span><br><span class="line"><span class="variable">$kubectl</span> <span class="built_in">set</span> image deployment/my-deployment nginx=nginx:latest -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>5. 回滚Deployment到上一个版本:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> rollout undo deployment/my-deployment -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>6. 查看Deployment的更新历史:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> rollout <span class="built_in">history</span> deployment &lt;deployment-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>7. 回滚到指定版本的Deployment:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 假设要回滚到第3次修订版：</span></span><br><span class="line"><span class="variable">$kubectl</span> rollout undo deployment &lt;deployment-name&gt; -n &lt;namespace&gt; --to-revision=3</span><br></pre></td></tr></tbody></table></figure>
<p><code>8. 查看Deployment指定标签下的的Pods状态</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get pods -l app=&lt;deployment-label&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>9. 查看Deployment的事件:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe deployment &lt;deployment-name&gt; -n &lt;namespace&gt; | grep -i events</span><br></pre></td></tr></tbody></table></figure>
<p><code>10. 监控Deployment的更新进度:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> rollout status deployment &lt;deployment-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>11. 扩大或缩小副本数量:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> scale deployment &lt;deployment-name&gt; -n &lt;namespace&gt; --replicas=5</span><br></pre></td></tr></tbody></table></figure>
<p><code>12. 删除Deployment：</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> delete deployment &lt;deployment-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Service管理"><a href="#Service管理" class="headerlink" title="Service管理"></a>Service管理</h1><blockquote>
<p>定义一种访问Pod的策略和抽象层，提供稳定的访问入口，实现服务发现与负载均衡。</p>
</blockquote>
<p><code>1. 列出所有Services:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get services &lt;-n&gt; &lt;namespace&gt;</span><br><span class="line"><span class="variable">$kubectl</span> get services  &lt;-n&gt; &lt;namespace&gt; -o wide</span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看特定Service的详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe service &lt;service-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 创建Service:</code></p>
<blockquote>
<p>可以直接通过命令行或者YAML文件创建：</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> create service clusterip my-service --tcp=80:8080</span><br></pre></td></tr></tbody></table></figure>
<p><code>4. 暴露Deployment为Service:</code></p>
<blockquote>
<p>自动创建Service指向Deployment的所有Pods：</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> expose deployment &lt;deployment-name&gt; &lt;-n&gt; &lt;namespace&gt; --<span class="built_in">type</span>=LoadBalancer --port=80 --target-port=8080</span><br></pre></td></tr></tbody></table></figure>
<p><code>5. 编辑Service配置:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> edit service &lt;service-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>6. 更改Service类型:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> patch service &lt;service-name&gt; &lt;-n&gt; &lt;namespace&gt; -p <span class="string">'{"spec": {"type": "NodePort"}}'</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>7. 删除Service:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> delete service &lt;service-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>8. 创建ClusterIP类型的service：</code></p>
<blockquote>
<p>ClusterIP为Service分配一个仅集群内部可访问的IP地址。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行创建：</span></span><br><span class="line"><span class="variable">$kubectl</span> create service clusterip my-service --tcp=80:8080</span><br></pre></td></tr></tbody></table></figure>

<p><code>基于server.yaml文件创建service</code></p>
<blockquote>
<p>kubectl apply -f server.yaml</p>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>9. 创建NodePort类型的service：</code></p>
<blockquote>
<p>NodePort会在每个节点上开放一个静态端口，供外部访问集群内部的服务。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 命令行创建：</span></span><br><span class="line">kubectl expose deployment my-deployment --<span class="built_in">type</span>=NodePort --port=80 --target-port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于yaml文件创建：</span></span><br><span class="line"><span class="variable">$kubectl</span> apply -f xxx.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: MyApp</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">      nodePort: 30080  <span class="comment"># 指定节点上的端口</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br></pre></td></tr></tbody></table></figure>

<p><code>10. 创建LoadBalancer类型的service：</code></p>
<blockquote>
<p>适用于需要云提供商的负载均衡器来暴露服务的情况。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行创建：</span></span><br><span class="line">kubectl expose deployment my-deployment --<span class="built_in">type</span>=LoadBalancer --port=80 --target-port=8080</span><br><span class="line"><span class="comment"># 基于yaml文件创建：</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service-loadbalancer</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: MyApp</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br></pre></td></tr></tbody></table></figure>

<h1 id="PV-PVC管理"><a href="#PV-PVC管理" class="headerlink" title="PV/PVC管理"></a>PV/PVC管理</h1><blockquote>
<p>Persistent Volumes (PVs) 提供了持久化的存储资源，PV类型多种多样，支持不同的存储后端，如本地存储、网络存储（如NFS、GlusterFS、Ceph等）。</p>
</blockquote>
<p><code>1. 列出所有PV:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get pv -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看PV详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe pv &lt;pv-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 创建本地PV:</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">local-pv-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/mnt/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">          <span class="attr">values:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node01</span>  <span class="comment"># 指定节点名称</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>4. 创建NFS PV：</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-pv-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">&lt;nfs-server-ip&gt;</span> <span class="comment"># nfs服务ip</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/exports/data"</span>   <span class="comment"># nfs共享目录</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>5. 列出所有PVC:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get pvc -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>6. 查看PVC详细信息:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> describe pvc &lt;pvc-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>7. 创建PVC：</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myclaim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span>  <span class="comment"># 或 nfs，需与PV的storageClassName匹配</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="ConfigMap管理"><a href="#ConfigMap管理" class="headerlink" title="ConfigMap管理"></a>ConfigMap管理</h1><blockquote>
<p>用来存储配置数据，如应用的配置文件，以键值对形式挂载到Pod中，方便应用程序读取和分离配置与代码。</p>
</blockquote>
<p><code>1. 创建ConfigMap:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#文件名当键，文件内容当值</span></span><br><span class="line"><span class="variable">$kubectl</span> create configmap nginx-config --from-file=./www.conf</span><br><span class="line"><span class="comment">#指定某个目录为配置文件目录</span></span><br><span class="line"><span class="variable">$kubectl</span> create configmap ops-metrics-config -n ops-system --from-file=configmap/ops-metrics</span><br></pre></td></tr></tbody></table></figure>
<p><code>2. 查看ConfigMap</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> get configmaps -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><code>3. 删除ConfigMap:</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$kubectl</span> delete configmap  &lt;my-configmap&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群安装-kubeadm安装</title>
    <url>/looking/c38bf18e.html</url>
    <content><![CDATA[<h1 id="kubeadm-安装集群"><a href="#kubeadm-安装集群" class="headerlink" title="kubeadm 安装集群"></a>kubeadm 安装集群</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><table>
<thead>
<tr>
<th align="center">角色</th>
<th align="center">IP</th>
<th align="center">组件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">k8s-master</td>
<td align="center">192.168.1.20</td>
<td align="center">kube-apiserver，kube-controller-manager，kube-scheduler，docker, etcd</td>
</tr>
<tr>
<td align="center">k8s-node01</td>
<td align="center">192.168.1.18</td>
<td align="center">kubelet，kube-proxy，docker, etcd</td>
</tr>
<tr>
<td align="center">k8s-node02</td>
<td align="center">192.168.1.19</td>
<td align="center">kubelet，kube-proxy，docker, etcd</td>
</tr>
</tbody></table>
<ul>
<li><strong>docker版本：docker-ce 20.10.9</strong></li>
<li><strong>kubernetes版本：v1.21.4</strong></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1、关闭防火墙</span><br><span class="line">    - systemctl stop firewalld</span><br><span class="line">    - systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">2、关闭Selinux</span><br><span class="line">    - setenforce 0</span><br><span class="line">    - sed -i <span class="string">'s/enforcing/disabled/g'</span> /etc/selinux/config</span><br><span class="line">3、关闭swap</span><br><span class="line">    - sudo sed -i <span class="string">'/swap/s/^/#/'</span> /etc/fstab     <span class="comment">#注销掉 含有 swap 的行      /swap/: 匹配包含 swap 的行。s/^/#/: 在每行的开头（^ 表示行的开头）添加 # 号</span></span><br><span class="line"></span><br><span class="line">4、修改主机名</span><br><span class="line">    - hostnamectl set-hostname k8s-master</span><br><span class="line">    - hostnamectl set-hostname k8s-node01</span><br><span class="line">    - hostnamectl set-hostname k8s-node02</span><br><span class="line"></span><br><span class="line">5、时间同步 </span><br><span class="line">yum install ntpdate -y </span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line"></span><br><span class="line">6、定时任务</span><br><span class="line">crontab -e</span><br><span class="line">*/30 * * * * /usr/sbin/ntpdate-u ntp1.aliyun.com &gt;&gt; /var/log/ntpdate.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">7、内核参数调整</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle=0           # 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</span></span><br><span class="line"><span class="string">vm.swappiness=0                     # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1              # 不检查物理内存是否够用</span></span><br><span class="line"><span class="string">fs.inotify.max_user_instances=8192  # 开启 OOM</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0 </span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=1048576</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br><span class="line"></span><br><span class="line">8、开启 ipvs</span><br><span class="line">lsmod|grep ip_vs</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">ls</span> /lib/modules/$(<span class="built_in">uname</span> -r)/kernel/net/netfilter/ipvs|grep -o <span class="string">"^[^.]*"</span>); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; /sbin/modinfo -F filename <span class="variable">$i</span> &gt;/dev/null 2&gt;&amp;1 &amp;&amp; /sbin/modprobe <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> /lib/modules/$(<span class="built_in">uname</span> -r)/kernel/net/netfilter/ipvs|grep -o <span class="string">"^[^.]*"</span> &gt;&gt; /etc/modules</span><br><span class="line"></span><br><span class="line">9、安装 ipvsadm</span><br><span class="line">yum install ipvsadm ipset -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><details>
<summary>centos</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1、下载阿里 的docker-ce镜像源仓库文件：</span></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo    <span class="comment">#将repo文件下载到指定的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、更新yum源：</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、查看docker-ce版本：</span></span><br><span class="line">yum list docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、新建docker配置文件daemon.json（作用是配置docker国内的镜像下载的网站、阿里云加速器）：</span></span><br><span class="line"><span class="built_in">mkdir</span> /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line"><span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line"><span class="string">"registry-mirrors"</span>:[<span class="string">"https://gwsg6nw9.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、安装docker指定版本：</span></span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 docker-ce-20.10.9-3.el7      <span class="comment">#--setopt=obsoletes=0关闭安装最新的包 指定安装版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、启动docker：</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 修改cgroup驱动为systemd，适配k8s默认选项</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "exec-opts": ["native.cgroupdriver=systemd"],</span></span><br><span class="line"><span class="string">  "registry-mirrors":["https://xxxxxxx.aliyuncs.com"],  #阿里云镜像加速,这里需要从阿里云平台获取</span></span><br><span class="line"><span class="string">  "log-driver": "json-file",</span></span><br><span class="line"><span class="string">  "log-opts": {</span></span><br><span class="line"><span class="string">    "max-size": "100m"</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "storage-driver": "overlay2",</span></span><br><span class="line"><span class="string">  "storage-opts": [</span></span><br><span class="line"><span class="string">    "overlay2.override_kernel_check=true"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、查看docker版本：</span></span><br><span class="line">docker version</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</details>
<details>
<summary>ubuntu</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装GPG证书</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 写入软件源信息</span></span><br><span class="line">add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查询版本</span></span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"><span class="comment">#docker-ce | 5:20.10.9~3-0~ubuntu-focal | https://mirrors.aliyun.com/docker-ce/linux/ubuntu focal/stable amd64 Packages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 安装</span></span><br><span class="line">apt install docker-ce=5:20.10.9~3-0~ubuntu-focal -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 验证</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 修改cgroup驱动为systemd，适配k8s默认选项</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "exec-opts": ["native.cgroupdriver=systemd"],</span></span><br><span class="line"><span class="string">  "log-driver": "json-file",</span></span><br><span class="line"><span class="string">  "log-opts": {</span></span><br><span class="line"><span class="string">    "max-size": "100m"</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "storage-driver": "overlay2",</span></span><br><span class="line"><span class="string">  "storage-opts": [</span></span><br><span class="line"><span class="string">    "overlay2.override_kernel_check=true"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>
</details>

<h2 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h2><blockquote>
<p>简介<br>作用：将kuberenets大部分组件都容器化，通过StaticPod方式运行，并自动化了大部分的集群配置及认证等工作，简单几步即可搭建一个可用k8ss的集群。</p>
</blockquote>
<ul>
<li><p>kubeadm init：master 节点创建</p>
<ul>
<li>检查当前机器是否合规</li>
<li>自动生成集群运行所需的各类证书及各类配置，并将master节点信息保存在名为cluster-info的ConfigMap中</li>
<li>通过Static Pod方式，运行API server、controller manager 、scheduler及etcd组件。</li>
<li>生成Token以便其他节点加入集群</li>
</ul>
</li>
<li><p>kubeadm join：node 节点加入集群</p>
</li>
<li><p>节点通过token访问kube-apiserver，获取cluster-info中信息，主要是apiserver的授权信息（节点信任集群）。</p>
</li>
<li><p>通过授权信息，kubelet可执行TLS bootstrapping，与apiserver真正建立互信任关系（集群信任节点）。</p>
</li>
</ul>
<h3 id="安装组件（kubelet-kubeadm-kubectl）"><a href="#安装组件（kubelet-kubeadm-kubectl）" class="headerlink" title="安装组件（kubelet kubeadm kubectl）"></a>安装组件（kubelet kubeadm kubectl）</h3><details>
<summary>centos</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1、新建repo文件：</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、安装指定的版本组件：</span></span><br><span class="line"><span class="comment">### master ###</span></span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 kubelet-1.21.4-0 kubeadm-1.21.4-0 kubectl-1.21.4-0</span><br><span class="line"></span><br><span class="line"><span class="comment">### node ###</span></span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 kubelet-1.21.4-0 kubeadm-1.21.4-0</span><br></pre></td></tr></tbody></table></figure>
</details>

<details>
<summary>ubuntu</summary>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装GPG证书</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 写入软件源信息</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/apt/sources.list.d/kubernetes.list &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查询版本</span></span><br><span class="line">apt-cache madison kubeadm</span><br><span class="line"><span class="comment">#kubeadm |  1.21.4-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 安装</span></span><br><span class="line"><span class="comment">#### master ####</span></span><br><span class="line">apt-get install -y kubeadm=1.21.4-00 kubelet=1.21.4-00 kubectl=1.21.4-00</span><br><span class="line"></span><br><span class="line"><span class="comment">#### node ####</span></span><br><span class="line">apt-get install -y kubeadm=1.21.4-00 kubelet=1.21.4-00</span><br></pre></td></tr></tbody></table></figure>
</details>


<h2 id="集群的安装"><a href="#集群的安装" class="headerlink" title="集群的安装"></a>集群的安装</h2><h3 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h3><ul>
<li><p>初始化</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.1.20 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.21.4 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --ignore-preflight-errors=all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应参数含义：</span></span><br><span class="line"><span class="comment"># 节点ip</span></span><br><span class="line"><span class="comment"># 镜像仓库</span></span><br><span class="line"><span class="comment"># 版本</span></span><br><span class="line"><span class="comment"># service网段 默认</span></span><br><span class="line"><span class="comment"># pod网段   默认</span></span><br><span class="line"><span class="comment"># 忽略检查</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>输出结果：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[kubelet-finalize] Updating <span class="string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.1.20:6443 --token mutg2q.34gp9f77hfm3mzqt \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:5aafdb66ba0d96855c0ec8a59577d4e7b3ba81e2f58069b9b407a0059998372e</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>根据提示，创建 kubectl 认证文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 即使是root用户，也采用默认文件方式</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>kubectl 命令补齐：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<hr>
<h3 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h3><ul>
<li>加入集群：<ul>
<li>在node01和node02节点执行</li>
<li>根据上面的输出，执行加入命令<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在node上执行（ip不用改）</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.1.20:6443 --token mutg2q.34gp9f77hfm3mzqt \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:5aafdb66ba0d96855c0ec8a59577d4e7b3ba81e2f58069b9b407a0059998372e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如果某个节点报错：（这是kubelet报错导致无法启动）</span></span><br><span class="line">报错1）</span><br><span class="line">Failed to run kubelet<span class="string">" err="</span>failed to run Kubelet: misconfiguration: kubelet cgroup driver: \"systemd\" is different from docker cgroup driver: \"cgroupfs\"</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在报错的节点上查看：</span></span><br><span class="line">docker info | grep Cgroup  </span><br><span class="line">Cgroup Driver: cgroupfs        <span class="comment">#不是systemd ，因为有些系统不支持cgroupfs ，所以要改为systemd</span></span><br><span class="line">Cgroup Version: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Cgroup Driver：</span></span><br><span class="line"><span class="comment"># 在/etc/docker/daemon.json中添加如下内容（如果没有创建）- 可看 上面的安装docker第7步：</span></span><br><span class="line">        {</span><br><span class="line">        <span class="string">"exec-opts"</span>:[<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为什么要修改为使用systemd?</span><br><span class="line">Kubernetes 推荐使用 systemd 来代替 cgroupf</span><br><span class="line">因为systemd是Kubernetes自带的cgroup管理器, 负责为每个进程分配cgroups,  </span><br><span class="line">但docker的cgroup driver默认是cgroupfs,这样就同时运行有两个cgroup控制管理器, </span><br><span class="line">当资源有压力的情况时,有可能出现不稳定的情况</span><br><span class="line"></span><br><span class="line">报错2)：</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists</span><br><span class="line">        [ERROR Port-10250]: Port 10250 is <span class="keyword">in</span> use</span><br><span class="line">        [ERROR FileAvailable--etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line"></span><br><span class="line">- 解决：(注意是在node节点上执行)</span><br><span class="line">如果你正在重新初始化一个 Kubernetes 集群，可以使用 kubeadm reset 命令来清理先前的设置。</span><br><span class="line">sudo kubeadm reset</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
</ul>
<p><strong>以下这个情况是在token过期时操作或后续新增节点时，需要重新生成token。</strong></p>
<ul>
<li>token 过期: kubeadm join 加入集群时，需要2个参数，–token与–discovery-token-ca-cert-hash。其中，token有限期一般是24小时，如果超过时间要新增节点，就需要重新生成token。<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查询token(在master上操作)</span></span><br><span class="line">kubeadm token list</span><br><span class="line">TOKEN                     TTL   EXPIRES                USAGES           DESCRIPTION         EXTRA GROUPS</span><br><span class="line">mutg2q.34gp9f77hfm3mzqt   23h         2024-07-03T22:43:22+08:00   authentication,signing   The default bootstrap token generated by <span class="string">'kubeadm init'</span>.   system:bootstrappers:kubeadm:default-node-token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 token</span></span><br><span class="line">kubeadm token create</span><br><span class="line">token：l0r2mh.0z5aojdur71posxt</span><br><span class="line"></span><br><span class="line"><span class="comment"># discovery-token-ca-cert-hash   token的hash值</span></span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br><span class="line">5aafdb66ba0d96855c0ec8a59577d4e7b3ba81e2f58069b9b407a0059998372e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新节点加入（比如新增节点或者原先节点未加入）</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.80.20:6443 --token l0r2mh.0z5aojdur71posxt \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:5aafdb66ba0d96855c0ec8a59577d4e7b3ba81e2f58069b9b407a0059998372e</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="网络插件安装"><a href="#网络插件安装" class="headerlink" title="网络插件安装"></a>网络插件安装</h2><ul>
<li><p>未安装网络插件，节点没有 Ready</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">NAME         STATUS     ROLES                  AGE     VERSION</span><br><span class="line">k8s-master   NotReady   control-plane,master   41m     v1.21.4</span><br><span class="line">k8s-node01   NotReady   &lt;none&gt;                 35m     v1.21.4</span><br><span class="line">k8s-node02   NotReady   &lt;none&gt;                 8m21s   v1.21.4</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装 flannel：</p>
</li>
<li><p>如果无法拉取镜像：<br><a href="https://xiaoxin-top.github.io/looking/c8e05f01.html">参考:docker配置代理篇的老方法配置 proxy.conf</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载网络插件yaml文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保网络配置与 `--pod-network-cidr=10.244.0.0/16` 一致</span></span><br><span class="line">vi kube-flannel.yml</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用网络插件</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络插件pod</span></span><br><span class="line">- 默认每个节点都会跑一个flannel 的pod、才能让集群正常</span><br><span class="line">kubectl get pod -n kube-flannel</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-flannel-ds-nkjbh   1/1     Running   0          103s   192.168.1.18   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-qs9sz   1/1     Running   0          103s   192.168.1.20   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-xsg6c   1/1     Running   0          103s   192.168.1.19   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master   Ready    control-plane,master   43m   v1.21.4</span><br><span class="line">k8s-node01   Ready    &lt;none&gt;                 33m   v1.21.4</span><br><span class="line">k8s-node02   Ready    &lt;none&gt;                 32m   v1.21.4</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="ipvs"><a href="#ipvs" class="headerlink" title="ipvs"></a>ipvs</h2><ul>
<li>开启 kube-proxy 协议为 ipvs（master上操作）</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl edit configmap kube-proxy -n kube-system</span><br><span class="line">    mode: <span class="string">"ipvs"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h2><ul>
<li><p>集群状态异常：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ kubectl get cs</span><br><span class="line">NAME                 STATUS      MESSAGE                                           ERROR</span><br><span class="line">scheduler            Unhealthy   Get <span class="string">"http://127.0.0.1:10251/healthz"</span>: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">controller-manager   Unhealthy   Get <span class="string">"http://127.0.0.1:10252/healthz"</span>: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">etcd-0               Healthy     {<span class="string">"health"</span>:<span class="string">"true"</span>}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>原因：使用了非安全端口。按如下方法修改（master上操作）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vi /etc/kubernetes/manifests/kube-scheduler.yaml </span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - <span class="built_in">command</span>:</span><br><span class="line">    - kube-scheduler</span><br><span class="line">    - --kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --leader-elect=<span class="literal">true</span></span><br><span class="line">    <span class="comment">#- --port=0    # 注释掉</span></span><br><span class="line">    image: k8s.gcr.io/kube-scheduler:v1.18.6</span><br><span class="line"></span><br><span class="line">$ vi /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - <span class="built_in">command</span>:</span><br><span class="line">    - kube-controller-manager</span><br><span class="line">    - --node-cidr-mask-size=24</span><br><span class="line">    <span class="comment">#- --port=0   # 注释掉</span></span><br><span class="line">    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">$ systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查询状态</span></span><br><span class="line">$ kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">etcd-0               Healthy   {<span class="string">"health"</span>:<span class="string">"true"</span>}   </span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>kubeadm</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalive高可用</title>
    <url>/looking/121ebbda.html</url>
    <content><![CDATA[<h2 id="1-安装-Keepalived"><a href="#1-安装-Keepalived" class="headerlink" title="1. 安装 Keepalived"></a>1. 安装 Keepalived</h2><ul>
<li>在主机 C 和 D 上安装 Keepalived：<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install keepalived -y  <span class="comment"># CentOS/RHEL</span></span><br><span class="line">sudo apt-get install keepalived -y  <span class="comment"># Debian/Ubuntu</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="2-配置-Keepalived"><a href="#2-配置-Keepalived" class="headerlink" title="2. 配置 Keepalived"></a>2. 配置 Keepalived</h2><ul>
<li><p>配置 Keepalived 以管理 VIP 并在故障转移时运行自定义脚本。</p>
</li>
<li><p>在主机 C 上创建/编辑 /etc/keepalived/keepalived.conf：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 {</span><br><span class="line">    state MASTER</span><br><span class="line">    interface bond0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication {</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass your_password</span><br><span class="line">    }</span><br><span class="line">    virtual_ipaddress {</span><br><span class="line">        192.168.1.100/24 dev bond0</span><br><span class="line">    }</span><br><span class="line">    track_script {</span><br><span class="line">        chk_service</span><br><span class="line">    }</span><br><span class="line">    notify_master "/etc/keepalived/master.sh"</span><br><span class="line">    notify_backup "/etc/keepalived/backup.sh"</span><br><span class="line">    notify_fault "/etc/keepalived/fault.sh"</span><br><span class="line">    nopreempt           # 添加这个参数以防止主机故障恢复后自动切回-防止业务的断层</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">vrrp_script chk_service {</span><br><span class="line">    script "/etc/keepalived/check_service.sh"</span><br><span class="line">    interval 2</span><br><span class="line">    weight -20</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>在主机 D 上创建/编辑 /etc/keepalived/keepalived.conf：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 {</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface bond0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication {</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass your_password</span><br><span class="line">    }   </span><br><span class="line">    virtual_ipaddress {</span><br><span class="line">        192.168.1.100/24 dev bond0</span><br><span class="line">    }</span><br><span class="line">    track_script {</span><br><span class="line">        chk_service</span><br><span class="line">    }</span><br><span class="line">    notify_master "/etc/keepalived/master.sh"</span><br><span class="line">    notify_backup "/etc/keepalived/backup.sh"</span><br><span class="line">    notify_fault "/etc/keepalived/fault.sh"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">vrrp_script chk_service {</span><br><span class="line">    script "/etc/keepalived/check_service.sh"</span><br><span class="line">    interval 2</span><br><span class="line">    weight -20</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>192.168.1.100/24 dev bond0          #ip是虚拟ip  这里bond0 是虚拟网卡名称（通过bond技术来让双网卡做冗余-详情看<strong>linux双网卡冗余</strong>篇）</p>
</li>
<li><p>自行编写以下三个脚本（不是必须）：</p>
<blockquote>
<p>notify_master “/etc/keepalived/master.sh”      #选举为master时执行脚本<br>notify_backup “/etc/keepalived/backup.sh”      #选举为backup时执行脚本<br>notify_fault “/etc/keepalived/fault.sh”        #故障时执行脚本</p>
</blockquote>
</li>
</ul>
<h2 id="3-编写自定义脚本"><a href="#3-编写自定义脚本" class="headerlink" title="3. 编写自定义脚本"></a>3. 编写自定义脚本</h2><ul>
<li>/etc/keepalived/check_service.sh：用于检查业务服务是否运行<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 检查业务服务是否运行的脚本</span></span><br><span class="line"><span class="comment"># 假设业务服务名为 "my_service"</span></span><br><span class="line"><span class="keyword">if</span> systemctl status my_service &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="4-设置脚本权限"><a href="#4-设置脚本权限" class="headerlink" title="4. 设置脚本权限"></a>4. 设置脚本权限</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/keepalived/*.sh</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-启动-Keepalived"><a href="#5-启动-Keepalived" class="headerlink" title="5. 启动 Keepalived"></a>5. 启动 Keepalived</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start keepalived</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> keepalived</span><br></pre></td></tr></tbody></table></figure>

<div class="note warning flat"><p>nginx + keepalived 高可用配置参考</p>
</div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/littlecc/p/17762083.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">keepalive</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>keepalive, 高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命名空间的禁用</title>
    <url>/looking/876d4c84.html</url>
    <content><![CDATA[<p class="p center logo large">CVE-2024-1086</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://nsfocusglobal.com/linux-kernel-privilege-escalation-vulnerability-cve-2024-1086-notice/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考绿盟</div>
            <div class="tag-link-sitename">nsfocusglobal.com</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div class="note danger modern"><p>由于linux命名空间是默认开启的，所以需要禁用，否则会存在一些漏洞</p>
</div>
<mark class="hl-label green">命名空间的作用</mark> 
<blockquote>
<ul>
<li>用户命名空间：用户命名空间的功能主要是为了提供进程和用户 ID 的隔离，通常用于安全容器环境。禁用用户命名空间后，普通用户将无法创建这样的隔离环境。</li>
<li>用户命名空间是 Linux 内核的一个特性，它允许非特权用户创建自己的隔离环境，其中的用户和组 ID 可以重新映射，主要用于容器和沙箱环境。禁用用户命名空间后，普通用户将无法创建这些隔离环境。</li>
</ul>
</blockquote>
<div class="checkbox times red checked"><input type="checkbox" checked="checked">
            <p>禁用用户命名空间</p>
            </div>
<blockquote>
<p>用户命名空间允许非特权用户创建隔离的用户和组 ID 映射，从而可以执行一些特权操作。为了增强安全性，你可以禁用它。</p>
</blockquote>
<mark class="hl-label red">添加配置</mark> 
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> “user.max_user_namespaces=0” &gt; /etc/sysctl.d/userns.conf  </span><br></pre></td></tr></tbody></table></figure>

<mark class="hl-label red">使配置立马生效</mark> 
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo sysctl --system</span><br></pre></td></tr></tbody></table></figure>

<mark class="hl-label red">检查是否关闭</mark> 
<blockquote>
<p>1.使用 sysctl 命令查看当前 user.max_user_namespaces 的值：<br>如果输出为 user.max_user_namespaces = 0，说明用户命名空间已经被禁用。</p>
<blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sysctl user.max_user_namespaces</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
</blockquote>
<blockquote>
<p>2.普通用户命名空间的创建<br>尝试用非特权用户创建用户命名空间。如果命名空间被禁用，应该会报错</p>
<blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">unshare --user --map-root-user <span class="built_in">id</span></span><br></pre></td></tr></tbody></table></figure>
<p>如果命令返回类似 unshare: unshare failed: Invalid argument 的错误，表示用户命名空间的创建已被禁用。</p>
</blockquote>
</blockquote>
<blockquote>
<ol start="3">
<li>尝试运行容器<br>容器技术，如 Docker 或 Podman，通常依赖于用户命名空间。你可以尝试用非特权用户运行一个简单的容器，看看是否会失败。<br>例如，使用 Docker 运行一个简单的容器：<blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -it busybox</span><br></pre></td></tr></tbody></table></figure>
<p>如果用户命名空间被禁用，Docker 可能会因为无法创建用户命名空间而失败。</p>
</blockquote>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>使用 newuidmap 和 newgidmap<br>用户命名空间的创建也涉及到 newuidmap 和 newgidmap 工具。这些工具用于映射用户和组 ID<blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">newuidmap 0 1000 1 1000</span><br></pre></td></tr></tbody></table></figure>
<p>如果你看到错误，例如 newuidmap: write to uid_map failed: Invalid argument，说明用户命名空间已经被禁用。</p>
</blockquote>
</li>
</ol>
</blockquote>
<hr>
<div class="note info modern"><p>使用命名空间</p>
</div>
<mark class="hl-label green">命名空间类型</mark> 
<blockquote>
<ol>
<li>UTS（主机名和域名）命名空间：隔离主机名和域名。</li>
<li>IPC（消息队列、信号量、共享内存）命名空间：隔离消息队列、信号量和共享内存。</li>
<li>PID（进程ID）命名空间：隔离进程ID。</li>
<li>Mount（挂载）命名空间：隔离文件系统挂载点</li>
<li>Network（网络）命名空间：隔离网络设备、IP 地址、端口号等。</li>
<li>User（用户）命名空间：隔离用户和用户组。</li>
<li>Cgroup（资源限制）命名空间：隔离资源限制，如CPU、内存等。</li>
</ol>
</blockquote>
<mark class="hl-label red">使用unshare创建命名空间</mark> 
<blockquote>
<p>unshare 命令可以分离当前进程或一个新创建的进程进入一个新的命名空间</p>
</blockquote>
<div class="tabs" id="unshare"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="unshare-1">创建一个UTS命名空间</button><button type="button" class="tab " data-href="unshare-2">创建一个网络命名空间</button><button type="button" class="tab " data-href="unshare-3">创建一个挂载命名空间</button><button type="button" class="tab " data-href="unshare-4">创建一个用户命名空间</button><button type="button" class="tab " data-href="unshare-5">结合多个命名空间</button><button type="button" class="tab " data-href="unshare-6">在命名空间中运行命令</button><button type="button" class="tab " data-href="unshare-7">使用 ip netns 管理网络命名空间</button></ul><div class="tab-contents"><div class="tab-item-content active" id="unshare-1"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --uts --hostname new_hostname</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这会创建一个新的 UTS 命名空间，并将主机名设置为 new_hostname。你可以使用 hostname 命令查看和修改新的主机名。</p>
</blockquote></div><div class="tab-item-content" id="unshare-2"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --net</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这会创建一个新的网络命名空间。你可以在该命名空间内执行网络配置命令，比如创建新的虚拟网络接口。</p>
</blockquote></div><div class="tab-item-content" id="unshare-3"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --mount</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这会创建一个新的挂载命名空间。你可以在该命名空间内挂载和卸载文件系统，而不会影响主命名空间</p>
</blockquote></div><div class="tab-item-content" id="unshare-4"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --user --map-root-user</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这会创建一个新的用户命名空间，并将当前用户映射为命名空间内的根用户</p>
</blockquote></div><div class="tab-item-content" id="unshare-5"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --uts --net --mount</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>可以结合多个选项同时创建多个命名空间。例如，创建一个新的 UTS、网络和挂载命名空间</p>
</blockquote></div><div class="tab-item-content" id="unshare-6"><blockquote>
<p>可以使用 – 选项在新命名空间中运行指定的命令。例如，在一个新的 UTS 和网络命名空间中运行 bash：</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo unshare --uts --net --mount -- bash</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="unshare-7"><blockquote>
<p>对于网络命名空间，可以使用 ip 命令的 netns 子命令来创建和管理：</p>
</blockquote>
<ol>
<li>创建网络命名空间:<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo ip netns add mynetns</span><br></pre></td></tr></tbody></table></figure></li>
<li>在网络命名空间中执行命令<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo ip netns <span class="built_in">exec</span> mynetns bash</span><br></pre></td></tr></tbody></table></figure></li>
<li>删除网络命名空间<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo ip netns delete mynetns</span><br></pre></td></tr></tbody></table></figure></li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux,namespace,漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>linux双网卡冗余</title>
    <url>/looking/a57b6af7.html</url>
    <content><![CDATA[<p class="p center log large">bond技术实现网卡绑定</p>
<mark class="hl-label green">概念</mark> 
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">所谓的多网卡绑定就是将多张物理网卡逻辑上组成一个网卡，这样就可以防止一块网卡坏了网络瘫痪，也能起到提升网络带宽的作用。</span><br><span class="line">把多块网卡绑定在一起，一般有两种工作模式可以选择，轮询模式和主备模式</span><br><span class="line"><span class="bullet">-</span> 轮询模式：例如把两块网卡绑定在一起，此时两块网卡都处于工作状态，它们轮流处理数据包，从而提升带宽和容错性。</span><br><span class="line"><span class="bullet">-</span> 主备模式：例如把两块网卡绑定在一起，同一时间只有一块网卡处于工作状态，只有发生故障，备用网卡才会切换到工作模式；</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">bond的工作模式</mark> 
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">1) mode=0(balance-rr)平衡抡循环策略</span><br><span class="line"><span class="bullet">    -</span> 链路负载均衡，增加带宽，支持容错，一条链路故障会自动切换正常链路。交换机需要配置聚合口。</span><br><span class="line"><span class="bullet">    -</span> 特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1…一直循环下去，直到最后一个传输完毕），此模式提供负载均衡和容错能力，但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新按要求发送，这样网络的吞吐量就会下降。</span><br><span class="line">2) mode=1（active-backup）主备策略</span><br><span class="line"><span class="bullet">    -</span> 只有一块网卡是active，另一块是备用的standby，所有流量都在active链路上处理，交换机配置的是捆绑的话将不能工作，因为交换机往两块网卡发包，有一半包是丢弃的。</span><br><span class="line"><span class="bullet">    -</span> 特点：只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见的，从外面来看，bond的mac地址是唯一的，以避免switch（交换机）发生混乱。此模式只提供了容错能力。由此可见此模式的优点是可以提供网络连接的高可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有N个网络接口的情况下，资源利用率为1/N。</span><br><span class="line">3) mode=2（balance-xor）平衡策略</span><br><span class="line"><span class="bullet">    -</span> 表示XOR Hash负载分担，和交换机的聚合强制不协商方式配合。（需要xmit<span class="emphasis">_hash_</span>policy，需要交换机配置port channel）</span><br><span class="line"><span class="bullet">    -</span> 特点：基于指定的传输HASH策略传输数据包。缺省的策略是：（源MAC地址XOR目标MAC地址） % slave数量。其他的传输策略可以通过xmit<span class="emphasis">_hash_</span>policy选项指定，此模式提供负载平衡和容错能力。</span><br><span class="line">4) mode=3（broadcast）广播策略</span><br><span class="line"><span class="bullet">    -</span> 表示所有包从所有网络接口发出，这个不均衡，只有冗余机制，但过于浪费资源。此模式适用于金融行业，因为他们需要高可靠性的网络，不允许出现任何问题。需要和交换机的聚合强制不协商方式配合。特点：在每个slave接口上传输每个数据包，此模式提供了容错能力。</span><br><span class="line">5) mode=4(802.3ad)(IEEE 802.3ad 动态链接聚合)</span><br><span class="line"><span class="bullet">    -</span> 表示支持802.3ad协议，和交换机的聚合LACP方式配合（需要xmit<span class="emphasis">_hash_</span>policy）.标准要求所有设备在聚合操作时，要在同样的速率和双工模式，而且，和除了balance-rr模式外的其它bonding负载均衡模式一样，任何连接都不能使用多于一个接口的带宽。</span><br><span class="line"><span class="bullet">    -</span> 特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。</span><br><span class="line"><span class="bullet">    -</span> 外出流量的slave选举是基于传输hash策略，该策略可以通过xmit<span class="emphasis">_hash_</span>policy选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应 性。</span><br><span class="line"><span class="bullet">    -</span> 必要条件：</span><br><span class="line"><span class="bullet">        -</span> 条件1：ethtool支持获取每个slave的速率和双工设定</span><br><span class="line"><span class="bullet">        -</span> 条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation</span><br><span class="line"><span class="bullet">        -</span> 条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</span><br><span class="line">6) mode=5(balance-tlb)适配器传输负载均衡</span><br><span class="line"><span class="bullet">    -</span> 是根据每个slave的负载情况选择slave进行发送，接收时使用当前轮到的slave。该模式要求slave接口的网络设备驱动有某种ethtool支持；而且ARP监控不可用。</span><br><span class="line"><span class="bullet">    -</span> 特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</span><br><span class="line"><span class="bullet">    -</span> 必要条件：ethtool支持获取每个slave的速率</span><br><span class="line">7) mode=6（balance-alb）适配器适应性负载均衡</span><br><span class="line"><span class="bullet">    -</span> 在5的tlb基础上增加了rlb(接收负载均衡receive load balance).不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。</span><br></pre></td></tr></tbody></table></figure>

<div class="note info flat"><p>bond技术实现网卡绑定</p>
</div>
<mark class="hl-label green">准备</mark> 

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">前提：</span><br><span class="line">1、bond技术依赖内核的bonding模块，所以需要先加载bonding模块才行</span><br><span class="line">2、要使得bond能正常工作，必须安装ifenslave 工具，它将两个或更多的网络接口绑定到一个单一的通道,如果没装这个工具，具体表现为bond无法启动，一直是down的状态</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否已加载bonding模块</span></span><br><span class="line">lsmod | grep bonding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载bonding模块</span></span><br><span class="line">sudo modprobe bonding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件，不然通过命令加载模块，重启会失效</span></span><br><span class="line">sudo vim /etc/modules</span><br><span class="line">bonding <span class="comment"># 在配置文件中加入需要开启加载的模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装ifenslave</span></span><br><span class="line"><span class="built_in">which</span> ifenslave</span><br></pre></td></tr></tbody></table></figure>
<mark class="hl-label green">修改配置文件实现bond技术</mark> 
<div class="tabs" id="bond"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="bond-1">centos实现</button><button type="button" class="tab " data-href="bond-2">ubuntu实现</button><button type="button" class="tab " data-href="bond-3">麒麟系统：KV10-SP1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="bond-1"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1、创建bonding的配置文件</span><br><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line"><span class="comment">#添加相关参数</span></span><br><span class="line">DEVICE=bond0                    <span class="comment">## 可以根据自己的命名规则来命名，一般叫作bondX</span></span><br><span class="line">BONDING_MASTER=<span class="built_in">yes</span>                <span class="comment">## 表示bond0为绑定的主设备</span></span><br><span class="line">IPADDR=192.168.1.22             <span class="comment">#需要做漂移的ip</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span>                        <span class="comment"># 开启自启动</span></span><br><span class="line">BOOTPROTO=none                    <span class="comment"># 静态地址分配</span></span><br><span class="line">BONDING_OPTS=<span class="string">"mode=active-backup miimon=100 primary=ens160"</span></span><br><span class="line"><span class="comment">#DNS1=</span></span><br><span class="line"><span class="comment">#DNS2=</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># BONDING_OPTS决定了 bonding 的模式 model=1(active-backup)表示是主备模式，mode=0表示为轮询模式</span></span><br><span class="line">&gt; <span class="comment"># miimon=100表示系统每100ms 监测一次链路连接状态，如果有一条线路不通就转入另一条线路</span></span><br><span class="line">&gt; <span class="comment"># primary=ens160 指定ens160为正常时为主节点、当ens160 down掉后才由ens256继承、ens160起来后还是由ens160来工作</span></span><br><span class="line">&gt; <span class="comment">#DNS需要就添加到最后</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、修改网卡的配置文件</span><br><span class="line"><span class="comment">#例如我这里将ens160和een256两个网卡加入到bond0里面去，就需要修改ens160和ens256的配置文件</span></span><br><span class="line">ens160设置：</span><br><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-ens160</span><br><span class="line">----------------------------------------------------</span><br><span class="line">DEVICE=<span class="string">"ens160"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">BOOTPROTO=<span class="string">"none"</span></span><br><span class="line">MASTER=<span class="string">"bond0"</span></span><br><span class="line">SLAVE=<span class="string">"yes"</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">ens256设置：</span><br><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-ens256</span><br><span class="line">----------------------------------------------------</span><br><span class="line">DEVICE=<span class="string">"ens256"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">BOOTPROTO=<span class="string">"none"</span></span><br><span class="line">MASTER=<span class="string">"bond0"</span></span><br><span class="line">SLAVE=<span class="string">"yes"</span></span><br><span class="line">-----------------------------------------------------</span><br><span class="line"></span><br><span class="line">3、重启网络管理服务</span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line">4、查看地址：ip a</span><br><span class="line">- 发现ens160和ens256网卡ip都没了（这样才是正常的）</span><br><span class="line">- 多出了一个 bond0</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[root@k8s-loadbalancer2 ~]<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens160: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:09:66:8f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: ens256: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:09:66:8f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: bond0: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:09:66:8f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.22/24 brd 192.168.1.255 scope global noprefixroute bond0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">5、查看bond0的详细信息：</span><br><span class="line">- <span class="built_in">cat</span> /proc/net/bonding/bond0</span><br><span class="line">- Primary Slave 指网卡正常时由ens160来当主</span><br><span class="line">- MII Status: up 说明网卡正常</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">[root@k8s-loadbalancer2 ~]<span class="comment"># cat /proc/net/bonding/bond0</span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: ens160 (primary_reselect always)</span><br><span class="line">Currently Active Slave: ens160</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 50</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens256</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:09:66:99</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens160</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:09:66:8f</span><br><span class="line">Slave queue ID: 0</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">6、测试</span><br><span class="line">- 此时当执行：ifdown ens160  时，ens256会接管ip（192.168.1.22）</span><br><span class="line">- 查看：/proc/net/bonding/bond0</span><br><span class="line">  - 此时是ens256来接管工作的</span><br><span class="line">- 再执行 ifup ens160 再查看，发现此时是ens160来接管ip工作了</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[root@k8s-loadbalancer2 ~]<span class="comment"># cat /proc/net/bonding/bond0</span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: ens256</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 50</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens256</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:09:66:99</span><br><span class="line">Slave queue ID: 0</span><br><span class="line">-------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><strong>注意：</strong>如果本机安装了keepalive等一些虚拟ip的话、可能会产生某个被keepalive绑定的网卡被指定一个ip（vip）、此时服务器上会产生 ARP 缓存、此时要手动清理：<br><strong>centos系统：</strong>sudo ip neigh flush all<br><strong>ubuntu系统：</strong>sudo arp -d -i ens160 192.168.1.250&nbsp;<br>清理完原来被keepalive绑定的网卡缓存后、将keepalive.conf配置文件中的 指定绑定的网卡改为：<strong>bond0</strong> 这个网卡即可</p>
</blockquote></div><div class="tab-item-content" id="bond-2"><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/heyongshen/p/16461235.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">参考</div>
            <div class="tag-link-sitename">bond</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></div><div class="tab-item-content" id="bond-3"><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1、查看当前系统网卡信息：在终端输入：ifconfig，可以看到当前系统存在ens33、ens36两块网卡</span><br><span class="line">2、创建bond虚拟网卡，命令如下：</span><br><span class="line"><span class="variable">$nmcli</span> connection add <span class="built_in">type</span> bond con-name bond1 ifname bond1 mode 1 ipv4.addresses 192.168.231.137/24 ipv4.method manual autoconnect <span class="built_in">yes</span></span><br><span class="line"><span class="comment">#type：创建的类型，选择bond类型</span></span><br><span class="line"><span class="comment">#con-name：链接名</span></span><br><span class="line"><span class="comment">#ifname：网卡名，这里bond1是虚拟出来的</span></span><br><span class="line"><span class="comment">#mode：bond模式，可用0-6表示</span></span><br><span class="line"><span class="comment">#ipv4.mehod：表示自动还是手动获取IP，manual代表手动，auto代表自动</span></span><br><span class="line"><span class="comment">#ipv4.address：设置IP地址</span></span><br><span class="line"><span class="comment">#autoconnext：是否开机自动连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、为bond网卡添加成员（真实网卡），命令：</span><br><span class="line"><span class="variable">$nmcli</span> connect add <span class="built_in">type</span> bond-slave ifname ens33 master bond1     </span><br><span class="line"><span class="variable">$nmcli</span> connect add <span class="built_in">type</span> bond-slave ifname ens37 master bond1</span><br><span class="line"><span class="comment">#生成网卡文件：ifcfg-bond-slave-ens33、ifcfg-bond-slave-ens36</span></span><br><span class="line"><span class="comment">#类型为bond-slave，表示这块真实网卡属于一块附属的网卡，原有配置的属性都不能使用了</span></span><br><span class="line"><span class="comment">#master：表示这块网卡属于bond1这个组</span></span><br><span class="line"></span><br><span class="line">4、添加完成之后，命令：nmcli connect 查询新添加的附属网卡是否启用，如未启用，需要用命令进行启用</span><br><span class="line"><span class="variable">$nmcli</span> connect</span><br><span class="line">NAME              UUID                                  TYPE      DEVICE</span><br><span class="line">bond1             ef494df9-6855-49a3-92b0-3f5f9b11f9e4  bond      bond1</span><br><span class="line">bond-slave-ens33  cfccec17-01d8-48f8-91a6-e268e7c5c4a4  ethernet  ens33</span><br><span class="line">bond-slave-ens36  40cd6eac-810d-489d-8557-482b2239cc84  ethernet  ens36</span><br><span class="line">ens33             7c0dd8e6-4308-4ac5-8841-32fb10b376a2  ethernet  --</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、启动网卡：</span><br><span class="line"><span class="variable">$nmcli</span> connect up bond-slave-ens33</span><br><span class="line"><span class="variable">$nmcli</span> connect up bond-slave-ens36</span><br><span class="line"></span><br><span class="line">6、查看链接信息并进行测试</span><br><span class="line"><span class="variable">$cat</span>  /proc/net/bonding/bond1</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup) (fail_over_mac active)</span><br><span class="line">Primary Slave: ens33 (primary_reselect always)</span><br><span class="line">Currently Active Slave: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens36</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:b3:77:46</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:b3:77:3c</span><br><span class="line">Slave queue ID: 0</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">7、测试：使用命令禁用正在使用的bond-slave-ens33网卡，找一台其他主机使用ping进行测试即可</span><br><span class="line"><span class="variable">$nmcli</span> connection down bond-slave-ens33</span><br><span class="line"></span><br><span class="line">8、常见问题</span><br><span class="line">使用虚拟机进行测试时，可能会发现禁用网卡后无法ping通的问题，这时需要在bond1的虚拟网卡配置文件中添加如下参数即可</span><br><span class="line"><span class="comment">#进入bond1配置文件</span></span><br><span class="line"><span class="variable">$vim</span> /etc/sysconfig/network-scripts/ifcfg-bond1</span><br><span class="line"><span class="comment">#添加一行</span></span><br><span class="line">BONDING_OPTS=<span class="string">"miimon=100 mode=1 fail_over_mac=1"</span></span><br><span class="line"><span class="comment">#miimon：链路检查时间100ms</span></span><br><span class="line"><span class="comment">#mode ：模式为1，要与bond模式相同</span></span><br><span class="line"><span class="comment">#fail_over_mac=1 ：mac地址跟随正常工作的网卡，当第一块网卡挂掉之后，自动将mac地址调整为第二块网卡的mac</span></span><br><span class="line"></span><br><span class="line">9、删除网卡信息</span><br><span class="line"><span class="variable">$nmcli</span> connect delete bond1 bond-slave-ens33 bond-slave-ens37</span><br><span class="line"></span><br><span class="line">10、如果修改配置就需要重启：</span><br><span class="line"><span class="variable">$sudo</span> systemctl restart NetworkManager</span><br><span class="line"><span class="variable">$sudo</span> systemctl restart network</span><br></pre></td></tr></tbody></table></figure>
<p><mark class="hl-label red">网卡的完整配置</mark> </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ifcfg-bond1</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">BONDING_OPTS=mode=active-backup</span><br><span class="line">TYPE=Bond</span><br><span class="line">BONDING_MASTER=<span class="built_in">yes</span></span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">IPADDR=192.168.177.201</span><br><span class="line">PREFIX=24</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=bond0</span><br><span class="line">UUID=ef494df9-6855-49a3-92b0-3f5f9b11f9e4</span><br><span class="line">DEVICE=bond0</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BONDING_OPTS=<span class="string">"mode=1 miimon=100 primary=ens33 primary_reselect=always fail_over_mac=1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#primary=ens33 指定主网卡</span></span><br><span class="line"><span class="comment">#mode=1 表示 active-backup 模式。</span></span><br><span class="line"><span class="comment">#miimon=100 检测时间</span></span><br><span class="line"><span class="comment">#primary_reselect=always：指示 Bonding 驱动程序总是 重新 选择主网卡。确保在主网卡出现故障或重新连接时自动切换</span></span><br><span class="line"><span class="comment">#fail_over_mac=1 ：mac地址跟随正常工作的网卡，当第一块网卡挂掉之后，自动将mac地址调整为第二块网卡的mac</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">ifcfg-bond-slave-ens33</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">NAME=bond-slave-ens33</span><br><span class="line">UUID=cfccec17-01d8-48f8-91a6-e268e7c5c4a4</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">ifcfg-bond-slave-ens36</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">NAME=bond-slave-ens36</span><br><span class="line">UUID=cfccec17-01d8-48f8-91a6-e268e7c5c4a4</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux, 网络, bond</tag>
      </tags>
  </entry>
  <entry>
    <title>linux路由表详解-追踪路由</title>
    <url>/looking/996ca674.html</url>
    <content><![CDATA[
    <p class="centered-text">linux 路由表详解</p>



<h1 id="通过-route-命令查看-Linux-内核的路由表："><a href="#通过-route-命令查看-Linux-内核的路由表：" class="headerlink" title="通过 route 命令查看 Linux 内核的路由表："></a><code>通过 route 命令查看 Linux 内核的路由表：</code></h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$route</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         _gateway        0.0.0.0         UG    0      0        0 p5p1</span><br><span class="line">default         _gateway        0.0.0.0         UG    100    0        0 em1</span><br><span class="line">10.150.0.0      10.150.54.126   255.255.0.0     UG    0      0        0 em2</span><br><span class="line">10.150.54.0     0.0.0.0         255.255.255.128 U     0      0        0 em2</span><br><span class="line">link-local      0.0.0.0         255.255.0.0     U     1002   0        0 p5p1</span><br><span class="line">link-local      0.0.0.0         255.255.0.0     U     1004   0        0 em1</span><br><span class="line">link-local      0.0.0.0         255.255.0.0     U     1005   0        0 em2</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line">172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-de7a849d77f1</span><br><span class="line">172.19.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-9bc222159381</span><br><span class="line">172.24.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-2d803453c335</span><br><span class="line">172.33.1.0      _gateway        255.255.255.0   UG    0      0        0 em1</span><br><span class="line">172.33.9.0      0.0.0.0         255.255.255.0   U     100    0        0 em1</span><br><span class="line">172.33.137.0    0.0.0.0         255.255.255.0   U     0      0        0 p5p1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$route</span> -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.11.120.254  0.0.0.0         UG    0      0        0 p5p1</span><br><span class="line">0.0.0.0         172.32.8.254    0.0.0.0         UG    100    0        0 em1</span><br><span class="line">10.150.0.0      10.150.54.126   255.255.0.0     UG    0      0        0 em2</span><br><span class="line">10.150.54.0     0.0.0.0         255.255.255.128 U     0      0        0 em2</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 p5p1</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1004   0        0 em1</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1005   0        0 em2</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line">172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-de7a849d77f1</span><br><span class="line">172.19.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-9bc222159381</span><br><span class="line">172.24.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-2d803453c335</span><br><span class="line">172.33.1.0      172.32.8.254    255.255.255.0   UG    0      0        0 em1</span><br><span class="line">172.33.9.0      0.0.0.0         255.255.255.0   U     100    0        0 em1</span><br><span class="line">172.33.137.0    0.0.0.0         255.255.255.0   U     0      0        0 p5p1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="各列字段说明："><a href="#各列字段说明：" class="headerlink" title="各列字段说明："></a><code>各列字段说明：</code></h2><table>
<thead>
<tr>
<th>列</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Destination</td>
<td>目标网络网关或目标主机。Destination 为 default（<code>0.0.0.0</code>）时，表示这个是默认网关，所有数据都发到这个网关（这里是<code>172.11.120.254</code>和<code>172.32.8.254</code>）</td>
</tr>
<tr>
<td>Gateway</td>
<td>本机的网关地址，<code>0.0.0.0</code> 表示当前记录对应的 Destination 跟本机在同一个网段，通信时不需要经过网关；如不在同一个网段，可借助相关路由跳过去，如这里借助<code>10.150.54.126</code>网关跳到<code>10.150.0.0</code> 段的网络</td>
</tr>
<tr>
<td>Genmask</td>
<td>目标网络(Destination) 字段的网络掩码，Destination 是主机时需要设置为 255.255.255.255，是默认路由时会设置为 0.0.0.0</td>
</tr>
<tr>
<td>Flags</td>
<td>标记，含义参考表格后面的解释</td>
</tr>
<tr>
<td>Metric</td>
<td>路由距离，到达指定网络所需的中转数，是大型局域网和广域网设置所必需的 （不在Linux内核中使用。）</td>
</tr>
<tr>
<td>Ref</td>
<td>路由项引用次数 （不在Linux内核中使用。）</td>
</tr>
<tr>
<td>Use</td>
<td>此路由项被路由软件查找的次数</td>
</tr>
<tr>
<td>Iface</td>
<td>网卡名字，例如 <code>em1</code></td>
</tr>
</tbody></table>
<p><code>Flags 含义：</code></p>
<blockquote>
<p>U 路由是活动的<br>H 目标是个主机<br>G 需要经过网关<br>R 恢复动态路由产生的表项<br>D 由路由的后台程序动态地安装<br>M 由路由的后台程序修改<br>! 拒绝路由</p>
</blockquote>
<p><code>如何看这个路由表：</code></p>
<blockquote>
<p>从右往左看：比如第三行： <code>10.150.0.0 | 10.150.54.126  | 255.255.0.0   |  UG |   0   |   0    |  0 | em2</code><br>流量数据从本机的网卡<code>em2</code>出去到(交换机)网关<code>10.150.54.126</code>，借助这个网关将数据送往目标网络地址(网关)<code>10.150.0.0</code><br>其中要明确地址<code>10.150.54.126</code> 与 <code>10.150.0.0</code> 是能通讯的、否则流量是过不去的</p>
</blockquote>
<h2 id="ip-route-show查看"><a href="#ip-route-show查看" class="headerlink" title="ip route show查看"></a><code>ip route show查看</code></h2><blockquote>
<p>“ip route show” 是 Linux 中的命令，用于显示计算机上的路由表。路由表记录了计算机如何将数据包发送到网络中的其他计算机</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$ip</span> route show</span><br><span class="line">default via 172.33.137.254 dev p5p1</span><br><span class="line">default via 172.33.9.254 dev em1 proto static metric 100</span><br><span class="line">10.150.0.0/16 via 10.150.54.126 dev em2</span><br><span class="line">10.15.54.0/25 dev em2 proto kernel scope <span class="built_in">link</span> src 10.15.54.10</span><br><span class="line">169.254.0.0/16 dev p5p1 scope <span class="built_in">link</span> metric 1002</span><br><span class="line">172.3.1.0/24 via 172.13.9.254 dev em1</span><br><span class="line">172.3.1.0/24 dev em1 proto kernel scope <span class="built_in">link</span> src 172.3.1.12 metric 100</span><br><span class="line">172.2.136.0/24 dev p5p1 proto kernel scope <span class="built_in">link</span> src 172.2.136.12</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>上面路由记录的格式通常都是这样的：<br>&lt;目的地&gt; via &lt;网关&gt; dev &lt;接口网卡&gt; proto &lt;协议&gt; src &lt;源地址或本机地址&gt; &lt;附加信息&gt;</p>
</blockquote>
<table>
<thead>
<tr>
<th>列</th>
<th>解析</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;目的地&gt;</td>
<td><code>目的地网络网关或主机</code>，可以是具体的 IP 地址（如 <code>10.15.54.50</code>）、网络地址 （如<code>10.15.54.0/25</code>）或 default 等。default 会在没有其他符合的路由条目时使用；</td>
</tr>
<tr>
<td>via &lt;网关&gt;</td>
<td>可选字段，指的是到达<code>目的地址</code>需要使用的<code>网关的 IP 地址</code>。<code>发往</code>这个路由条目对应的目的地的数据包，都会把这个<code>网关设置为下一跳</code>，经由此<code>&lt;via&gt;</code>发往最终目的地；比如：<code>em1</code>网卡 通过 网关<code>via 172.13.9.254</code>跳到 <code>172.3.1.0/24</code>网段 ，这样就实现了不同网段之间的通信</td>
</tr>
<tr>
<td>dev &lt;接口网卡&gt;</td>
<td>要发往本条目对应目的地时所需要使用的网络接口（设备网卡）；</td>
</tr>
<tr>
<td>proto &lt;协议&gt;</td>
<td>添加本条条目的协议。常见的值有：<code>kernel</code>（本条目由内核添加）、<code>static</code>（手动添加）、<code>dhcp</code>（通过 DHCP 添加）、<code>boot</code> （在启动时添加）、<code>redirect</code> （由 ICMP 重定向添加）。此外，该值还可以是 <code>bgp</code>、<code>ospf</code> 这类动态路由协议。该值可能是整数值或者一个字符串值，字符串值都可以在 <code>/etc/iproute2/rt_protos</code> 中找到；</td>
</tr>
<tr>
<td>src &lt;源地址&gt;</td>
<td>在使用本条路由，向目的地发送数据包时所需采用的 IP 地址；</td>
</tr>
<tr>
<td>&lt;附加信息&gt;</td>
<td>代表多个可选项，常见的有：见下面</td>
</tr>
</tbody></table>
<blockquote>
<p>&lt;附加信息&gt;：</p>
<ul>
<li>scope <scope>：定义这条路由的范围:<ul>
<li><code>global</code> 表示有网关的单播（unicast）路由</li>
<li><code>link</code> 表示直连的单播或广播（broadcast）路由</li>
<li><code>host</code> 表示本地（local）路由。该值可能是一个整数值或者是字符串值，字符串值应该能在 <code>/etc/iproute2/rt_scopes</code> 中找到</li>
</ul>
</scope></li>
<li>metric &lt;整数&gt;：表示路由的优先级，数字越小优先级越高。<code>最小值为 0</code> ，<code>最大值为 65535</code></li>
<li>table &lt;表名/数字&gt;：如果一条路由不属于 main 表，则会在这里指出该路由所属的路由表</li>
</ul>
</blockquote>
<hr>
<hr>
<h2 id="路由追踪：traceroute"><a href="#路由追踪：traceroute" class="headerlink" title="路由追踪：traceroute <ip地址>"></a>路由追踪：traceroute &lt;ip地址&gt;</h2><blockquote>
<p>该命令用于显示数据包到主机间的路径。</p>
</blockquote>
<p><code>使用详解：</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$traceroute</span> xiaoxin123.top</span><br><span class="line"></span><br><span class="line">traceroute to xiaoxin123.top (198.181.38.205), 30 hops max, 60 byte packets</span><br><span class="line"> 1  10.124.224.22 (10.124.224.22)  1.228 ms 11.63.120.22 (11.63.120.22)  0.990 ms 11.63.116.22 (11.63.116.22)  0.871 ms</span><br><span class="line"> 2  11.63.116.121 (11.63.116.121)  1.287 ms 11.63.116.77 (11.63.116.77)  1.233 ms 11.63.116.117 (11.63.116.117)  1.267 ms</span><br><span class="line"> 3  11.48.239.69 (11.48.239.69)  0.929 ms 11.88.168.21 (11.88.168.21)  5.739 ms 11.48.239.117 (11.48.239.117)  0.909 ms</span><br><span class="line"> 4  45.112.220.37 (45.112.220.37)  1.256 ms 45.112.220.25 (45.112.220.25)  1.291 ms 45.112.220.77 (45.112.220.77)  1.971 ms</span><br><span class="line"> 5  157.119.193.86 (157.119.193.86)  10.308 ms 117.49.54.74 (117.49.54.74)  35.224 ms 117.49.54.102 (117.49.54.102)  8.936 ms</span><br><span class="line"> 6  11.94.143.102 (11.94.143.102)  9.224 ms  7.991 ms 117.49.37.246 (117.49.37.246)  7.707 ms</span><br><span class="line"> 7  * * *</span><br><span class="line"> 8  183.2.182.113 (183.2.182.113)  10.336 ms  9.631 ms 58.61.162.161 (58.61.162.161)  7.523 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字（第几条）   ip（当前跳的所在地址）   三个时间（RTT，也就是往返时延）</span></span><br><span class="line"><span class="comment"># 显示* * * 的情况 ：</span></span><br><span class="line">  &gt; 可能是路由器禁止了ICMP数据包</span><br><span class="line">  &gt;如果从某跳开始所有的时间都成了星号，即超时，则网络故障很有可能就出现在了这一跳</span><br></pre></td></tr></tbody></table></figure>
<p><code>相关命令参数:</code></p>
<blockquote>
<p>traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]<br>-d 使用Socket层级的排错功能。<br>-f&lt;存活数值&gt; 设置第一个检测数据包的存活数值TTL的大小。<br>-F 设置勿离断位。<br>-g&lt;网关&gt; 设置来源路由网关，最多可设置8个。<br>-i&lt;网络界面&gt; 使用指定的网络界面送出数据包。<br>-I 使用ICMP回应取代UDP资料信息。<br>-m&lt;存活数值&gt; 设置检测数据包的最大存活数值TTL的大小。<br>-n 直接使用IP地址而非主机名称。<br>-p&lt;通信端口&gt; 设置UDP传输协议的通信端口。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br>-s&lt;来源地址&gt; 设置本地主机送出数据包的IP地址。<br>-t&lt;服务类型&gt; 设置检测数据包的TOS数值。<br>-v 详细显示指令的执行过程。<br>-w&lt;超时秒数&gt; 设置等待远端主机回报的时间。<br>-x 开启或关闭数据包的正确性检验。</p>
</blockquote>
<hr>
<h2 id="简化的路由追踪命令-tracepath"><a href="#简化的路由追踪命令-tracepath" class="headerlink" title="简化的路由追踪命令: tracepath "></a>简化的路由追踪命令: tracepath <ip></ip></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$tracepath</span> xiaoxin123.top</span><br><span class="line"> 1?: [LOCALHOST]                                         pmtu 1500</span><br><span class="line"> 1:  10.124.224.22                                         0.844ms</span><br><span class="line"> 1:  10.124.224.22                                         0.767ms</span><br><span class="line"> 2:  11.63.116.117                                         1.122ms</span><br><span class="line"> 3:  11.48.239.125                                         1.124ms</span><br><span class="line"> 4:  45.112.220.37                                         1.194ms</span><br><span class="line"> 5:  117.49.54.50                                          6.602ms</span><br><span class="line"> 6:  117.49.37.250                                         7.319ms</span><br><span class="line"> 7:  no reply</span><br><span class="line"> 8:  183.2.182.125                                        14.588ms asymm  7</span><br><span class="line">Resume: pmtu 1500 hops 16 back 16</span><br></pre></td></tr></tbody></table></figure>
<p><code>相关命令参数：</code></p>
<blockquote>
<p>用法及参数<br>-n 显示IP，不显示主机<br>-l 初始化包的长度，默认65535<br>-b 打印主机名以及IP信息<br>-p 指定端口<br>-m 设置最大的跳跃节点数，默认是30</p>
</blockquote>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><code>arp</code></p>
<blockquote>
<ol>
<li>ARP 代表“地址解析协议”，是一种用于将 IP 地址映射到局域网上的物理 MAC 地址的协议<br>ARP（地址解析协议）是一种网络协议，用于从 <code>IP</code> 地址中找出设备的<code>硬件 (MAC) 地址</code>。</li>
<li>当设备想要与本地网络上的其他设备通信时使用它，发送设备使用 <code>ARP</code> 将 IP 地址转换为 MAC 地址。</li>
<li>设备发送一个 ARP 请求消息，其中包含接收设备的 IP 地址。 本地网段上的所有设备都会看到该消息，但只有具有该 IP 地址的设备会使用包含其 MAC 地址的 ARP 回复消息进行响应。 发送设备现在有足够的信息将数据包发送到接收设备。</li>
</ol>
</blockquote>
<p><code>ARP过程的解释：</code></p>
<blockquote>
<p>假设主机 A 想与主机 B 通信。主机 A 知道主机 B 的 IP 地址，但不知道主机 B 的 MAC 地址。为了找出主机B的MAC地址，主机A发送一个ARP请求，列出主机B的IP地址作为目的IP地址，MAC地址为FF:FF:FF:FF:FF:FF（以太网广播） .交换机会将帧转发到所有接口。<br>网段上的每个设备都会收到该数据包，但由于目标 IP 地址是主机 B 的 IP 地址，因此只有主机 B 会回复 ARP 回复数据包，并列出其 MAC 地址。</p>
</blockquote>
<p><code>Linux中的arp命令是什么</code></p>
<blockquote>
<p>ARP 代表“地址解析协议”，是一种用于将 IP 地址映射到局域网上的物理 MAC 地址的协议。</p>
</blockquote>
<h3 id="arp常用命令"><a href="#arp常用命令" class="headerlink" title="arp常用命令"></a>arp常用命令</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查看 Linux 上的 ARP 表</span></span><br><span class="line">arp -a</span><br><span class="line"><span class="comment">#输出：第一列是IP地址，第二列对应MAC地址。</span></span><br><span class="line">gateway (172.16.31.253) at ee:ff:ff:ff:ff:se [ether] on eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 指定 IP 地址来查找特定 IP 地址的 ARP 缓存条目</span></span><br><span class="line">arp -a &lt;IP地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 删除arp表中指定的 IP 地址</span></span><br><span class="line">arp -d 192.168.67.23</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 删除所有</span></span><br><span class="line">arp -d *</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 添加静态条目将IP地址解析为物理地址</span></span><br><span class="line">arp -s 192.168.67.15 00-a5-00-34-c3-09</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux, 网络</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx常用配置</title>
    <url>/looking/1e3b64b9.html</url>
    <content><![CDATA[<p class="p center logo large">Nginx</p>
<p class="p center small">nginx常用配置</p>

<mark class="hl-label green">nginx常用命令</mark> 
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nginx -s reload  <span class="comment"># 向主进程发送信号，重新加载配置文件，热重启</span></span><br><span class="line">nginx -s reopen   <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop    <span class="comment"># 快速关闭</span></span><br><span class="line">nginx -s quit    <span class="comment"># 等待工作进程处理完成后关闭</span></span><br><span class="line">nginx -T         <span class="comment"># 查看当前 Nginx 最终的配置</span></span><br><span class="line">nginx -t         <span class="comment"># 检查配置文件是否有问题</span></span><br></pre></td></tr></tbody></table></figure>

<div class="note green no-icon flat"><p>Nginx核心配置</p>
</div>
<mark class="hl-label green">nginx.conf配置文件结构</mark> 
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># main段配置信息</span></span><br><span class="line">user  nginx;                        <span class="comment"># 运行用户，默认即是nginx，可以不进行设置</span></span><br><span class="line">worker_processes  auto;             <span class="comment"># Nginx 进程数，一般设置为和 CPU 核数一样</span></span><br><span class="line">error_log  /var/log/nginx/error.log warn;   <span class="comment"># Nginx 的错误日志存放目录</span></span><br><span class="line">pid        /var/run/nginx.pid;      <span class="comment"># Nginx 服务启动时的 pid 存放位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># events段配置信息</span></span><br><span class="line">events {</span><br><span class="line">    use epoll;     <span class="comment"># 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span></span><br><span class="line">    worker_connections 1024;   <span class="comment"># 每个进程允许最大并发数</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># http段配置信息</span></span><br><span class="line"><span class="comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span></span><br><span class="line">http { </span><br><span class="line">    <span class="comment"># 设置日志模式</span></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;   <span class="comment"># Nginx访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">    sendfile            on;   <span class="comment"># 开启高效传输模式</span></span><br><span class="line">    tcp_nopush          on;   <span class="comment"># 减少网络报文段的数量</span></span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;   <span class="comment"># 保持连接的时间，也叫超时时间，单位秒</span></span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;      <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">    default_type        application/octet-stream;   <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;   <span class="comment"># 加载子配置项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 负载均衡配置信息</span></span><br><span class="line">    upstream httpnz {</span><br><span class="line">        server 192.168.66.1 weight=1 down;  <span class="comment">#weight权重，默认为1，down表示不可用</span></span><br><span class="line">        server 192.168.66.2 weight=5 backup;    <span class="comment">#backup表示备用</span></span><br><span class="line">        server 192.168.66.3 weight=10;  <span class="comment"># weight权重，默认为1</span></span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># server段配置信息</span></span><br><span class="line">    server {</span><br><span class="line">      listen       80;       <span class="comment"># 配置监听的端口</span></span><br><span class="line">      server_name  localhost;    <span class="comment"># 配置的域名</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># location段配置信息</span></span><br><span class="line">      location / {</span><br><span class="line">        root   /usr/share/nginx/html;  <span class="comment"># 网站根目录</span></span><br><span class="line">        index  index.html index.htm;   <span class="comment"># 默认首页文件</span></span><br><span class="line">        deny 172.168.22.11;   <span class="comment"># 禁止访问的ip地址，可以为all</span></span><br><span class="line">        allow 172.168.33.44；<span class="comment"># 允许访问的ip地址，可以为all</span></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      location /api {</span><br><span class="line">        proxy_pass http://httpnz;</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">      error_page 500 502 503 504 /50x.html;  <span class="comment"># 默认50x对应的访问页面</span></span><br><span class="line">      error_page 400 404 error.html;   <span class="comment"># 同上</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>配置文件解析:<br>main 全局配置，对全局生效；<br>events 配置影响 Nginx 服务器与用户的网络连接；<br>http 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置；<br>server 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块；<br>location 用于配置匹配的 uri ；<br>upstream 配置后端服务器具体地址，负载均衡配置不可或缺的部分；</p>
</blockquote>
<mark class="hl-label default">用一张图清晰的展示它的层级结构：</mark> 
<details class="folding-tag"><summary> nginx层级结构图 </summary>
              <div class="content">
              <p><img src="https://pic.imgdb.cn/item/66876026d9c307b7e92c6ae2.png" alt="nginx层级架构"></p>
              </div>
            </details>

<mark class="hl-label red">nginx.conf配置文件的语法规则</mark> 
<blockquote>
<p>配置文件由指令与指令块构成<br>每条指令以 “;” 分号结尾，指令与参数间以空格符号分隔<br>指令块以 {} 大括号将多条指令组织在一起<br>include 语句允许组合多个配置文件以提升可维护性<br>通过 # 符号添加注释，提高可读性<br>通过 $ 符号使用变量<br>部分指令的参数支持正则表达式，例如常用的 location指令</p>
</blockquote>
<mark class="hl-label default">配置文件main段核心参数</mark> 
<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>user</p>
            </div>
<blockquote>
<p>指定运行 Nginx 的 woker 子进程的属主和属组，其中组可以不指定。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#语法：user USERNAME [GROUP]</span></span><br><span class="line"><span class="attribute">user</span> nginx lion; <span class="comment"># 用户是nginx;组是lion</span></span><br></pre></td></tr></tbody></table></figure>
<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>pid</p>
            </div>
<blockquote>
<p>指定运行 Nginx master 主进程的 pid 文件存放路径。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">pid</span> /opt/nginx/logs/nginx.pid <span class="comment"># master主进程的的pid存放在nginx.pid的文件</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_rlimit_nofile_number</p>
            </div>
<blockquote>
<p>指定worker子进程可以打开的最大文件句柄数。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">20480</span>; <span class="comment"># 可以理解成每个worker子进程的最大连接数量。</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_rlimit_core</p>
            </div>
<blockquote>
<p>指定worker子进程可以产生最大core文件大小。用于记录分析问题。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_rlimit_core</span> <span class="number">50M</span>; <span class="comment"># 存放大小限制</span></span><br><span class="line"><span class="attribute">working_directory</span> /opt/nginx/tmp; <span class="comment"># 存放目录</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_processes_number</p>
            </div>
<blockquote>
<p>指定 Nginx 启动的 worker 子进程数量。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>; <span class="comment"># 指定具体子进程数量</span></span><br><span class="line"><span class="attribute">worker_processes</span> auto; <span class="comment"># 与当前cpu物理核心数一致</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_cpu_affinity</p>
            </div>
<blockquote>
<p>将每个 worker 子进程与我们的 cpu 物理核心绑定。<br>将每个 worker 子进程与特定 CPU 物理核心绑定，优势在于，避免同一个 worker 子进程在不同的 CPU 核心上切换，缓存失效，降低性能。但其并不能真正的避免进程切换。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">0001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1000</span>; <span class="comment"># 4个物理核心，4个worker子进程</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_priority</p>
            </div>
<blockquote>
<p>指定 worker 子进程的 nice 值，以调整运行 Nginx 的优先级，通常设定为负值，以优先调用 Nginx 。<br>Linux 默认进程的优先级值是120，值越小越优先；nice 值范围为 -20 到 +19 。</p>
<blockquote>
<p><strong>备注：</strong>应用的默认优先级值是120加上 nice 值等于它最终的值，这个值越小，优先级越高。</p>
</blockquote>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_priority</span> -<span class="number">10</span>; <span class="comment"># 120-10=110，110就是最终的优先级</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>worker_shutdown_timeout</p>
            </div>
<blockquote>
<p>指定 worker 子进程优雅退出时的超时时间。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_shutdown_timeout</span> <span class="number">5s</span>;</span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>timer_resolution</p>
            </div>
<blockquote>
<p>worker 子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性能提升；反之，系统调用越多，性能下降<br>在 Linux 系统中，用户需要获取计时器时需要向操作系统内核发送请求，有请求就必然会有开销，因此这个间隔越大开销就越小。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">timer_resolution</span> 100ms;</span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox green checked"><input type="checkbox" checked="checked">
            <p>daemon</p>
            </div>
<blockquote>
<p>指定 Nginx 的运行方式，前台还是后台，前台用于调试，后台用于生产。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">daemon</span> <span class="literal">off</span>; <span class="comment"># 默认是on，后台运行模式</span></span><br></pre></td></tr></tbody></table></figure>

<mark class="hl-label green">配置文件events段核心参数</mark> 
<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>use</p>
            </div>
<blockquote>
<p>Nginx 使用何种事件驱动模型。<br>method 可选值为：select、poll、kqueue、epoll、/dev/poll、eventport</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">use</span> method; <span class="comment"># 不推荐配置它，让nginx自己选择</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>worker_connections</p>
            </div>
<blockquote>
<p>worker 子进程能够处理的最大并发连接数。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span> <span class="comment"># 每个子进程的最大连接数为1024</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>accept_mutex</p>
            </div>
<blockquote>
<p>是否打开负载均衡互斥锁</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">accept_mutex</span> <span class="literal">on</span> <span class="comment"># 默认是off关闭的，这里推荐打开</span></span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>server_name指令</p>
            </div>
<blockquote>
<p>指定虚拟主机域名<br>域名匹配的四种写法：</p>
<blockquote>
<p>精确匹配：server_name <a href="http://www.nginx.com/">http://www.nginx.com</a> ;<br>左侧通配：server_name <em>.<a href="http://nginx.com/">http://nginx.com</a> ;<br>右侧统配：server_name <a href="http://www.nginx/">www.nginx</a>.</em> ;<br>正则匹配：server_name ~^www.nginx.*$ ;<br>匹配优先级：精确匹配 &gt; 左侧通配符匹配 &gt; 右侧通配符匹配 &gt; 正则表达式匹配</p>
</blockquote>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#语法：server_name name1 name2 name3</span></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="attribute">server_name</span> www.nginx.com;</span><br></pre></td></tr></tbody></table></figure>
<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>server_name配置实例：</p>
            </div>
<div class="checkbox plus green checked"><input type="checkbox" checked="checked">
            <p>/etc/nginx/nginx.conf</p>
            </div>
<div class="tabs" id="server_name配置实例"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="server_name配置实例-1">域名左匹配</button><button type="button" class="tab " data-href="server_name配置实例-2">域名右匹配</button><button type="button" class="tab " data-href="server_name配置实例-3">正则匹配</button><button type="button" class="tab " data-href="server_name配置实例-4">域名精确匹配</button><button type="button" class="tab " data-href="server_name配置实例-5">访问分析</button></ul><div class="tab-contents"><div class="tab-item-content active" id="server_name配置实例-1"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  <span class="regexp">*.nginx-test.com</span>;</span><br><span class="line">  <span class="attribute">root</span>  /usr/share/nginx/html/nginx-test/left-match/;</span><br><span class="line">  <span class="section">location</span> / {</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="server_name配置实例-2"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  <span class="regexp">www.nginx-test.*</span>;</span><br><span class="line">  <span class="attribute">root</span>  /usr/share/nginx/html/nginx-test/right-match/;</span><br><span class="line">  <span class="section">location</span> / {</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="server_name配置实例-3"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  ~^.*\.nginx-test\..*$;</span><br><span class="line">  <span class="attribute">root</span>  /usr/share/nginx/html/nginx-test/reg-match/;</span><br><span class="line">  <span class="section">location</span> / {</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="server_name配置实例-4"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  www.nginx-test.com;</span><br><span class="line">  <span class="attribute">root</span>  /usr/share/nginx/html/nginx-test/all-match/;</span><br><span class="line">  <span class="section">location</span> / {</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="server_name配置实例-5"><blockquote>
<p>当访问 <a href="http://www.nginx-test.com/">http://www.nginx-test.com</a> 时，都可以被匹配上，因此选择优先级最高的“完全匹配”；<br>当访问 <a href="http://mail.nginx-test.com/">http://mail.nginx-test.com</a> 时，会进行“左匹配”；<br>当访问 <a href="http://www.nginx-test.org/">http://www.nginx-test.org</a> 时，会进行“右匹配”；<br>当访问 <a href="http://doc.nginx-test.com/">http://doc.nginx-test.com</a> 时，会进行“左匹配”；<br>当访问 <a href="http://www.nginx-test.cn/">http://www.nginx-test.cn</a> 时，会进行“右匹配”；<br>当访问 fe.nginx-test.club 时，会进行“正则匹配”；</p>
</blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>


<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>指定静态资源目录位置</p>
            </div>
<div class="tabs" id="指定静态资源目录位置"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="指定静态资源目录位置-1">root</button><button type="button" class="tab " data-href="指定静态资源目录位置-2">alias</button></ul><div class="tab-contents"><div class="tab-item-content active" id="指定静态资源目录位置-1"><blockquote>
<p>指定静态资源目录位置，它可以写在 http 、 server 、 location 等配置中。<br>#当用户访问 <a href="http://www.test.com/image/1.png">www.test.com/image/1.png</a> 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#root path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /image {</span><br><span class="line">  <span class="attribute">root</span> /opt/nginx/static;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="指定静态资源目录位置-2"><blockquote>
<p>它也是指定静态资源目录位置，它只能写在 location 中。<br>#当用户访问 <a href="http://www.test.com/image/1.png">www.test.com/image/1.png</a> 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">location</span> /image {</span><br><span class="line">  <span class="attribute">alias</span> /opt/nginx/static/image/;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
<div class="note warning simple"><p>注意：root 会将定义路径与 URI 叠加， alias 则只取定义路径。</p>
</div>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>location块</p>
            </div>
<div class="tabs" id="location块"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="location块-1">配置路径</button><button type="button" class="tab " data-href="location块-2">匹配规则</button><button type="button" class="tab " data-href="location块-3">实例</button><button type="button" class="tab " data-href="location块-4">location中的反斜线</button></ul><div class="tab-contents"><div class="tab-item-content active" id="location块-1"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ] uri {</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="location块-2"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line">= 精确匹配；</span><br><span class="line">~ 正则匹配，区分大小写；</span><br><span class="line">~* 正则匹配，不区分大小写；</span><br><span class="line">^~ 匹配到即停止搜索；</span><br><span class="line">匹配优先级：=  &gt; ^~  &gt; ~  &gt; ~*  &gt; 不带任何字符。</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="location块-3"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  www.nginx-test.com;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 只有当访问 www.nginx-test.com/match_all/ 时才会匹配到/usr/share/nginx/html/match_all/index.html</span></span><br><span class="line">  <span class="section">location</span> = /match_all/ {</span><br><span class="line">      <span class="attribute">root</span>  /usr/share/nginx/html</span><br><span class="line">      index index.html</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 当访问 www.nginx-test.com/1.jpg 等路径时会去 /usr/share/nginx/images/1.jpg 找对应的资源</span></span><br><span class="line">  location <span class="regexp">~ \.(jpeg|jpg|png|svg)$</span> {</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/images;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 当访问 www.nginx-test.com/bbs/ 时会匹配上 /usr/share/nginx/html/bbs/index.html</span></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~</span> /bbs/ {</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="location块-4"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">location</span> /test {</span><br><span class="line">  ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /test/ {</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>不带 / 当访问 <a href="http://www.nginx-test.com/test">http://www.nginx-test.com/test</a> 时， Nginx 先找是否有 test 目录，如果有则找 test 目录下的 index.html ；如果没有 test 目录， nginx  则会找是否有 test 文件。</p>
</blockquote>
<blockquote>
<p>带 / 当访问 <a href="http://www.nginx-test.com/test">http://www.nginx-test.com/test</a> 时， Nginx 先找是否有 test 目录，如果有则找 test 目录下的 index.html ，如果没有它也不会去找是否存在 test 文件。</p>
</blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>return</p>
            </div>
<blockquote>
<p>停止处理请求，直接返回响应码或重定向到其他 URL ；执行 return 指令后， location 中后续指令将不会被执行。</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#return code [text];</span></span><br><span class="line"><span class="comment">#return code URL;</span></span><br><span class="line"><span class="comment">#return URL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">return</span> <span class="number">404</span>; <span class="comment"># 直接返回状态码</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">return</span> <span class="number">404</span> <span class="string">"pages not found"</span>; <span class="comment"># 返回状态码 + 一段文本</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">return</span> <span class="number">302</span> /bbs ; <span class="comment"># 返回状态码 + 重定向地址</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">return</span> https://www.baidu.com ; <span class="comment"># 返回重定向地址</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>rewrite</p>
            </div>
<blockquote>
<p>根据指定正则表达式匹配规则，重写 URL 。</p>
</blockquote>
<div class="tabs" id="rewrite"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="rewrite-1">语法</button><button type="button" class="tab " data-href="rewrite-2">上下文标签</button><button type="button" class="tab " data-href="rewrite-3">实例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="rewrite-1"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#语法：</span></span><br><span class="line"><span class="attribute">rewrite</span> 正则表达式 要替换的内容 [flag];</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>flag 可选值的含义：<br>last 重写后的 URL 发起新请求，再次进入 server 段，重试 location 的中的匹配；<br>break 直接使用重写后的 URL ，不再匹配其它 location 中语句；<br>redirect 返回302临时重定向；<br>permanent 返回301永久重定向；</p>
</blockquote></div><div class="tab-item-content" id="rewrite-2"><p>#上下文(标签)：</p>
<blockquote>
<p>可以写在:<br>server{}块<br>location{}块<br>if{}块</p>
</blockquote></div><div class="tab-item-content" id="rewrite-3"><blockquote>
<p>如：</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">rewirte</span> /images/(.*\.jpg)$ /pic/<span class="variable">$1</span>; <span class="comment"># $1是前面括号(.*\.jpg)的反向引用</span></span><br></pre></td></tr></tbody></table></figure>
<p>如：</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line">server{</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> fe.lion.club; <span class="comment"># 要在本地hosts文件进行配置</span></span><br><span class="line">  <span class="attribute">root</span> html;</span><br><span class="line">  <span class="section">location</span> /search {</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> https://www.baidu.com <span class="literal">redirect</span>;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> /images {</span><br><span class="line">    <span class="attribute">rewrite</span> /images/(.*) /pics/<span class="variable">$1</span>;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> /pics {</span><br><span class="line">    <span class="attribute">rewrite</span> /pics/(.*) /photos/<span class="variable">$1</span>;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> /photos {</span><br><span class="line">  </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>当访问 fe.lion.club/search 时，会自动帮我们重定向到 <a href="https://www.baidu.com./">https://www.baidu.com。</a></li>
<li>当访问 fe.lion.club/images/1.jpg 时，第一步重写 URL 为 fe.lion.club/pics/1.jpg ，找到 pics 的 location ，继续重写 URL 为 fe.lion.club/photos/1.jpg ，找到 /photos 的 location 后，去 html/photos 目录下寻找 1.jpg 静态资源。</li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>if指令</p>
            </div>
<div class="tabs" id="if指令"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="if指令-1">语法</button><button type="button" class="tab " data-href="if指令-2">上下文</button><button type="button" class="tab " data-href="if指令-3">实例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="if指令-1"><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (condition) {...}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>condition 判断条件：</p>
<ul>
<li>$variable 仅为变量时，值为空或以0开头字符串都会被当做 false 处理；</li>
<li>= 或 != 相等或不等；</li>
<li>~ 正则匹配；</li>
<li>! ~ 非正则匹配；</li>
<li>~* 正则匹配，不区分大小写；</li>
<li>-f 或 ! -f 检测文件存在或不存在；</li>
<li>-d 或 ! -d 检测目录存在或不存在；</li>
<li>-e 或 ! -e 检测文件、目录、符号链接等存在或不存在；</li>
<li>-x 或 ! -x 检测文件可以执行或不可执行；</li>
</ul>
</blockquote></div><div class="tab-item-content" id="if指令-2"><ul>
<li>server{}<br>或</li>
<li>location{}</li>
</ul></div><div class="tab-item-content" id="if指令-3"><ol>
<li>检测客户端浏览器类型<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line">if($<span class="attribute">http_user_agent</span> <span class="regexp">~ Chrome)</span>{</span><br><span class="line">  <span class="attribute">rewrite</span> /(.*)/browser/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>如果访问 /images/ 则重写 URL 为 /pics/<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">root</span> html;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / {</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$uri</span> = <span class="string">"/images/"</span> ){</span><br><span class="line">      <span class="attribute">rewrite</span> (.*) /pics/ <span class="literal">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<ul>
<li>当访问 localhost:8080/images/ 时，会进入 if 判断里面执行 rewrite 命令。</li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="checkbox red checked"><input type="checkbox" checked="checked">
            <p>autoindex</p>
            </div>
<blockquote>
<p>用户请求以 / 结尾时，列出目录结构，可以用于快速搭建静态资源下载网站。<br>autoindex.conf 配置信息：</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> fe.lion-test.club;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> /download/ {</span><br><span class="line">    <span class="attribute">root</span> /opt/source;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>; <span class="comment"># 打开 autoindex，，可选参数有 on | off</span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>; <span class="comment"># 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示出⽂件的确切⼤⼩</span></span><br><span class="line">    <span class="attribute">autoindex_format</span> html; <span class="comment"># 以html的方式进行格式化，可选参数有 html | json | xml</span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">off</span>; <span class="comment"># 显示的⽂件时间为⽂件的服务器时间。默认为off，显示的⽂件时间为GMT时间</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>当访问 <a href="http://fe.xxx.com/download/">http://fe.xxx.com/download/</a> 时，会把服务器 /opt/source/download/ 路径下的文件展示出来。</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/looking/f134a8e5.html</url>
    <content><![CDATA[<h1 id="markdown-语法"><a href="#markdown-语法" class="headerlink" title="markdown 语法"></a>markdown 语法</h1><p>官网：<a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a><br>在线体验：<a href="https://markdown.com.cn/editor/">https://markdown.com.cn/editor/</a></p>
<h2 id="1-标题语法"><a href="#1-标题语法" class="headerlink" title="1.标题语法"></a>1.标题语法</h2><p>要创建标题，请在单词或短语前面添加井号 (#) 。<br>“#”的数量代表了标题的级别。<br>例如，添加三个 # 表示创建一个三级标题 <code>&lt;h3&gt; </code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">(例如：### My Header)。</span><br><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可选语法"><a href="#可选语法" class="headerlink" title="可选语法"></a>可选语法</h3><p>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 – 号来标识二级标题。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">一级标题</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">---------------</span><br></pre></td></tr></tbody></table></figure>
<p>不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，请用一个空格在 # 和标题之间进行分隔。</p>
<h2 id="2-段落语法"><a href="#2-段落语法" class="headerlink" title="2.段落语法"></a>2.段落语法</h2><p>要创建段落，请使用空白行将一行或多行文本进行分隔</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">I really like using Markdown.</span><br><span class="line"></span><br><span class="line">I think I'll use it to format all of my documents from now on.</span><br></pre></td></tr></tbody></table></figure>
<p>如：<br>I really like using Markdown.</p>
<p>I think I’ll use it to format all of my documents from now on.</p>
<h2 id="3-换行语法"><a href="#3-换行语法" class="headerlink" title="3.换行语法"></a>3.换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行<code>&lt;br&gt;</code>。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">This is the first line.  </span><br><span class="line">And this is the second line.</span><br></pre></td></tr></tbody></table></figure>
<p>如：<br>This is the first line.<br>And this is the second line.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为 结尾空格（trailing whitespace) 的方式，</span><br><span class="line">但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。</span><br><span class="line">由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。</span><br><span class="line">幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 &lt;br&gt; 标签。</span><br><span class="line">为了兼容性，请在行尾添加“结尾空格”或 HTML 的 &lt;br&gt; 标签来实现换行。</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">First line with the HTML tag after.&lt;br&gt;</span><br><span class="line">And the next line.</span><br></pre></td></tr></tbody></table></figure>
<p>如：<br>First line with the HTML tag after.<br><br>And the next line.</p>
<h2 id="4-强调语法"><a href="#4-强调语法" class="headerlink" title="4.强调语法"></a>4.强调语法</h2><h3 id="粗体（Bold）"><a href="#粗体（Bold）" class="headerlink" title="粗体（Bold）"></a>粗体（Bold）</h3><p>通过将文本设置为粗体或斜体来强调其重要性。<br>#要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）<br>#如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">I just love **bold text**.   </span><br><span class="line">I just love __bold text__.</span><br><span class="line">Love**is**bold</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>I just love <strong>bold text</strong>.<br>I just love <strong>bold text</strong>.<br>Love<strong>is</strong>bold</p>
<h3 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a>斜体（Italic）</h3><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。<br>要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Italicized text is the *cat's meow*.</span><br><span class="line">Italicized text is the _cat's meow_.</span><br><span class="line">A*cat*meow</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>Italicized text is the <em>cat’s meow</em>.<br>Italicized text is the <em>cat’s meow</em>.<br>A<em>cat</em>meow</p>
<h3 id="粗体（Bold）和斜体（Italic）"><a href="#粗体（Bold）和斜体（Italic）" class="headerlink" title="粗体（Bold）和斜体（Italic）"></a>粗体（Bold）和斜体（Italic）</h3><p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。<br>要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">This text is ***really important***.</span><br><span class="line">This text is ___really important___.</span><br><span class="line">This text is __*really important*__.</span><br><span class="line">This text is **_really important_**.</span><br><span class="line">This is really***very***important text.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下:<br>This text is <em><strong>really important</strong></em>.<br>This text is <em><strong>really important</strong></em>.<br>This text is <strong><em>really important</em></strong>.<br>This text is <strong><em>really important</em></strong>.<br>This is really<em><strong>very</strong></em>important text.</p>
<h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><p>要创建块引用，请在段落前添加一个 &gt; 符号</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下:</p>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
</blockquote>
<h3 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h3><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br><span class="line">&gt;</span><br><span class="line">&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下:</p>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
<h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下:</p>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<blockquote>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
</blockquote>
<h3 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h3><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; #### The quarterly results look great!</span><br><span class="line">&gt;</span><br><span class="line">&gt; - Revenue was off the chart.</span><br><span class="line">&gt; - Profits were higher than ever.</span><br><span class="line">&gt;</span><br><span class="line">&gt;  *Everything* is going according to **plan**.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：</p>
<blockquote>
<h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul>
<li>Revenue was off the chart.</li>
<li>Profits were higher than ever.</li>
</ul>
<p> <em>Everything</em> is going according to <strong>plan</strong>.</p>
</blockquote>
<h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><p>可以将多个条目组织成有序或无序列表</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。<br>数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1. First item</span><br><span class="line">2. Second item</span><br><span class="line">3. Third item</span><br><span class="line">4. Fourth item</span><br><span class="line"></span><br><span class="line">1. First item</span><br><span class="line">1. Second item</span><br><span class="line">1. Third item</span><br><span class="line">1. Fourth item</span><br><span class="line"></span><br><span class="line">1. First item</span><br><span class="line">8. Second item</span><br><span class="line">3. Third item</span><br><span class="line">5. Fourth item</span><br><span class="line"></span><br><span class="line">1. First item</span><br><span class="line">2. Second item</span><br><span class="line">3. Third item</span><br><span class="line">    1. Indented item</span><br><span class="line">    2. Indented item</span><br><span class="line">4. Fourth item</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：</p>
<ol>
<li><p>First item</p>
</li>
<li><p>Second item</p>
</li>
<li><p>Third item</p>
</li>
<li><p>Fourth item</p>
</li>
<li><p>First item</p>
</li>
<li><p>Second item</p>
</li>
<li><p>Third item</p>
</li>
<li><p>Fourth item</p>
</li>
<li><p>First item</p>
</li>
<li><p>Second item</p>
</li>
<li><p>Third item</p>
</li>
<li><p>Fourth item</p>
</li>
<li><p>First item</p>
</li>
<li><p>Second item</p>
</li>
<li><p>Third item</p>
<ol>
<li>Indented item</li>
<li>Indented item</li>
</ol>
</li>
<li><p>Fourth item</p>
</li>
</ol>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。<br>缩进一个或多个列表项可创建嵌套列表。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">- First item</span><br><span class="line">- Second item</span><br><span class="line">- Third item</span><br><span class="line">- Fourth item</span><br><span class="line"></span><br><span class="line">* First item</span><br><span class="line">* Second item</span><br><span class="line">* Third item</span><br><span class="line">* Fourth item</span><br><span class="line"></span><br><span class="line">+ First item</span><br><span class="line">+ Second item</span><br><span class="line">+ Third item</span><br><span class="line">+ Fourth item</span><br><span class="line"></span><br><span class="line">- First item</span><br><span class="line">- Second item</span><br><span class="line">- Third item</span><br><span class="line">    - Indented item</span><br><span class="line">    - Indented item</span><br><span class="line">- Fourth item</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：</p>
<ul>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
<li>Fourth item</li>
</ul>
<ul>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
<li>Fourth item</li>
</ul>
<ul>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
<li>Fourth item</li>
</ul>
<ul>
<li>First item</li>
<li>Second item</li>
<li>Third item<ul>
<li>Indented item</li>
<li>Indented item</li>
</ul>
</li>
<li>Fourth item</li>
</ul>
<h3 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h3><p>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</p>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">*   This is the first list item.</span><br><span class="line">*   Here's the second list item.</span><br><span class="line"></span><br><span class="line">    I need to add another paragraph below the second list item.</span><br><span class="line"></span><br><span class="line">*   And here's the third list item.</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下：</p>
<ul>
<li><p>This is the first list item.</p>
</li>
<li><p>Here’s the second list item.</p>
<p>I need to add another paragraph below the second list item.</p>
</li>
<li><p>And here’s the third list item.</p>
</li>
</ul>
<h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">*   This is the first list item.</span><br><span class="line">*   Here's the second list item.</span><br><span class="line"></span><br><span class="line">    &gt; A blockquote would look great below the second list item.</span><br><span class="line"></span><br><span class="line">*   And here's the third list item.</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下：</p>
<ul>
<li><p>This is the first list item.</p>
</li>
<li><p>Here’s the second list item.</p>
<blockquote>
<p>A blockquote would look great below the second list item.</p>
</blockquote>
</li>
<li><p>And here’s the third list item.</p>
</li>
</ul>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1.  Open the file.</span><br><span class="line">2.  Find the following code block on line 21:</span><br><span class="line"></span><br><span class="line">        &lt;html&gt;</span><br><span class="line">          &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">          &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">3.  Update the title to match the name of your website.</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下：</p>
<ol>
<li><p>Open the file.</p>
</li>
<li><p>Find the following code block on line 21:</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
  &lt;/head&gt;
</code></pre>
</li>
<li><p>Update the title to match the name of your website.</p>
</li>
</ol>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1.  Open the file containing the Linux mascot.</span><br><span class="line">2.  Marvel at its beauty.</span><br><span class="line"></span><br><span class="line">    ![Tux, the Linux mascot](https://img.shields.io/badge/这是-图片链接-blue)</span><br><span class="line">    ![Tux, the Linux mascot](/img/512.png)</span><br><span class="line"></span><br><span class="line">3.  Close the file.</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下：</p>
<ol>
<li><p>Open the file containing the Linux mascot.</p>
</li>
<li><p>Marvel at its beauty.</p>
<p><img src="https://img.shields.io/badge/%E8%BF%99%E6%98%AF-%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5-blue" alt="Tux, the Linux mascot"><br><img src="/img/512.png" alt="Tux, the Linux mascot"></p>
</li>
<li><p>Close the file.</p>
</li>
</ol>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>您可以将无序列表嵌套在有序列表中，反之亦然。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1. First item</span><br><span class="line">2. Second item</span><br><span class="line">3. Third item</span><br><span class="line">    - Indented item</span><br><span class="line">    - Indented item</span><br><span class="line">4. Fourth item</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下:</p>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item<ul>
<li>Indented item</li>
<li>Indented item</li>
</ul>
</li>
<li>Fourth item</li>
</ol>
<h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (<code>) 中。 ```At the command prompt, type </code>nano<code>.``` #渲染效果如下: At the command prompt, type </code>nano`.</p>
<h3 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h3><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">``Use `code` in your Markdown file.``</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下:<br><code>Use `code` in your Markdown file.</code></p>
<h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  123</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>#渲染效果如下:<br>    <br>      <br>      123<br>      <br>    </p>
<p>Note: 要创建不用缩进的代码块，请使用 围栏式代码块<a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">fenced code blocks</a></p>
<h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">_________________</span><br></pre></td></tr></tbody></table></figure>
<p>#以上三个分隔线的渲染效果看起来都一样：<br>#如下：<br>Try to put a blank line before…</p>
<hr>
<p>…and after a horizontal rule.</p>
<h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</span><br><span class="line"></span><br><span class="line">超链接Markdown语法代码：[超链接显示名](超链接地址 "超链接title")</span><br><span class="line"></span><br><span class="line">对应的HTML代码：&lt;a href="超链接地址" title="超链接title"&gt;超链接显示名&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是一个链接 [Markdown语法](https://markdown.com.cn)。</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a>。</p>
<h3 id="给链接增加-Title"><a href="#给链接增加-Title" class="headerlink" title="给链接增加 Title"></a>给链接增加 Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是一个链接 [Markdown语法](https://markdown.com.cn "最好的markdown教程")。</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>这是一个链接 <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</p>
<h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;https://markdown.com.cn&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:fake@example.com">fake@example.com</a></p>
<h3 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h3><p>强调 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">I love supporting the **[EFF](https://eff.org)**.</span><br><span class="line">This is the *[Markdown Guide](https://www.markdownguide.org)*.</span><br><span class="line">See the section on [`code`](#code).</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br>See the section on <a href="#code"><code>code</code></a>.</p>
<h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。<br>参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p>
<h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。<br>第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。<br>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。<br>以下示例格式对于链接的第一部分效果相同：<br>*[hobbit-hole][1]<br>*[hobbit-hole] [1]</p>
<h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：<br>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如<code>[label]:</code>）。<br>链接的URL，可以选择将其括在尖括号中。<br>链接的可选标题，可以将其括在双引号，单引号或括号中。<br>以下示例格式对于链接的第二部分效果相同<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a><br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> “Hobbit lifestyles”<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> ‘Hobbit lifestyles’<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> (Hobbit lifestyles)<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> “Hobbit lifestyles”<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> ‘Hobbit lifestyles’<br>·[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> (Hobbit lifestyles)</p>
<p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p>
<h4 id="链接最佳实践"><a href="#链接最佳实践" class="headerlink" title="链接最佳实践"></a>链接最佳实践</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[link](https://www.example.com/my%20great%20page)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://www.example.com/my%20great%20page">link</a></p>
<h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</span><br><span class="line">插入图片Markdown语法代码：![图片alt](图片链接 "图片title")。</span><br><span class="line">对应的HTML代码：&lt;img src="图片链接" alt="图片alt" title="图片title"&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![这是图片](/assets/img/philly-magic-garden.jpg "Magic Gardens")</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br><img src="/images/tag.png" alt="这是图片" title="Magic Gardens"></p>
<h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><p>给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。<br>点击图片跳转到链接地址。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[![图片](/images/tag.png "Shiprock")](https://markdown.com.cn)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://markdown.com.cn/"><img src="/images/tag.png" alt="图片" title="Shiprock"></a></p>
<h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\* Without the backslash, this would be a bullet in an unordered list.</span><br></pre></td></tr></tbody></table></figure>
<p>#效果如下：<br>* Without the backslash, this would be a bullet in an unordered list.</p>
<h3 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h3><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Character	Name</span><br><span class="line">\	backslash</span><br><span class="line">`	backtick (see also escaping backticks in code)</span><br><span class="line">*	asterisk</span><br><span class="line">_	underscore</span><br><span class="line">{ }	curly braces</span><br><span class="line">[ ]	brackets</span><br><span class="line">( )	parentheses</span><br><span class="line">#	pound sign</span><br><span class="line">+	plus sign</span><br><span class="line">-	minus sign (hyphen)</span><br><span class="line">.	dot</span><br><span class="line">!	exclamation mark</span><br><span class="line">|	pipe (see also escaping pipe in tables)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，</span><br><span class="line">如果你只是想要使用这些符号，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。</span><br><span class="line">&amp; 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」 ，还得转换网址内的 &amp; 符号</span><br></pre></td></tr></tbody></table></figure>
<p>如果你要链接到：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></tbody></table></figure>
<p>你必须要把网址转成：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;amp;q=larry+bird</span><br></pre></td></tr></tbody></table></figure>
<p>才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Markdown 允许你直接使用这些符号，它帮你自动转义字符。</span><br><span class="line">如果你使用 &amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，</span><br><span class="line">而在其它情况下，它则会被转换成 &amp;amp;。所以你如果要在文件中插入一个著作权的符号，</span><br><span class="line">你可以这样写：</span><br><span class="line">&amp;copy;</span><br><span class="line"></span><br><span class="line">Markdown 将不会对这段文字做修改，但是如果你这样写：</span><br><span class="line">AT&amp;T</span><br><span class="line"></span><br><span class="line">Markdown 就会将它转为：</span><br><span class="line">AT&amp;amp;T</span><br><span class="line"></span><br><span class="line">类似的状况也会发生在 &lt; 符号上，因为 Markdown 支持 行内 HTML ，</span><br><span class="line">如果你使用 &lt; 符号作为 HTML 标签的分隔符，</span><br><span class="line">那 Markdown 也不会对它做任何转换，但是如果你是写：</span><br><span class="line">4 &lt; 5</span><br><span class="line">Markdown 将会把它转换为：</span><br><span class="line">4 &amp;lt; 5</span><br><span class="line"></span><br><span class="line">需要特别注意的是，在 Markdown 的块级元素和内联元素中， &lt; 和 &amp; 两个符号都会被自动转换成 HTML 实体，</span><br><span class="line">这项特性让你可以很容易地用 Markdown 写 HTML。（在 HTML 语法中，你要手动把所有的 &lt; 和 &amp; 都转换为 HTML 实体。）</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Markdown-内嵌-HTML-标签"><a href="#Markdown-内嵌-HTML-标签" class="headerlink" title="Markdown 内嵌 HTML 标签"></a>Markdown 内嵌 HTML 标签</h2><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。<br>如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p>
<h3 id="行级內联标签"><a href="#行级內联标签" class="headerlink" title="行级內联标签"></a>行级內联标签</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">HTML 的行级內联标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。</span><br><span class="line">依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。</span><br><span class="line">例如：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。</span><br><span class="line">当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</span><br><span class="line"></span><br><span class="line">HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</span><br></pre></td></tr></tbody></table></figure>
<p>#输出如下：<br>This <strong>word</strong> is bold. This <em>word</em> is italic.</p>
<h3 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行，以便于内容区分。</span><br><span class="line">而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。</span><br><span class="line">Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 &lt;p&gt; 标签。</span><br><span class="line"></span><br><span class="line">例如，在 Markdown 文件里加上一段 HTML 表格：</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></tbody></table></figure>
<p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。<br>例如，你无法在 HTML 区块内使用 Markdown 形式的<em>强调</em></p>
<h3 id="HTML-用法最佳实践"><a href="#HTML-用法最佳实践" class="headerlink" title="HTML 用法最佳实践"></a>HTML 用法最佳实践</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。</span><br><span class="line">如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</span><br><span class="line"></span><br><span class="line">对于 HTML 的块级元素 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt; 和 &lt;p&gt;，请在其前后使用空行（blank lines）与其它内容进行分隔。</span><br><span class="line">尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</span><br><span class="line"></span><br><span class="line">在 HTML 块级标签内不能使用 Markdown 语法。例如 &lt;p&gt;italic and **bold**&lt;/p&gt; 将不起作用。</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>rainmeter自定义个性化windows桌面</title>
    <url>/looking/1c9e63ed.html</url>
    <content><![CDATA[<p><strong>效果如下：</strong><br><img src="https://pic.imgdb.cn/item/667f9fead9c307b7e91156ee.png" alt="桌面效果"><br><strong>主题包</strong>:<br><a href="https://www.alipan.com/s/p645sPEZxhF">提取码：6ij4</a></p>
<p><strong>如果使用我的皮肤包，只需下载主题包解压后将目录放到<em>C:\Users\Administrator\Documents\Rainmeter\Skins</em>即可</strong></p>
<h2 id="1-下载rainmeter"><a href="#1-下载rainmeter" class="headerlink" title="1.下载rainmeter"></a>1.下载rainmeter</h2><p><a href="https://www.rainmeter.net/download">下载地址</a></p>
<h2 id="2-安装-一直按下一步即可"><a href="#2-安装-一直按下一步即可" class="headerlink" title="2.安装 一直按下一步即可"></a>2.安装 一直按下一步即可</h2><ul>
<li>效果如下：<br><img src="https://pic.imgdb.cn/item/667fa11bd9c307b7e912d511.png" alt="安装"></li>
</ul>
<h2 id="3-下载主题"><a href="#3-下载主题" class="headerlink" title="3.下载主题"></a>3.下载主题</h2><ul>
<li><p>这里有很多主题，可以按自己的风格下载安装即可<br><a href="https://zhutix.com/tag/rainmeter/?post_order=views">下载地址</a></p>
</li>
<li><p>我这里下载</p>
<ul>
<li>Welfare</li>
<li>RetrOcOlOr</li>
</ul>
</li>
<li><p>然后在这个基础上自定义自己的桌面</p>
</li>
</ul>
<h2 id="4-自定义桌面（代码的解析）"><a href="#4-自定义桌面（代码的解析）" class="headerlink" title="4.自定义桌面（代码的解析）"></a>4.自定义桌面（代码的解析）</h2><ul>
<li><p>图标代码：<br><img src="https://pic.imgdb.cn/item/667fa368d9c307b7e9169882.png"></p>
</li>
<li><p>代码解析：（注意这是rainmeter的安装路径）</p>
<ul>
<li><p>在主题文件中：C:\Users\Administrator\Documents\Welfare@Resources\Variables.inc 找到这个变量文件打开：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">; Rainmeter Variables</span><br><span class="line">[Variables]</span><br><span class="line">Author=Morteza Nasirivand</span><br><span class="line">Language=English</span><br><span class="line">Location=IRXX0018</span><br><span class="line">Unit=f</span><br><span class="line">Format=H</span><br><span class="line">Hidden=0</span><br><span class="line">Hidden2=1</span><br><span class="line">Player=WMP</span><br><span class="line"></span><br><span class="line">;图标变量</span><br><span class="line">;如果有多个图标按这个格式添加即可</span><br><span class="line"></span><br><span class="line">;如这里是 我的电脑 打开的图标</span><br><span class="line">LinkIcon1NameAndPath=#@#\MyComputer.png			;图标原始状态</span><br><span class="line">HoverIcon1NameAndPath=#@#\MyComputer-1.png		;鼠标放到图标后的变化的图标</span><br><span class="line">Link1Text=myComputer							;图标名</span><br><span class="line">LinkLocationPath1=["shell:MyComputerFolder"]	;点击图标后做的动作、如打开相应的应用或链接网站</span><br><span class="line"></span><br><span class="line">LinkIcon2NameAndPath=#@#\google-1.png</span><br><span class="line">HoverIcon2NameAndPath=#@#\google.png</span><br><span class="line">Link2Text=google</span><br><span class="line">LinkLocationPath2=["C:\Program Files\Google\Chrome\Application\chrome.exe"]</span><br><span class="line"></span><br><span class="line">LinkIcon3NameAndPath=#@#\github.png</span><br><span class="line">HoverIcon3NameAndPath=#@#\github-4.png</span><br><span class="line">Link3Text=github.com</span><br><span class="line">LinkLocationPath3=!Execute ["https://github.com"]</span><br><span class="line"></span><br><span class="line">PythonImgPath1=#@#\python-3.png</span><br><span class="line">PythonImgPath2=#@#\python-5.png</span><br><span class="line">PythonLinkText=pycharm</span><br><span class="line">PythonAppPath=!Execute ["D:\install\pycharm\PyCharm 2022.2.5\bin\pycharm64"]</span><br><span class="line"></span><br><span class="line">LinkIcon5NameAndPath=#@#\gmail-1.png</span><br><span class="line">HoverIcon5NameAndPath=#@#\gmail.png</span><br><span class="line">Link5Text=gmail</span><br><span class="line">LinkLocationPath5=!Execute ["https://mail.google.com/mail/u/1/#inbox/"]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LinkIcon6NameAndPath=#@#\youtube-1.png</span><br><span class="line">HoverIcon6NameAndPath=#@#\youtube-2.png</span><br><span class="line">Link6Text=youtube</span><br><span class="line">LinkLocationPath6=!Execute ["https://www.youtube.com/"]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LinkIcon7NameAndPath=#@#\terminal-1.png</span><br><span class="line">HoverIcon7NameAndPath=#@#\terminal-2.png</span><br><span class="line">Link7Text=youtube</span><br><span class="line">LinkLocationPath7=!Execute ["wt"]</span><br><span class="line"></span><br><span class="line">LinkIcon8NameAndPath=#@#\music.png</span><br><span class="line">HoverIcon8NameAndPath=#@#\music-1.png</span><br><span class="line">Link8Text=kugou</span><br><span class="line">LinkLocationPath8=!Execute ["D:\install\kugou\KGMusic\KuGou.exe"]</span><br><span class="line"></span><br><span class="line">LinkIcon9NameAndPath=#@#\bi-1.png</span><br><span class="line">HoverIcon9NameAndPath=#@#\bi.png</span><br><span class="line">Link9Text=bilibili</span><br><span class="line">LinkLocationPath9=!Execute ["https://www.bilibili.com/"]</span><br><span class="line"></span><br><span class="line">LinkIcon10NameAndPath=#@#\wechat.png</span><br><span class="line">HoverIcon10NameAndPath=#@#\wechat-1.png</span><br><span class="line">Link10Text=wechat</span><br><span class="line">LinkLocationPath10=!Execute ["D:\install\wechat\WeChat.exe"]</span><br><span class="line"></span><br><span class="line">LinkIcon11NameAndPath=#@#\note.png</span><br><span class="line">HoverIcon11NameAndPath=#@#\note-1.png</span><br><span class="line">Link11Text=joplin</span><br><span class="line">LinkLocationPath11=!Execute ["C:\Program Files\Joplin\Joplin.exe"]</span><br><span class="line"></span><br><span class="line">ClashImgPath1=#@#\vpn-3.png</span><br><span class="line">ClashImgPath2=#@#\vpn-1.png</span><br><span class="line">ClashLinkText=clash</span><br><span class="line">ClashAppPath=!Execute ["D:\OperationTools\Clash.for.Windows-0.20.39-win\Clash for Windows"]</span><br><span class="line"></span><br><span class="line">VmwareImgPath1=#@#\vm-2.png</span><br><span class="line">VmwareImgPath2=#@#\vm-2.png</span><br><span class="line">VmwareLinkText=vmware</span><br><span class="line">VmwareAppPath=!Execute ["D:\installsoft\VM\vmware.exe"]</span><br><span class="line"></span><br><span class="line">XtermImgPath1=#@#\xterm-1.png</span><br><span class="line">XtermImgPath2=#@#\xterm-2.png</span><br><span class="line">XtermLinkText=vmware</span><br><span class="line">XtermAppPath=!Execute ["D:\install\Xterm\MobaXterm\MobaXterm"]</span><br><span class="line"></span><br><span class="line">TeleImgPath1=#@#\telegram.png</span><br><span class="line">TeleImgPath2=#@#\telegram-2.png</span><br><span class="line">TeleLinkText=telegram</span><br><span class="line">TeleAppPath=!Execute ["D:\install\telegram\Telegram Desktop\Telegram.exe"]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>打开 C:\Users\Administrator\Documents\Rainmeter\Skins\Welfare\Links</p>
</li>
<li><p>这是桌面图标的配置文件</p>
</li>
<li><p>代码解析：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[Rainmeter]</span><br><span class="line">Update=-1</span><br><span class="line">Author=Morteza Nasirivand</span><br><span class="line">DynamicWindowSize=1</span><br><span class="line">AccurateText=1</span><br><span class="line"></span><br><span class="line">[Metadata]</span><br><span class="line">Name=</span><br><span class="line">Author=</span><br><span class="line">Information=</span><br><span class="line">License=</span><br><span class="line">Version=</span><br><span class="line"></span><br><span class="line">;NOTES:</span><br><span class="line">;If you are not familiar with Rainmeter from earlier,please don't edit anything!</span><br><span class="line">;It's too complicated and sensitive,if you don't know what you doing!</span><br><span class="line"></span><br><span class="line">[Variables]</span><br><span class="line">@include=#@#Variables.inc</span><br><span class="line">IconTimeWaiting=4</span><br><span class="line">TextTimeWaiting=8</span><br><span class="line">Size1=0</span><br><span class="line">Size2=0</span><br><span class="line">Size3=0</span><br><span class="line">Size4=0</span><br><span class="line">Size5=0</span><br><span class="line">Size6=0</span><br><span class="line">Size7=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">;这里设置底部的水平线 SolidColor=12,201,255 颜色</span><br><span class="line">;Meter=Image: 这个参数指定了元素类型，即一个图像元素，尽管在这种情况下它被用来表示一条线</span><br><span class="line">;X=20 和 Y=68: 定义了线条在屏幕上的位置</span><br><span class="line">;W=60 和 H=3: 这些参数定义了线条的宽度和高度</span><br><span class="line">[MeterLine]</span><br><span class="line">Meter=Image</span><br><span class="line">X=20</span><br><span class="line">Y=68</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=12,201,255</span><br><span class="line"></span><br><span class="line">[MeterLine2]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=218,165,32</span><br><span class="line"></span><br><span class="line">[MeterLine3]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=65,105,225</span><br><span class="line"></span><br><span class="line">[MeterPython]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=218, 112, 214</span><br><span class="line"></span><br><span class="line">[MeterLine5]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=0,100,0</span><br><span class="line"></span><br><span class="line">[MeterLine6]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=178, 34, 34</span><br><span class="line"></span><br><span class="line">[MeterLine7]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=50,205,50</span><br><span class="line"></span><br><span class="line">[MeterLine8]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=48, 25, 52</span><br><span class="line"></span><br><span class="line">[MeterLine9]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=255, 127, 80</span><br><span class="line"></span><br><span class="line">[MeterLine10]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=34, 139, 34</span><br><span class="line"></span><br><span class="line">;joplin</span><br><span class="line">[MeterLine11]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=255,255,0</span><br><span class="line"></span><br><span class="line">[MeterClashLine]</span><br><span class="line">Meter=Image</span><br><span class="line">X=60r</span><br><span class="line">Y=r</span><br><span class="line">W=60</span><br><span class="line">H=3</span><br><span class="line">SolidColor=240, 128, 128</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line">;这里设置图标效果</span><br><span class="line">;变量都保存在Variables.inc 中、开头使用 @include=#@#Variables.inc 调用了</span><br><span class="line">;ImageName=#LinkIcon1NameAndPath# 显示的图片、图片路径存在变量LinkIcon1NameAndPath 中</span><br><span class="line">;LeftMouseUpAction="#LinkLocationPath1#" 定义了当用户在图像上执行左键点击时所执行的动作</span><br><span class="line">;MouseOverAction  鼠标放在图片上的效果</span><br><span class="line">;MouseLeaveAction 鼠标离开图片的效果</span><br><span class="line">;Meter=Image: 这个参数告诉Rainmeter这个元素是一个图像。</span><br><span class="line">;X=40 和 Y=30: 定义了图像在屏幕上的位置。X是水平位置，Y是垂直位置</span><br><span class="line">;W=25: 定义了图像的宽度。</span><br><span class="line">;AntiAlias=1: 这个参数启用了图像的抗锯齿功能，使图像边缘更加平滑</span><br><span class="line">;PreserveAspectRatio=1: 这个参数设置为1时，保持图像的长宽比，以确保图像在改变大小时不会失真</span><br><span class="line">;Group=Icons: 这个参数将该图像元素分组到一个名为 "Icons" 的组中，这有助于管理和布局Rainmeter皮肤中的元素。</span><br><span class="line"></span><br><span class="line">;打开我的电脑</span><br><span class="line">[MeterIcon1]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon1NameAndPath#</span><br><span class="line">X=40</span><br><span class="line">Y=30</span><br><span class="line">W=30</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath1#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon1 ImageAlpha 150][!UpdateMeter MeterIcon1][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon1 ImageAlpha 255][!UpdateMeter MeterIcon1][!Redraw]</span><br><span class="line"></span><br><span class="line">;图标凸起效果</span><br><span class="line">MouseOverAction=[!SetOption MeterIcon1 ImageName "#HoverIcon1NameAndPath#"][!SetOption MeterIcon1 Y "15"][!SetOption MeterIcon1 W "50"][!UpdateMeter MeterIcon1][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon1 ImageName "#LinkIcon1NameAndPath#"][!SetOption MeterIcon1 Y "30"][!SetOption MeterIcon1 W "30"][!UpdateMeter MeterIcon1][!Redraw]</span><br><span class="line"></span><br><span class="line">;google</span><br><span class="line">[MeterIcon2]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon2NameAndPath#</span><br><span class="line">X=100</span><br><span class="line">Y=30</span><br><span class="line">W=30</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath2#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon2 ImageAlpha 150][!UpdateMeter MeterIcon2][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon2 ImageAlpha 255][!UpdateMeter MeterIcon2][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon2 ImageName "#HoverIcon2NameAndPath#"][!SetOption MeterIcon2 Y "15"][!SetOption MeterIcon2 W "50"][!UpdateMeter MeterIcon2][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon2 ImageName "#LinkIcon2NameAndPath#"][!SetOption MeterIcon2 Y "30"][!SetOption MeterIcon2 W "30"][!UpdateMeter MeterIcon2][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon3]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon3NameAndPath#</span><br><span class="line">X=156</span><br><span class="line">Y=27</span><br><span class="line">W=38</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath3#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon3 ImageAlpha 150][!UpdateMeter MeterIcon3][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon3 ImageAlpha 255][!UpdateMeter MeterIcon3][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon3 ImageName "#HoverIcon3NameAndPath#"][!SetOption MeterIcon3 Y "15"][!SetOption MeterIcon3 W "50"][!UpdateMeter MeterIcon3][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon3 ImageName "#LinkIcon3NameAndPath#"][!SetOption MeterIcon3 Y "27"][!SetOption MeterIcon3 W "38"][!UpdateMeter MeterIcon3][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterPychrm]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#PythonImgPath1#</span><br><span class="line">X=215</span><br><span class="line">Y=25</span><br><span class="line">W=36</span><br><span class="line">LeftMouseUpAction="#PythonAppPath#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">MouseOverAction=[!SetOption MeterPychrm ImageName "#PythonImgPath2#"][!SetOption MeterPychrm Y "15"][!SetOption MeterPychrm W "50"][!UpdateMeter MeterPychrm][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterPychrm ImageName "#PythonImgPath1#"][!SetOption MeterPychrm Y "25"][!SetOption MeterPychrm W "38"][!UpdateMeter MeterPychrm][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon5]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon5NameAndPath#</span><br><span class="line">X=272</span><br><span class="line">Y=30</span><br><span class="line">W=35</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath5#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon5 ImageAlpha 150][!UpdateMeter MeterIcon5][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon5 ImageAlpha 255][!UpdateMeter MeterIcon5][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon5 ImageName "#HoverIcon5NameAndPath#"][!SetOption MeterIcon5 Y "15"][!SetOption MeterIcon5 W "50"][!UpdateMeter MeterIcon5][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon5 ImageName "#LinkIcon5NameAndPath#"][!SetOption MeterIcon5 Y "30"][!SetOption MeterIcon5 W "35"][!UpdateMeter MeterIcon5][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon6]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon6NameAndPath#</span><br><span class="line">X=340</span><br><span class="line">Y=30</span><br><span class="line">W=25</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath6#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon6 ImageAlpha 150][!UpdateMeter MeterIcon6][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon6 ImageAlpha 255][!UpdateMeter MeterIcon6][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon6 ImageName "#HoverIcon6NameAndPath#"][!SetOption MeterIcon6 Y "15"][!SetOption MeterIcon6 W "50"][!UpdateMeter MeterIcon6][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon6 ImageName "#LinkIcon6NameAndPath#"][!SetOption MeterIcon6 Y "30"][!SetOption MeterIcon6 W "30"][!UpdateMeter MeterIcon6][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon7]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon7NameAndPath#</span><br><span class="line">X=400</span><br><span class="line">Y=30</span><br><span class="line">W=25</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath7#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon7 ImageAlpha 150][!UpdateMeter MeterIcon7][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon7 ImageAlpha 255][!UpdateMeter MeterIcon7][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon7 ImageName "#HoverIcon7NameAndPath#"][!SetOption MeterIcon7 Y "15"][!SetOption MeterIcon7 W "50"][!UpdateMeter MeterIcon7][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon7 ImageName "#LinkIcon7NameAndPath#"][!SetOption MeterIcon7 Y "30"][!SetOption MeterIcon7 W "30"][!UpdateMeter MeterIcon7][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon8]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon8NameAndPath#</span><br><span class="line">X=460</span><br><span class="line">Y=30</span><br><span class="line">W=25</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath8#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon8 ImageAlpha 150][!UpdateMeter MeterIcon8][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon8 ImageAlpha 255][!UpdateMeter MeterIcon8][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon8 ImageName "#HoverIcon8NameAndPath#"][!SetOption MeterIcon8 Y "15"][!SetOption MeterIcon8 W "50"][!UpdateMeter MeterIcon8][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon8 ImageName "#LinkIcon8NameAndPath#"][!SetOption MeterIcon8 Y "30"][!SetOption MeterIcon8 W "30"][!UpdateMeter MeterIcon8][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon9]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon9NameAndPath#</span><br><span class="line">X=520</span><br><span class="line">Y=30</span><br><span class="line">W=25</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath9#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon9 ImageAlpha 150][!UpdateMeter MeterIcon9][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon9 ImageAlpha 255][!UpdateMeter MeterIcon9][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon9 ImageName "#HoverIcon9NameAndPath#"][!SetOption MeterIcon9 Y "15"][!SetOption MeterIcon9 W "50"][!UpdateMeter MeterIcon9][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon9 ImageName "#LinkIcon9NameAndPath#"][!SetOption MeterIcon9 Y "30"][!SetOption MeterIcon9 W "30"][!UpdateMeter MeterIcon9][!Redraw]</span><br><span class="line"></span><br><span class="line">[MeterIcon10]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon10NameAndPath#</span><br><span class="line">X=580</span><br><span class="line">Y=30</span><br><span class="line">W=30</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath10#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line"></span><br><span class="line">;透明</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon10 ImageAlpha 150][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon10 ImageAlpha 255][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterIcon10 ImageName "#HoverIcon10NameAndPath#"][!SetOption MeterIcon10 Y "15"][!SetOption MeterIcon10 W "50"][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon10 ImageName "#LinkIcon10NameAndPath#"][!SetOption MeterIcon10 Y "30"][!SetOption MeterIcon10 W "30"][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line"></span><br><span class="line">;joplin</span><br><span class="line">[MeterIcon11]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#LinkIcon11NameAndPath#</span><br><span class="line">X=640</span><br><span class="line">Y=30</span><br><span class="line">W=30</span><br><span class="line">LeftMouseUpAction="#LinkLocationPath11#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line"></span><br><span class="line">;透明</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon10 ImageAlpha 150][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon10 ImageAlpha 255][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line"></span><br><span class="line">;图标变大变小的效果</span><br><span class="line">MouseOverAction=[!SetOption MeterIcon11 ImageName "#HoverIcon11NameAndPath#"][!SetOption MeterIcon11 Y "15"][!SetOption MeterIcon11 W "50"][!UpdateMeter MeterIcon11][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterIcon11 ImageName "#LinkIcon11NameAndPath#"][!SetOption MeterIcon11 Y "30"][!SetOption MeterIcon11 W "30"][!UpdateMeter MeterIcon11][!Redraw]</span><br><span class="line"></span><br><span class="line">;clash</span><br><span class="line">[MeterClash]</span><br><span class="line">Meter=Image</span><br><span class="line">ImageName=#ClashImgPath1#</span><br><span class="line">X=700</span><br><span class="line">Y=30</span><br><span class="line">W=30</span><br><span class="line">;LeftMouseUpAction 鼠标左键点击的动作-运行exe</span><br><span class="line">LeftMouseUpAction="#ClashAppPath#"</span><br><span class="line">AntiAlias=1</span><br><span class="line">PreserveAspectRatio=1</span><br><span class="line">Group=Icons</span><br><span class="line"></span><br><span class="line">;透明</span><br><span class="line">;MouseOverAction=[!SetOption MeterIcon10 ImageAlpha 150][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line">;MouseLeaveAction=[!SetOption MeterIcon10 ImageAlpha 255][!UpdateMeter MeterIcon10][!Redraw]</span><br><span class="line"></span><br><span class="line">MouseOverAction=[!SetOption MeterClash ImageName "#ClashImgPath2#"][!SetOption MeterClash Y "15"][!SetOption MeterClash W "50"][!UpdateMeter MeterClash][!Redraw]</span><br><span class="line">MouseLeaveAction=[!SetOption MeterClash ImageName "#ClashImgPath1#"][!SetOption MeterClash Y "30"][!SetOption MeterClash W "30"][!UpdateMeter MeterClash][!Redraw]</span><br><span class="line">;-------------------------------------------------------------</span><br><span class="line">;-------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure>

<p><strong>根据上面的代码，更改自己需要的链接和图标路径即可， ；号为注释</strong></p>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>rainmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>windows和office套餐激活工具</title>
    <url>/looking/41ec75e8.html</url>
    <content><![CDATA[<h1 id="此文章分为两部分："><a href="#此文章分为两部分：" class="headerlink" title="此文章分为两部分："></a>此文章分为两部分：</h1><ul>
<li>Mirosoft套餐激活工具</li>
<li>Windows系统激活工具</li>
</ul>
<h2 id="Mirosoft套餐激活工具"><a href="#Mirosoft套餐激活工具" class="headerlink" title="Mirosoft套餐激活工具"></a>Mirosoft套餐激活工具</h2><ol>
<li><a href="https://otp.landian.vip/zh-cn/download.html">下载:<strong>Office Tool Plus</strong></a></li>
<li>选择对应的镜像和对应的版本点击下载即可：<br><img src="https://pic.imgdb.cn/item/66804492d9c307b7e9181107.png" alt="官网"></li>
<li>下载安装压缩包后解压，找到 <strong>Office Tool Plus.exe</strong> 右键管理员运行：<br><img src="https://pic.imgdb.cn/item/66804546d9c307b7e918f812.png" alt="解压包的文件"></li>
<li>打开应用后、选择部署的产品：<br><img src="https://pic.imgdb.cn/item/66804676d9c307b7e91a229b.png" alt="选择部署的产品"></li>
<li>激活</li>
</ol>
<ul>
<li>方法1：<br><img src="https://pic.imgdb.cn/item/66804782d9c307b7e91b7037.png" alt="激活产品"></li>
<li>方法2：<br>如果方法1激活失败，可以尝试使用方法2激活：<br>在工具中按 __ctrl+shift+p__，再输入 <strong>ospp /insLicID MondoVolume /sethst:kms.loli.best /setprt:1688 /act</strong><br><img src="https://pic.imgdb.cn/item/66804924d9c307b7e91cf6be.png" alt="激活方法2"></li>
</ul>
<ol start="6">
<li>打开相应的产品查看是否已激活</li>
</ol>
<hr>
<h2 id="Windows系统激活工具"><a href="#Windows系统激活工具" class="headerlink" title="Windows系统激活工具"></a>Windows系统激活工具</h2><ul>
<li>这是一个github开源的项目，获得了84.6k stat<br><a href="https://github.com/massgravel/Microsoft-Activation-Scripts">原项目地址</a><br><img src="https://camo.githubusercontent.com/4de5ba22ebf14d7e4d9a63b770d2ac02c2958f92b0c045ba4ce8b86c6e216f68/68747470733a2f2f6d61737367726176652e6465762f696d672f6c6f676f5f736d616c6c2e706e67" alt="github图标"><br><strong>此软件是由GitHub托管，并已经获取最近更新。激活工具集合了KMS38/HWID/激活180天等等。还可以激活Windows Office办公软件，本博客推荐使用HWID方式激活系统。</strong></li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul>
<li>方法一：</li>
</ul>
<ol>
<li>PowerShell 命令行安装 (<strong>推荐</strong>)<blockquote>
<p>打开你的 Windows，右键单击 Windows 开始菜单并选择 PowerShell 或终端（不是 CMD）。复制并粘贴如下代码，然后按回车键：<br><img src="https://pic.imgdb.cn/item/66804f47d9c307b7e92446e6.png" alt="powershell"></p>
</blockquote>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果第一次执行报错，关闭后在执行即可</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>执行命令后会弹出窗口：<br><img src="https://pic.imgdb.cn/item/66804f47d9c307b7e9244713.png" alt="窗口"></li>
<li>按照上图选择相应<strong>数字</strong>的激活方式即可</li>
</ol>
<ul>
<li>方法二：（不建议）</li>
</ul>
<ol>
<li>下载源文件 <blockquote>
<p>从 GitHub 上下载开源文件。<br>解压缩下载的 zip 文件。<br>在解压的文件中找到名为 All-In-One-Version 的文件夹。<br>运行名为 MAS_AIO.cmd 的文件。<br>按照屏幕上的说明即可轻松激活您的软件。<br><img src="https://pic.imgdb.cn/item/66805084d9c307b7e92567a5.png" alt="github源文件"></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware虚拟机网络配置</title>
    <url>/looking/300f2b.html</url>
    <content><![CDATA[<h2 id="vmwarme-网络类型"><a href="#vmwarme-网络类型" class="headerlink" title="vmwarme 网络类型"></a>vmwarme 网络类型</h2><blockquote>
<p>VMware虚拟机有三种网络模式，分别是<strong>Bridged(桥接模式)<strong>、</strong>NAT(网络地址转换模式)<strong>、</strong>Host-only(主机模式)</strong><br>VMware workstation安装好之后会多出两个网络连接,分别是:<br><strong>VMware Network Adapter VMnet1</strong><br><strong>VMware Network Adapter VMnet8</strong><br>上面这两个是可以在主机的网络连接中可以查看到的，<br>还有一个是<strong>VMnet0</strong>，可以在virtual network editor中看到<br>这三个虚拟网络都是VMware安装好之后自动生成的，不需要手动修改。</p>
<blockquote>
<p>其中VMnet0用于Bridged模式，VMnet1用于Host-only模式，Vmnet8用于NAT模式。VMnet8和VMnet1提供DHCP服务，VMnet0默认则不提供。</p>
</blockquote>
</blockquote>
<p><strong>图一</strong><br><img src="https://pic.imgdb.cn/item/667eddecd9c307b7e93831e0.png" alt="bridged" title="图一"></p>
<h2 id="1-Bridged-桥接模式-VMnet0"><a href="#1-Bridged-桥接模式-VMnet0" class="headerlink" title="1. Bridged 桥接模式 (VMnet0)"></a>1. Bridged 桥接模式 (VMnet0)</h2><blockquote>
<p>在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台<strong>独立的主机</strong>，它可以访问网内任何一台机器，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同网段，这样虚拟系统才能和宿主机器进行通信，虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。从网络技术上理解相当于在宿主机前端加设了一个虚拟交换机，然后宿主机和所有虚拟机共享这个交换机。</p>
</blockquote>
<ul>
<li>如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。</li>
</ul>
<h3 id="1-1-桥接模式下的网络设置"><a href="#1-1-桥接模式下的网络设置" class="headerlink" title="1.1 桥接模式下的网络设置"></a>1.1 桥接模式下的网络设置</h3><blockquote>
<ol>
<li>虚拟机网络设置：桥接模式（选择图一中的桥接模式）</li>
<li>查看本机的以太网网络设置：ipconfig </li>
<li>配置虚拟机网络：<ul>
<li>vim /etc/sysconfig/network-scripts/ifcfg-eth0</li>
<li>ip地址和本机同一个网段</li>
<li>网关地址、子网掩码、DNS和本机一样即可</li>
<li>重启虚拟机网卡</li>
<li>测试：ping 本机或外网</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="2-NAT-网络地址转换模式-VMnet8"><a href="#2-NAT-网络地址转换模式-VMnet8" class="headerlink" title="2. NAT 网络地址转换模式 (VMnet8)"></a>2. NAT 网络地址转换模式 (VMnet8)</h2><blockquote>
<p>NAT（Network Address Translation）网络地址转换，是一种网络技术，它允许一个网络中的计算机通过一个公共网络（如互联网）来通信。<br>NAT技术通过将一个私有IP地址转换为一个公共IP地址来实现通信。<br>NAT技术将一个私有IP地址转换为一个公共IP地址来实现通信。<br>这里的虚拟机NET模式：</p>
<blockquote>
<p>就是让虚拟系统借助NAT的功能，通过宿主机所在的网络来访问公网。在这种模式下宿主机成为双网卡主机，同时参与现有的宿主局域网和新建的虚拟局域网，但由于加设了一个虚拟的NAT服务器，使得虚拟局域网内的虚拟机在对外访问时，使用的则是宿主机的IP地址，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。</p>
</blockquote>
</blockquote>
<blockquote>
<p>采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。</p>
</blockquote>
<ul>
<li>如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</li>
</ul>
<h3 id="2-1-NAT模式下的网络设置"><a href="#2-1-NAT模式下的网络设置" class="headerlink" title="2.1 NAT模式下的网络设置"></a>2.1 NAT模式下的网络设置</h3><blockquote>
<ol>
<li>检查宿主机的VMware DHCP Service 和VMwareNAT Service两个服务是否启动：<br><img src="https://pic.imgdb.cn/item/667ee2b1d9c307b7e94130f2.png" alt="任务管理器"></li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>虚拟机网络选择设置：NAT模式（选择图一中的NAT模式）</li>
<li>虚拟机中网络配置：因为NAT有DHCP服务，所以我们只需要将BOOTPROTO参数设置为dhcp就可以了，由dhcp服务器分配IP地址。</li>
<li>注意如果虚拟机中网卡配置中有 <strong>ONBOOT</strong> 参数为no，那么虚拟机网卡不会自动启动，需要手动启动网卡、可以直接注销掉</li>
</ol>
</blockquote>
<ul>
<li><p>默认情况下VMware和虚拟机的配置都不需要修改，所以NAT模式是最简单的</p>
</li>
<li><p>默认情况下会自动分配，当然你也也可以自行配置网段和网关、如下图：<br><img src="https://pic.imgdb.cn/item/667ee8a1d9c307b7e94ab6ac.png" alt="配置自定义net网络"></p>
</li>
<li><p><strong>注意</strong>：如果将本机的<strong>VMnet8</strong>网卡禁掉的话就无法在本机远程（ssh）到虚拟主机了、但是可以ping通<br>· <em>这就是NET模式、利用虚拟的NET设备以及虚拟的DHCP服务器来使虚拟机连接外网、而VMnet8虚拟网卡是用来与虚拟机通信的</em></p>
</li>
</ul>
<h2 id="3-Host-only-仅主机模式-VMnet1"><a href="#3-Host-only-仅主机模式-VMnet1" class="headerlink" title="3. Host-only 仅主机模式 (VMnet1)"></a>3. Host-only 仅主机模式 (VMnet1)</h2><ul>
<li>在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式，在这种模式下宿主机上的所有虚拟机是可以相互通信的，但虚拟机和真实的网络是被隔离开的。</li>
<li>在这种模式下新建了一个由所有虚拟机与宿主机所构成的局域网，但该局域网与宿主机本身所处的现有局域网是相互独立的，如果不做额外路由设置，这两个局域网之间不会连通，因此新建的局域网可以认为是一个单独从属于当前宿主机的私有网络，其成员为当前宿主机和相关的所有虚拟机。</li>
<li>从网络技术上讲相当于为宿主机增添了一个虚拟网卡，让宿主机变成一台双网卡主机（宿主网卡+虚拟网卡）。同时在宿主机后端加设一个虚拟交换机，让宿主机和所有虚拟机构成另一个虚拟的局域网。由于具备双网卡，宿主机可同时参与两个局域网（现有的宿主局域网+新建的虚拟局域网），只不过缺省情况下两个局域网不连通。</li>
<li><strong>如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。</strong></li>
</ul>
<h3 id="3-1-Host-only模式下的网络设置"><a href="#3-1-Host-only模式下的网络设置" class="headerlink" title="3.1 Host-only模式下的网络设置"></a>3.1 Host-only模式下的网络设置</h3><ul>
<li>Host-only模式下是由VMnet1网卡负责的，VMnet1提供DHCP服务，所以虚拟机中我们不需手动设定IP<blockquote>
<ol>
<li>虚拟机网络设置：Host-only模式即可（选择图一中的Host-only模式）</li>
<li>配置好后主机就能ping通虚拟机，但虚拟机ping主机时就要注意了，不是去ping宿主网卡产生的IP地址，而是由虚拟网卡VMnet1产生的IP地址，宿主机命令行中输入ipconfig就可看到VMnet1的产生的IP地址</li>
</ol>
</blockquote>
</li>
</ul>
<p><a href="https://blog.51cto.com/u_15169172/2710721">可参考: https://blog.51cto.com/u_15169172/2710721</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vmware网络</tag>
      </tags>
  </entry>
  <entry>
    <title>标签语法</title>
    <url>/looking/630f8407.html</url>
    <content><![CDATA[<h2 id="tab-分栏"><a href="#tab-分栏" class="headerlink" title="tab 分栏"></a>tab 分栏</h2><div class="tabs" id="标签语法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="标签语法-1">标签语法</button><button type="button" class="tab " data-href="标签语法-2">参数配置</button><button type="button" class="tab " data-href="标签语法-3">样式预览</button><button type="button" class="tab " data-href="标签语法-4">源码样例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="标签语法-1"><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs Unique name, [index] %}</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure></div><div class="tab-item-content" id="标签语法-2"><ol>
<li>Unique name :<ul>
<li>选项卡块标签的唯一名称，不带逗号。</li>
<li>将在#id 中用作每个标签及其索引号的前缀。</li>
<li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li>
<li>仅当前帖子/页面的 URL 必须是唯一的！</li>
</ul>
</li>
<li>[index]:<ul>
<li>活动选项卡的索引号。</li>
<li>如果未指定，将选择第一个标签（1）。</li>
<li>如果 index 为-1，则不会选择任何选项卡。</li>
<li>可选参数。</li>
</ul>
</li>
<li>[Tab caption]:<ul>
<li>当前选项卡的标题。</li>
<li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li>
<li>如果未指定标题，但指定了图标，则标题将为空。</li>
<li>可选参数。</li>
</ul>
</li>
<li>[@icon]: <ul>
<li>FontAwesome 图标名称（全名，看起来像“ fas fa-font”） - 可以指定带空格或不带空格； - 例如’Tab caption @icon’ 和 ‘Tab caption@icon’. - 可选参数。</li>
</ul>
</li>
</ol></div><div class="tab-item-content" id="标签语法-3"><div class="note info simple"><p>第一种，预设选择第一个【默认】</p>
</div>
<div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>默认显示我tab1</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="note info simple"><p>第二种，预设选择第3个tab标签</p>
</div>
<div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>默认显示我Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="note info simple"><p>第三种，没有预设值（默认不显示标签内容、点击后才出现）</p>
</div>
<div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>点我才能显示内容1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>点我才能显示内容2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>点我才能显示内容3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="note info simple"><p>第四种，自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p>
</div>
<div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab 名字为第一个 Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有 Tab 名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="标签语法-4"><div class="note info simple"><ul>
<li>第一种，预设选择第一个【默认】</li>
</ul>
</div>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test1 %}</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**默认显示我tab1**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info simple"><p>第二种，预设选择第3个tab标签</p>
</div>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test2, 3 %}</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**默认显示我Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure>

<div class="note info simple"><p>第三种，没有预设值（默认不显示标签内容、点击后才出现）</p>
</div>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test3, -1 %}</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**点我才能显示内容1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**点我才能显示内容2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**点我才能显示内容3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure>

<div class="note info simple"><p>第四种，自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p>
</div>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% tabs test4 %}</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字为第一个 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有图标 没有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">{% endtabs %}</span><br></pre></td></tr></tbody></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo,语法</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark入门</title>
    <url>/looking/8e749f40.html</url>
    <content><![CDATA[<p><img src="https://www.wireshark.org/assets/img/sharkbytes.jpeg" alt="官网图标"><br><a href="https://www.wireshark.org/#downloadLink">官网下载地址：https://www.wireshark.org/#downloadLink</a></p>
<p class="p center log large">01.WireShark介绍</p>
<ul>
<li>wireshark是非常流行的网络封包分析软件，简称小鲨鱼，功能十分强大。</li>
<li>可以截取各种网络封包，显示网络封包的详细信息。</li>
<li>对应的，linux下的抓包工具是 tcpdump</li>
</ul>
<p class="p center log large">02.WireShark抓包原理</p>
<blockquote>
<p>Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换<br>Wireshark使用的环境大致分为两种，一种是电脑直连网络的单机环境，另外一种就是应用比较多的网络环境，即连接交换机的情况<br>单机情况下：Wireshark直接抓取本机网卡的网络流量。<br>交换机情况下：Wireshark通过端口镜像、ARP欺骗等方式获取局域网中的网络流量<br>端口镜像：利用交换机的接口，将局域网的网络流量转发到指定电脑的网卡上。<br>ARP欺骗：交换机根据MAC地址转发数据，伪装其他终端的MAC地址，从而获取局域网的网络流量。</p>
</blockquote>
<p class="p center log large">03.Wireshark抓包示例</p>
<ul>
<li>先介绍一个使用wireshark工具抓取ping命令操作的示例，可以上手操作感受一下抓包的具体过程。</li>
</ul>
<ol>
<li>打开wireshark，主界面如下：<br><img src="https://pic.imgdb.cn/item/668b60a5d9c307b7e94a11bc.png" alt="主界面"></li>
<li>选择菜单栏上 <strong>捕获 -&gt; 选项，勾选WLAN网卡</strong>。这里需要根据各自电脑网卡使用情况选择，简单的办法可以看使用的IP对应的网卡<br><img src="https://pic.imgdb.cn/item/668b61ffd9c307b7e94bbfde.png" alt="选择对应的网卡开始抓包"></li>
<li>wireshark启动后，wireshark处于抓包状态中。<br><img src="https://pic.imgdb.cn/item/668b627ed9c307b7e94c7647.png" alt="wireshark抓包状态"></li>
<li>执行需要抓包的操作，如在cmd窗口下执行 <strong>ping <a href="http://www.baidu.com/">www.baidu.com</a></strong></li>
<li>操作完成后相关数据包就抓取到了（等待ping完），可以点击左上角的 <strong>停止捕获</strong> 按钮</li>
<li>为避免其他无用的数据包影响分析，可以通过在过滤栏设置过滤条件进行数据包列表过滤，获取结果如下。<ul>
<li>说明：<strong>ip.addr == 120.232.145.185 and icmp</strong> 表示只显示ICPM协议且主机IP为120.232.145.185的数据包。</li>
<li>说明：协议名称<strong>icmp</strong>要小写。<br><img src="https://pic.imgdb.cn/item/668b64dad9c307b7e9502cfa.png" alt="过滤ip包"></li>
</ul>
</li>
<li>wireshark抓包完成，并把本次抓包或者分析的结果进行保存，就这么简单。<br><img src="https://pic.imgdb.cn/item/668b86c2d9c307b7e98d3261.png" alt="保存抓包过程"></li>
</ol>
<p class="p center log large">04.Wireshark抓包界面介绍</p>
<p><img src="https://pic.imgdb.cn/item/668b872dd9c307b7e98db60f.png" alt="wireshark界面介绍"></p>
<div class="note green no-icon flat"><p>Wireshark 的主界面包含6个部分：</p>
</div>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">菜单栏：用于调试、配置</span><br><span class="line">工具栏：常用功能的快捷方式</span><br><span class="line">过滤栏：指定过滤条件，过滤数据包</span><br><span class="line">数据包列表：核心区域，每一行就是一个数据包</span><br><span class="line">数据包详情：数据包的详细数据</span><br><span class="line">数据包字节：数据包对应的字节流，二进制</span><br></pre></td></tr></tbody></table></figure>
<p><strong>说明：</strong>数据包列表区中不同的协议使用了不同的颜色区分。协议颜色标识定位在 <strong>菜单栏 视图 –&gt; 着色规则 (View-&gt;Coloring Rules)</strong></p>
<ul>
<li>如下图：<br><img src="https://pic.imgdb.cn/item/668b892ad9c307b7e990fb27.png" alt="颜色规则"></li>
</ul>
<mark class="hl-label green">WireShark主要分为这几个界面</mark> 
<div class="tabs" id="界面"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="界面-1">01.Display Filter(显示过滤器)</button><button type="button" class="tab " data-href="界面-2">02.Packet List Pane(数据包列表)</button><button type="button" class="tab " data-href="界面-3">03.Packet Details Pane(数据包详细信息)</button><button type="button" class="tab " data-href="界面-4">04.Dissector Pane(数据包字节区)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="界面-1"><ul>
<li>用于设置过滤条件进行数据包列表过滤。</li>
<li>菜单路径：分析 –&gt; Display Filters<br><img src="https://pic.imgdb.cn/item/668ba655d9c307b7e9c0600a.png" alt="Display Filters"></li>
</ul></div><div class="tab-item-content" id="界面-2"><ul>
<li>显示捕获到的数据包，每个数据包包含: <strong>编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息</strong></li>
<li>不同协议的数据包使用了不同的颜色区分显示。<br><img src="https://pic.imgdb.cn/item/668ba72cd9c307b7e9c24670.png" alt="图9"></li>
</ul></div><div class="tab-item-content" id="界面-3"><ul>
<li><p>数据包详细信息面板是最重要的，用来查看协议中的每一个字段。</p>
</li>
<li><p>各行信息分别为：</p>
<blockquote>
<ol>
<li>Frame:   物理层的数据帧概况</li>
<li>Ethernet II: 数据链路层以太网帧头部信息</li>
<li>Internet Protocol Version 4: 互联网层IP包头部信息</li>
<li>Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCP</li>
<li>Hypertext Transfer Protocol:  应用层的信息，此处是HTTP协议<br><img src="https://pic.imgdb.cn/item/668ba876d9c307b7e9c40730.png" alt="图10"></li>
</ol>
</blockquote>
</li>
<li><p>TCP包的具体内容：从下图中可看出捕获到到的TCP包中的每个字段<br><img src="https://pic.imgdb.cn/item/668baae2d9c307b7e9c8b2ce.png" alt="图11"><br><img src="https://pic.imgdb.cn/item/668bab0fd9c307b7e9c8f9e1.png" alt="图12"></p>
</li>
</ul></div><div class="tab-item-content" id="界面-4"><ul>
<li>报文原始内容。<br><img src="https://pic.imgdb.cn/item/668babe7d9c307b7e9ca0a5e.png" alt="图13"></li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>


<p class="p center log large">05.Wireshark过滤器设置</p>
<ul>
<li>初学者使用wireshark时，将会得到大量的冗余数据包列表，以至于很难找到自己需要抓取的数据包部分。</li>
<li>wireshark工具中自带了两种类型的过滤器，学会使用这两种过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。</li>
</ul>
<div class="tabs" id="过滤器"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="过滤器-1">01.抓包过滤器</button><button type="button" class="tab " data-href="过滤器-2">02.显示过滤器</button></ul><div class="tab-contents"><div class="tab-item-content active" id="过滤器-1"><ol>
<li>先自定义过滤器</li>
</ol>
<ul>
<li>捕获过滤器的菜单栏路径为 <strong>捕获 –&gt; 捕获过滤器</strong>。用于在抓取数据包前设置。<br><img src="https://pic.imgdb.cn/item/668baf85d9c307b7e9ced4e4.png" alt="图14"></li>
</ul>
<ol start="2">
<li>使用自定义的过滤器<br><img src="https://pic.imgdb.cn/item/668bb047d9c307b7e9cff4eb.png" alt="图15"></li>
</ol>
<ul>
<li>ip host  120.232.145.185 表示只捕获主机IP为 120.232.145.185 的数据包。</li>
</ul></div><div class="tab-item-content" id="过滤器-2"><ul>
<li>显示过滤器是用于在抓取数据包后设置过滤条件进行过滤数据包。</li>
<li>通常是在抓取数据包时设置条件相对宽泛或者没有设置导致抓取的数据包内容较多时使用显示过滤器设置条件过滤以方便分析。<br><img src="https://pic.imgdb.cn/item/668ba655d9c307b7e9c0600a.png" alt="Display Filters"></li>
</ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p class="p center log large">06.Wireshark过滤器表达式的规则</p>
<div class="tabs" id="语法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="语法-1">01.抓包过滤器语法和实例</button><button type="button" class="tab " data-href="语法-2">02.显示过滤器语法和实例</button><button type="button" class="tab " data-href="语法-3">03. 常见用显示过滤需求及其对应表达式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="语法-1"><ul>
<li><strong>在过滤器中配置的语法</strong></li>
<li>抓包过滤器:</li>
</ul>
<ol>
<li>类型Type（host、net、port）</li>
<li>方向Dir（src、dst）</li>
<li>协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）</li>
<li>逻辑运算符（&amp;&amp;与、|| 或、！非）</li>
</ol>
<ul>
<li><p>协议过滤:</p>
<blockquote>
<p>比较简单，直接在抓包过滤框中直接输入协议名即可。<br>tcp：只显示TCP协议的数据包列表<br>http：只查看HTTP协议的数据包列表<br>icmp：只显示ICMP协议的数据包列表</p>
</blockquote>
</li>
<li><p>IP过滤:</p>
<blockquote>
<p>host 192.168.1.104<br>src host 192.168.1.104<br>dst host 192.168.1.104</p>
</blockquote>
</li>
<li><p>端口过滤:</p>
<blockquote>
<p>port 80<br>src port 80<br>dst port 80</p>
</blockquote>
</li>
<li><p>逻辑运算符&amp;&amp;与、|| 或、！非</p>
<blockquote>
<p>src host 192.168.1.104 &amp;&amp; dst port 80  抓取主机地址为192.168.1.80、目的端口为80的数据包<br>host 192.168.1.104 || host 192.168.1.102  抓取主机为192.168.1.104或者192.168.1.102的数据包<br>! broadcast 不抓取广播数据包</p>
</blockquote>
</li>
</ul></div><div class="tab-item-content" id="语法-2"><ul>
<li><strong>在界面中的显示过滤器中输入的语法</strong></li>
</ul>
<ol>
<li><p>比较操作符:</p>
<blockquote>
<p>== 等于、！= 不等于、&gt; 大于、&lt; 小于、&gt;= 大于等于、&lt;=小于等于</p>
</blockquote>
</li>
<li><p>协议过滤:</p>
<blockquote>
<p>比较简单，直接在Filter框中直接输入协议名即可。<br>注意：协议名称需要输入小写。<br>tcp：只显示TCP协议的数据包列表<br>http：只查看HTTP协议的数据包列表<br>icmp：只显示ICMP协议的数据包列表</p>
</blockquote>
</li>
<li><p>ip过滤:</p>
<blockquote>
<p>ip.src ==112.53.42.42 显示源地址为112.53.42.42的数据包列表。<br>ip.dst==112.53.42.42, 显示目标地址为112.53.42.42的数据包列表。<br>ip.addr == 112.53.42.42 显示源IP地址或目标IP地址为112.53.42.42的数据包列表。<br><img src="https://pic.imgdb.cn/item/668b64dad9c307b7e9502cfa.png" alt="过滤ip包"></p>
</blockquote>
</li>
<li><p>端口过滤:</p>
<blockquote>
<p>tcp.port == 80,  显示源主机或者目的主机端口为80的数据包列表。<br>tcp.srcport == 80,  只显示TCP协议的源主机端口为80的数据包列表。<br>tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。<br><img src="https://pic.imgdb.cn/item/668bb724d9c307b7e9d93026.png" alt="图16"></p>
</blockquote>
</li>
<li><p>http模式过滤:</p>
<blockquote>
<p>http.request.method==”GET”    #只显示HTTP GET方法的。<br><img src="https://pic.imgdb.cn/item/668bb7b6d9c307b7e9d9df88.png" alt="图17"></p>
</blockquote>
</li>
<li><p>逻辑运算符为 and/or/not:</p>
<blockquote>
<p>过滤多个条件组合时，使用and/or。<br>比如获取IP地址为<strong>192.168.0.104</strong>的ICMP数据包表达式为 <strong>ip.addr == 192.168.0.104 and icmp</strong></p>
</blockquote>
</li>
<li><p>按照数据包内容过滤:</p>
<blockquote>
<p>假设我要以ICMP层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。<br><img src="https://pic.imgdb.cn/item/668bba32d9c307b7e9de3653.png" alt="图18"><br>选中后在过滤器中显示如下：<br><img src="https://pic.imgdb.cn/item/668bba90d9c307b7e9deaa34.png" alt="图19"><br>后面条件表达式就需要自己填写。<br>如下我想过滤出data数据包中包含”abcd”内容的数据流。<br>关键词是contains，完整条件表达式为data contains “abcd”。<br><img src="https://pic.imgdb.cn/item/668bbafed9c307b7e9df3083.png" alt="图20"></p>
</blockquote>
</li>
</ol></div><div class="tab-item-content" id="语法-3"><ol>
<li><p>数据链路层：</p>
<ul>
<li>筛选mac地址为04:f9:38:ad:13:26的数据包:<ul>
<li>eth.src == 04:f9:38:ad:13:26</li>
</ul>
</li>
<li>筛选源mac地址为04:f9:38:ad:13:26的数据包:<ul>
<li>eth.src == 04:f9:38:ad:13:26</li>
</ul>
</li>
</ul>
</li>
<li><p>网络层：</p>
<ul>
<li>筛选ip地址为192.168.1.1的数据包:<ul>
<li>ip.addr == 192.168.1.1</li>
</ul>
</li>
<li>筛选192.168.1.0网段的数据:<ul>
<li>ip contains “192.168.1”</li>
</ul>
</li>
</ul>
</li>
<li><p>传输层：</p>
<ul>
<li>筛选端口为80的数据包:<ul>
<li>tcp.port == 80</li>
</ul>
</li>
<li>筛选12345端口和80端口之间的数据包<ul>
<li>tcp.port == 12345 &amp;&amp; tcp.port == 80</li>
</ul>
</li>
<li>筛选从12345端口到80端口的数据包<ul>
<li>tcp.srcport == 12345 &amp;&amp; tcp.dstport == 80</li>
</ul>
</li>
</ul>
</li>
<li><p>应用层：<br><strong>特别说明:</strong> </p>
<blockquote>
<p>http中http.request表示请求头中的第一行（如GET index.jsp HTTP/1.1）<br>http.response表示响应头中的第一行（如HTTP/1.1 200 OK），其他头部都用http.header_name形式。</p>
</blockquote>
<ul>
<li>筛选url中包含.php的http数据包<ul>
<li>http.request.uri contains “.php”</li>
</ul>
</li>
<li>筛选内容包含username的http数据包<ul>
<li>http contains “username”</li>
</ul>
</li>
</ul>
</li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p class="p center log large">07.Wireshark抓包分析TCP三次握手</p>
<div class="tabs" id="tcp握手过程"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tcp握手过程-1">01.TCP三次握手连接建立过程</button><button type="button" class="tab " data-href="tcp握手过程-2">02. 抓包获取访问指定服务端数据包</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tcp握手过程-1"><blockquote>
<p>Step1：客户端发送一个SYN=1，ACK=0标志的数据包给服务端，请求进行连接，这是第一次握手；<br>Step2：服务端收到请求并且允许连接的话，就会发送一个SYN=1，ACK=1标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包，这是第二次握手；<br>Step3：服务端发送一个SYN=0，ACK=1的数据包给客户端端，告诉它连接已被确认，这就是第三次握手。TCP连接建立，开始通讯。<br><img src="https://pic.imgdb.cn/item/668bbddcd9c307b7e9e2b3a3.png" alt="图21"></p>
</blockquote></div><div class="tab-item-content" id="tcp握手过程-2"><blockquote>
<p>Step1：启动wireshark抓包，打开浏览器输入<a href="http://www.baidu.com./">www.baidu.com。</a><br>Step2：使用ping <a href="http://www.baidu.com获取百度的ip(120.232.145.144)./">www.baidu.com获取百度的IP（120.232.145.144）。</a><br>Step3：输入过滤条件获取待分析数据包列表 ip.addr == 120.232.145.144<br><img src="https://pic.imgdb.cn/item/668bbfc5d9c307b7e9e50d7b.png" alt="图22"><br>图中可以看到wireshark截获到了三次握手的三个数据包。<br>第四个包才是HTTPS的(HTTP+TLS=HTTPS)， 这说明HTTPS的确是使用TCP建立连接的</p>
</blockquote>
<p><mark class="hl-label green">第一次握手数据包</mark> </p>
<blockquote>
<p>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。<br><img src="https://pic.imgdb.cn/item/668c0d12d9c307b7e9721925.png" alt="图23"><br>数据包的关键属性如下：</p>
<ul>
<li>SYN ：标志位，表示请求建立连接</li>
<li>Seq = 0 ：初始建立连接值为0，数据包的相对序列号从0开始，表示当前还没有发送数据</li>
<li>Ack =0：初始建立连接值为0，已经收到包的数量，表示当前没有接收到数据</li>
</ul>
</blockquote>
<p><mark class="hl-label green">第二次握手的数据包</mark> </p>
<blockquote>
<p>服务器发回确认包, 标志位为 SYN 和 ACK。<br>将确认序号(Acknowledgement Number)字段+1，即0+1=1。<br>Next Sequence Number: 1  也 + 1<br><img src="https://pic.imgdb.cn/item/668c0e73d9c307b7e9758f9c.png" alt="图24"><br>数据包的关键属性如下：</p>
<ul>
<li></li>
<li>Seq = 0 ：初始建立值为0，表示当前还没有发送数据</li>
<li>Ack = 1：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位。（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）</li>
</ul>
</blockquote>
<p><mark class="hl-label green">第三次握手的数据包</mark> </p>
<blockquote>
<p>客户端再次发送确认包(ACK) SYN标志位为0，ACK标志位为1。<br>并且把服务器发来ACK的序号字段+1，放在确定字段中发送给对方，并且在Flag段写ACK的+1<br><img src="https://pic.imgdb.cn/item/668c0f93d9c307b7e977a8b6.png" alt="图25"><br>数据包的关键属性如下：</p>
<ul>
<li>ACK ：标志位，表示已经收到记录</li>
<li>Seq = 1 ：表示当前已经发送1个数据</li>
<li>Ack = 1 : 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据)。<br><strong>就这样通过了TCP三次握手，建立了连接。</strong><br><strong>下面就是开始进行数据交互了</strong></li>
</ul>
</blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p class="p center log large">08.Wireshark分析常用操作</p>
<mark class="hl-label default">调整数据包列表中时间戳显示格式</mark> 
<blockquote>
<p>调整方法为 视图 –&gt;时间显示格式 –&gt; 日期和时间。调整后格式如下：<br><img src="https://pic.imgdb.cn/item/668c10ded9c307b7e97964f6.png" alt="图26"></p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>wireshark,网络抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>最好用的比对工具-beyondcompare</title>
    <url>/looking/4d33b968.html</url>
    <content><![CDATA[<h2 id="beyondcompare"><a href="#beyondcompare" class="headerlink" title="beyondcompare"></a>beyondcompare</h2><p><img src="https://www.scootersoftware.com/bc_icon.png" alt="img"></p>
<blockquote>
<p>Beyond Compare是一套由Scooter Software推出的内容比较工具软件。除了可以作文件比较以外，还可以比对文件目录、FTP目录及压缩包案的内容等。</p>
<p>因为这些功能，Beyond Compare被应用于版本控制及资料同步的工作上</p>
<blockquote>
<p>这是一款流行的比对工具,主要的功能如下：</p>
</blockquote>
<ul>
<li>比较文件，文件夹</li>
<li>比较Excel文件</li>
<li>比较Word文件</li>
<li>图片比较</li>
<li>合并两个文件内容</li>
<li>合并两个文件夹</li>
</ul>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.scootersoftware.com/download">官网下载链接：byendcompare4-download</a></p>
<ol>
<li>下载安装包<br><strong>注意</strong>：按照系统版本下载安装包</li>
<li>安装<ul>
<li>运行安装包，选择安装位置，点击安装</li>
</ul>
</li>
<li>打开即可</li>
</ol>
<p><strong>注意</strong>：由于这是免费版本的只有30天的试用期，所以需要下边的方法来重置一下试用期</p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p><strong>注意:最新版本好像没有BCompare.ini这个文件</strong></p>
<blockquote>
<p>修改C:\Users\Administrator\AppData\Roaming\BCompare\BCompare.ini这个配置文件中的时间戳来使软件一直处于试用期。</p>
<p>BCompare.ini文件的内容大致如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[BCompare]</span><br><span class="line">InstallTime=1534816784</span><br><span class="line">LastLoading=1538200843</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>#写一个脚本实现开机执行修改时间：<br>#把脚本文件放到C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\这个目录下就就可以开机自启了。<br><strong>这是一个python脚本</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import time  </span><br><span class="line">f = open(<span class="string">"C:\\Users\\Administrator\\AppData\\Roaming\\BCompare\\BCompare.ini"</span>,<span class="string">"r+"</span>)  </span><br><span class="line">f_content = f.readlines()  </span><br><span class="line">f.seek(0,0)  </span><br><span class="line">f.truncate()  </span><br><span class="line">t = str(int(time.time()))  </span><br><span class="line">f.write(f_content[0])  </span><br><span class="line">f.write(f_content[1][:12] + t + <span class="string">"\n"</span>)  </span><br><span class="line">f.write(f_content[2][:12] + t + <span class="string">"\n"</span>) </span><br><span class="line"></span><br><span class="line">f.close() </span><br></pre></td></tr></tbody></table></figure>


<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><blockquote>
<p>修改C:\Program Files\Beyond Compare 4\BCUnrar.dll</p>
<p>这个文件重命名或者直接删除，则会新增30天试用期，再次打开提示还有28天试用期。<br><strong>注意</strong>：也可以写一个脚本将这个文件重命名或者直接删除</p>
</blockquote>
<h2 id="方法三：修改注册表"><a href="#方法三：修改注册表" class="headerlink" title="方法三：修改注册表"></a>方法三：修改注册表</h2><blockquote>
<p>1、在搜索栏中输入 regedit  ，打开注册表<br>2、 删除项目：计算机\HKEY_CURRENT_USER\Software\ScooterSoftware\Beyond Compare 4\CacheId<br><strong>注：</strong>此方法写一个脚本文件，每次开机的时候去删除注册表中的CacheId，同样能达到一直处于试用期的效果,结合方法4的bat文件即可</p>
</blockquote>
<h2 id="方法四：本地手动执行bat文件"><a href="#方法四：本地手动执行bat文件" class="headerlink" title="方法四：本地手动执行bat文件"></a>方法四：本地手动执行bat文件</h2><blockquote>
<p>将一下代码保存成txt后，修改后缀名为bat</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">reg delete "HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4" /v CacheID /f</span><br></pre></td></tr></tbody></table></figure>
<p>当beyongd软件剩余时间不多时候，运行此bat，重新打开软件即可剩余时间为三十天</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#解析上面的语句：</span><br><span class="line">reg delete：这是一个命令，用于删除注册表中的键值对或键。</span><br><span class="line">"HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4"：这是注册表路径，指定了与当前用户相关的Beyond Compare 4软件的注册表位置。</span><br><span class="line">/v CacheID：这指定要删除HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4键中名为CacheID的特定注册表数值。</span><br><span class="line">/f：这个选项强制执行删除操作，而不会提示确认。</span><br></pre></td></tr></tbody></table></figure>
<p><strong>这条命令的作用是删除注册表路径 HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4 中名为 CacheID 的注册表数值（键值对）。</strong></p>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>比对工具-beyondcompare</tag>
      </tags>
  </entry>
  <entry>
    <title>零成本搭建个人博客</title>
    <url>/looking/8f33bcf2.html</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装nodejs</li>
<li>安装hexo</li>
<li>发表文章</li>
<li>注册github</li>
<li>下载github Desktop</li>
<li>更换主题</li>
</ol>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><h3 id="1-下载nodejs"><a href="#1-下载nodejs" class="headerlink" title="1. 下载nodejs"></a>1. 下载nodejs</h3><p>点击去到官网：<a href="https://nodejs.org/en">nodejs.org</a><br>#下载LTS版本<br><img src="/img/local/1.png" alt="下载LTS版本"></p>
<p>下载后安装下一步、选择安装路径即可<br>#如没有其它需求直接下一步<br><img src="/img/local/2.png" alt="nodejs安装1"></p>
<h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><p>nodejs安装成功后在cmd中输入npm验证一下：按 Win+R 键、弹出后 输入 cmd</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/img/local/3.png" alt="cmd"></p>
<p>创建workspace：放置hexo下载的nmp包<br>#F:\workspace ：在此目录下打开cmd 下载hexo<br>#注意：安装目录要确定：可以在cmd中输入： </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> F:\workspace</span><br></pre></td></tr></tbody></table></figure>
<p>#去到该目录下<br>#建议可以使用vscode来执行-可选<br>按照官网提供的 命令执行安装启动hexo即可：命令如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/img/local/4.png" alt="cmd install hexo"></p>
<p>访问本地搭建好的blog、浏览器输入：<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="/img/local/5.png" alt="http://localhost:4000/"></p>
<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><p>使用vscode打开 上面创建好的blog目录：如下<br><img src="/img/local/6.png" alt="vscode open blog file"><br>编辑文章：打开source_posts 下的hello-world.md 进行修改、效果如下：<br><img src="/img/local/7.png" alt="blog page"><br>#注意:如果在vscode中的终端无法使用npm、hexo等命令<br>#需要将vscode的属性配置为-以管理员身份运行此程序(前提是你是用的普通用户安装的话、如果是使用Administrator的话就没必要了):如下图<br><img src="/img/local/8.png" alt="add env_path for vscode"></p>
<p>新增文章：在终端或cmd输入：<br>#（其实就是在soruce\posts下新建了一个.md文件）：如下<br>#’零成本搭建个人博客’ 是文章名</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new 零成本搭建个人博客</span><br></pre></td></tr></tbody></table></figure>
<p>启动hexo服务：<br>#（如果没有关掉上一个服务就没必要执行）<br>#可以看到网页出了第二篇文章<br><strong>注意</strong>：这里推荐使用<strong>markdown</strong>语法<br>markdown官网：<a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/img/local/9.png" alt="write blog"><br><img src="/img/local/10.png" alt="write blog"></p>
<h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h2><p>点击去到官网：<a href="https://github.com/">github</a></p>
<ol>
<li>注册github账号</li>
<li>创建一个仓库：<br><img src="/img/local/11.png" alt="create repo"><br>自定义自己的博客网址：如下图<br>然后拉到最下面点击：create repository<br><img src="/img/local/13.png" alt="create repo"><br>创建后会跳到这个界面：可以不用管（我们不使用这里提供的命令、使用一个客户端来克隆下载本项目）<br><img src="/img/local/14.png" alt="create repo"></li>
</ol>
<h2 id="下载github-Desktop"><a href="#下载github-Desktop" class="headerlink" title="下载github Desktop"></a>下载github Desktop</h2><p>点击去到官网：<a href="https://desktop.github.com/">github desktop</a><br>下载后安装即可<br><img src="/img/local/15.png" alt="download desktop"><br>打开github desktop后登录：<br>#使用github账户登录<br><img src="/img/local/16.png" alt="loggin"><br>克隆上面github创建的项目：<br>#克隆项目到指定目录：点击Clone<br><img src="/img/local/17.png" alt="Clone"><br><img src="/img/local/18.png" alt="Clone"></p>
<p>回到终端、将hexo项目输出 github格式的项目目录架构<br>#先终止hexo server：按 </p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ctrl + c</span><br></pre></td></tr></tbody></table></figure>
<p>再执行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo generate  输出项目</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/img/local/19.png" alt="hexo generate"><br><img src="/img/local/20.png" alt="hexo generate"></p>
<p>回到 github Desktop<br><img src="/img/local/21.png" alt="github Desktop "></p>
<p>提交到github：<br><img src="/img/local/22.png" alt="commit github"></p>
<p>等待推送完成后再浏览器中输入网址：<br><a href="https://xiaoxin-top.github.io/">https://xiaoxin-top.github.io/</a><br>即可打开自己的博客啦<br><img src="/img/local/23.png" alt="open blog"></p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如果觉得默认的主题不符合你的审美、可以再官网选择自己喜欢的主题<br>主题官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>点击进去可以看到 各种各样的主题、点击主题里面都带有部署的步骤<br><strong>注意：</strong>&gt; 搭建完成后，记得修改主题的配置文件，否则主题可能会显示异常<br><strong>修改根目录下的_config.yml文件</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">theme: hexo-theme-cola  <span class="comment">#theme: 主题名称</span></span><br></pre></td></tr></tbody></table></figure>
<p>以上就是个人博客的搭建啦、更多主题需要个人去探索啦<br><img src="/img/local/24.png" alt="open blog"></p>
<h2 id="这里提供一种直接部署到github的方案"><a href="#这里提供一种直接部署到github的方案" class="headerlink" title="这里提供一种直接部署到github的方案"></a>这里提供一种直接部署到github的方案</h2><ol>
<li>编辑配置文件（注意是根目录下的_config.yml）：</li>
</ol>
<p>#在最后添加github项目的配置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/xiaoxin-top/xiaoxin-top.github.io.git   <span class="comment">#github项目地址：https克隆或是SSH git的地址</span></span><br><span class="line">  branch: main      <span class="comment">#分支：默认是master</span></span><br><span class="line">  message: Update blog content  <span class="comment">#提交信息 可修改</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装hexo-deployer-git插件：</li>
</ol>
<p>#在命令行中输入：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>运行hexo deploy命令：<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo cl <span class="comment">#清理缓存</span></span><br><span class="line">hexo g  <span class="comment">#生成静态文件</span></span><br><span class="line">hexo d  <span class="comment">#部署</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
